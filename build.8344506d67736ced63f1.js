/*! For license information please see build.8344506d67736ced63f1.js.LICENSE.txt */
(()=>{var e,t,r={551:(e,t,r)=>{"use strict";var n=r(540),a=r(982);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=1;r<arguments.length;r++)t+="&args[]="+encodeURIComponent(arguments[r]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var s=new Set,l={};function o(e,t){u(e,t),u(e+"Capture",t)}function u(e,t){for(l[e]=t,e=0;e<t.length;e++)s.add(t[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=Object.prototype.hasOwnProperty,p=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,f={},m={};function h(e,t,r,n,a,i,s){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=n,this.attributeNamespace=a,this.mustUseProperty=r,this.propertyName=e,this.type=t,this.sanitizeURL=i,this.removeEmptyString=s}var v={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){v[e]=new h(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];v[t]=new h(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){v[e]=new h(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){v[e]=new h(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){v[e]=new h(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){v[e]=new h(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){v[e]=new h(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){v[e]=new h(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){v[e]=new h(e,5,!1,e.toLowerCase(),null,!1,!1)}));var g=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function w(e,t,r,n){var a=v.hasOwnProperty(t)?v[t]:null;(null!==a?0!==a.type:n||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,r,n){if(null==t||function(e,t,r,n){if(null!==r&&0===r.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!n&&(null!==r?!r.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,r,n))return!0;if(n)return!1;if(null!==r)switch(r.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,r,a,n)&&(r=null),n||null===a?function(e){return!!d.call(m,e)||!d.call(f,e)&&(p.test(e)?m[e]=!0:(f[e]=!0,!1))}(t)&&(null===r?e.removeAttribute(t):e.setAttribute(t,""+r)):a.mustUseProperty?e[a.propertyName]=null===r?3!==a.type&&"":r:(t=a.attributeName,n=a.attributeNamespace,null===r?e.removeAttribute(t):(r=3===(a=a.type)||4===a&&!0===r?"":""+r,n?e.setAttributeNS(n,t,r):e.setAttribute(t,r))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(g,b);v[t]=new h(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(g,b);v[t]=new h(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(g,b);v[t]=new h(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){v[e]=new h(e,1,!1,e.toLowerCase(),null,!1,!1)})),v.xlinkHref=new h("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){v[e]=new h(e,1,!1,e.toLowerCase(),null,!0,!0)}));var y=n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,x=Symbol.for("react.element"),S=Symbol.for("react.portal"),E=Symbol.for("react.fragment"),k=Symbol.for("react.strict_mode"),C=Symbol.for("react.profiler"),T=Symbol.for("react.provider"),M=Symbol.for("react.context"),P=Symbol.for("react.forward_ref"),L=Symbol.for("react.suspense"),z=Symbol.for("react.suspense_list"),_=Symbol.for("react.memo"),O=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var D=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var N=Symbol.iterator;function A(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=N&&e[N]||e["@@iterator"])?e:null}var I,R=Object.assign;function j(e){if(void 0===I)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);I=t&&t[1]||""}return"\n"+I+e}var $=!1;function q(e,t){if(!e||$)return"";$=!0;var r=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var n=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){n=e}e.call(t.prototype)}else{try{throw Error()}catch(e){n=e}e()}}catch(t){if(t&&n&&"string"==typeof t.stack){for(var a=t.stack.split("\n"),i=n.stack.split("\n"),s=a.length-1,l=i.length-1;1<=s&&0<=l&&a[s]!==i[l];)l--;for(;1<=s&&0<=l;s--,l--)if(a[s]!==i[l]){if(1!==s||1!==l)do{if(s--,0>--l||a[s]!==i[l]){var o="\n"+a[s].replace(" at new "," at ");return e.displayName&&o.includes("<anonymous>")&&(o=o.replace("<anonymous>",e.displayName)),o}}while(1<=s&&0<=l);break}}}finally{$=!1,Error.prepareStackTrace=r}return(e=e?e.displayName||e.name:"")?j(e):""}function F(e){switch(e.tag){case 5:return j(e.type);case 16:return j("Lazy");case 13:return j("Suspense");case 19:return j("SuspenseList");case 0:case 2:case 15:return q(e.type,!1);case 11:return q(e.type.render,!1);case 1:return q(e.type,!0);default:return""}}function B(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case E:return"Fragment";case S:return"Portal";case C:return"Profiler";case k:return"StrictMode";case L:return"Suspense";case z:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case M:return(e.displayName||"Context")+".Consumer";case T:return(e._context.displayName||"Context")+".Provider";case P:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case _:return null!==(t=e.displayName||null)?t:B(e.type)||"Memo";case O:t=e._payload,e=e._init;try{return B(e(t))}catch(e){}}return null}function H(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return B(t);case 8:return t===k?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function V(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function U(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function W(e){e._valueTracker||(e._valueTracker=function(e){var t=U(e)?"checked":"value",r=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),n=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==r&&"function"==typeof r.get&&"function"==typeof r.set){var a=r.get,i=r.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){n=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:r.enumerable}),{getValue:function(){return n},setValue:function(e){n=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function G(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var r=t.getValue(),n="";return e&&(n=U(e)?e.checked?"true":"false":e.value),(e=n)!==r&&(t.setValue(e),!0)}function Y(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function X(e,t){var r=t.checked;return R({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=r?r:e._wrapperState.initialChecked})}function Q(e,t){var r=null==t.defaultValue?"":t.defaultValue,n=null!=t.checked?t.checked:t.defaultChecked;r=V(null!=t.value?t.value:r),e._wrapperState={initialChecked:n,initialValue:r,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function K(e,t){null!=(t=t.checked)&&w(e,"checked",t,!1)}function J(e,t){K(e,t);var r=V(t.value),n=t.type;if(null!=r)"number"===n?(0===r&&""===e.value||e.value!=r)&&(e.value=""+r):e.value!==""+r&&(e.value=""+r);else if("submit"===n||"reset"===n)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,r):t.hasOwnProperty("defaultValue")&&ee(e,t.type,V(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Z(e,t,r){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var n=t.type;if(!("submit"!==n&&"reset"!==n||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,r||t===e.value||(e.value=t),e.defaultValue=t}""!==(r=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==r&&(e.name=r)}function ee(e,t,r){"number"===t&&Y(e.ownerDocument)===e||(null==r?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+r&&(e.defaultValue=""+r))}var te=Array.isArray;function re(e,t,r,n){if(e=e.options,t){t={};for(var a=0;a<r.length;a++)t["$"+r[a]]=!0;for(r=0;r<e.length;r++)a=t.hasOwnProperty("$"+e[r].value),e[r].selected!==a&&(e[r].selected=a),a&&n&&(e[r].defaultSelected=!0)}else{for(r=""+V(r),t=null,a=0;a<e.length;a++){if(e[a].value===r)return e[a].selected=!0,void(n&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function ne(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return R({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ae(e,t){var r=t.value;if(null==r){if(r=t.children,t=t.defaultValue,null!=r){if(null!=t)throw Error(i(92));if(te(r)){if(1<r.length)throw Error(i(93));r=r[0]}t=r}null==t&&(t=""),r=t}e._wrapperState={initialValue:V(r)}}function ie(e,t){var r=V(t.value),n=V(t.defaultValue);null!=r&&((r=""+r)!==e.value&&(e.value=r),null==t.defaultValue&&e.defaultValue!==r&&(e.defaultValue=r)),null!=n&&(e.defaultValue=""+n)}function se(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function le(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function oe(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?le(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ue,ce,de=(ce=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((ue=ue||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ue.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,r,n){MSApp.execUnsafeLocalFunction((function(){return ce(e,t)}))}:ce);function pe(e,t){if(t){var r=e.firstChild;if(r&&r===e.lastChild&&3===r.nodeType)return void(r.nodeValue=t)}e.textContent=t}var fe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},me=["Webkit","ms","Moz","O"];function he(e,t,r){return null==t||"boolean"==typeof t||""===t?"":r||"number"!=typeof t||0===t||fe.hasOwnProperty(e)&&fe[e]?(""+t).trim():t+"px"}function ve(e,t){for(var r in e=e.style,t)if(t.hasOwnProperty(r)){var n=0===r.indexOf("--"),a=he(r,t[r],n);"float"===r&&(r="cssFloat"),n?e.setProperty(r,a):e[r]=a}}Object.keys(fe).forEach((function(e){me.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),fe[t]=fe[e]}))}));var ge=R({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function be(e,t){if(t){if(ge[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(i(62))}}function we(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var ye=null;function xe(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Se=null,Ee=null,ke=null;function Ce(e){if(e=wa(e)){if("function"!=typeof Se)throw Error(i(280));var t=e.stateNode;t&&(t=xa(t),Se(e.stateNode,e.type,t))}}function Te(e){Ee?ke?ke.push(e):ke=[e]:Ee=e}function Me(){if(Ee){var e=Ee,t=ke;if(ke=Ee=null,Ce(e),t)for(e=0;e<t.length;e++)Ce(t[e])}}function Pe(e,t){return e(t)}function Le(){}var ze=!1;function _e(e,t,r){if(ze)return e(t,r);ze=!0;try{return Pe(e,t,r)}finally{ze=!1,(null!==Ee||null!==ke)&&(Le(),Me())}}function Oe(e,t){var r=e.stateNode;if(null===r)return null;var n=xa(r);if(null===n)return null;r=n[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(n=!n.disabled)||(n=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!n;break e;default:e=!1}if(e)return null;if(r&&"function"!=typeof r)throw Error(i(231,t,typeof r));return r}var De=!1;if(c)try{var Ne={};Object.defineProperty(Ne,"passive",{get:function(){De=!0}}),window.addEventListener("test",Ne,Ne),window.removeEventListener("test",Ne,Ne)}catch(ce){De=!1}function Ae(e,t,r,n,a,i,s,l,o){var u=Array.prototype.slice.call(arguments,3);try{t.apply(r,u)}catch(e){this.onError(e)}}var Ie=!1,Re=null,je=!1,$e=null,qe={onError:function(e){Ie=!0,Re=e}};function Fe(e,t,r,n,a,i,s,l,o){Ie=!1,Re=null,Ae.apply(qe,arguments)}function Be(e){var t=e,r=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{!!(4098&(t=e).flags)&&(r=t.return),e=t.return}while(e)}return 3===t.tag?r:null}function He(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Ve(e){if(Be(e)!==e)throw Error(i(188))}function Ue(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=Be(e)))throw Error(i(188));return t!==e?null:e}for(var r=e,n=t;;){var a=r.return;if(null===a)break;var s=a.alternate;if(null===s){if(null!==(n=a.return)){r=n;continue}break}if(a.child===s.child){for(s=a.child;s;){if(s===r)return Ve(a),e;if(s===n)return Ve(a),t;s=s.sibling}throw Error(i(188))}if(r.return!==n.return)r=a,n=s;else{for(var l=!1,o=a.child;o;){if(o===r){l=!0,r=a,n=s;break}if(o===n){l=!0,n=a,r=s;break}o=o.sibling}if(!l){for(o=s.child;o;){if(o===r){l=!0,r=s,n=a;break}if(o===n){l=!0,n=s,r=a;break}o=o.sibling}if(!l)throw Error(i(189))}}if(r.alternate!==n)throw Error(i(190))}if(3!==r.tag)throw Error(i(188));return r.stateNode.current===r?e:t}(e))?We(e):null}function We(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=We(e);if(null!==t)return t;e=e.sibling}return null}var Ge=a.unstable_scheduleCallback,Ye=a.unstable_cancelCallback,Xe=a.unstable_shouldYield,Qe=a.unstable_requestPaint,Ke=a.unstable_now,Je=a.unstable_getCurrentPriorityLevel,Ze=a.unstable_ImmediatePriority,et=a.unstable_UserBlockingPriority,tt=a.unstable_NormalPriority,rt=a.unstable_LowPriority,nt=a.unstable_IdlePriority,at=null,it=null,st=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(lt(e)/ot|0)|0},lt=Math.log,ot=Math.LN2,ut=64,ct=4194304;function dt(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function pt(e,t){var r=e.pendingLanes;if(0===r)return 0;var n=0,a=e.suspendedLanes,i=e.pingedLanes,s=268435455&r;if(0!==s){var l=s&~a;0!==l?n=dt(l):0!=(i&=s)&&(n=dt(i))}else 0!=(s=r&~a)?n=dt(s):0!==i&&(n=dt(i));if(0===n)return 0;if(0!==t&&t!==n&&!(t&a)&&((a=n&-n)>=(i=t&-t)||16===a&&4194240&i))return t;if(4&n&&(n|=16&r),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=n;0<t;)a=1<<(r=31-st(t)),n|=e[r],t&=~a;return n}function ft(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function mt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function ht(){var e=ut;return!(4194240&(ut<<=1))&&(ut=64),e}function vt(e){for(var t=[],r=0;31>r;r++)t.push(e);return t}function gt(e,t,r){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-st(t)]=r}function bt(e,t){var r=e.entangledLanes|=t;for(e=e.entanglements;r;){var n=31-st(r),a=1<<n;a&t|e[n]&t&&(e[n]|=t),r&=~a}}var wt=0;function yt(e){return 1<(e&=-e)?4<e?268435455&e?16:536870912:4:1}var xt,St,Et,kt,Ct,Tt=!1,Mt=[],Pt=null,Lt=null,zt=null,_t=new Map,Ot=new Map,Dt=[],Nt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function At(e,t){switch(e){case"focusin":case"focusout":Pt=null;break;case"dragenter":case"dragleave":Lt=null;break;case"mouseover":case"mouseout":zt=null;break;case"pointerover":case"pointerout":_t.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Ot.delete(t.pointerId)}}function It(e,t,r,n,a,i){return null===e||e.nativeEvent!==i?(e={blockedOn:t,domEventName:r,eventSystemFlags:n,nativeEvent:i,targetContainers:[a]},null!==t&&null!==(t=wa(t))&&St(t),e):(e.eventSystemFlags|=n,t=e.targetContainers,null!==a&&-1===t.indexOf(a)&&t.push(a),e)}function Rt(e){var t=ba(e.target);if(null!==t){var r=Be(t);if(null!==r)if(13===(t=r.tag)){if(null!==(t=He(r)))return e.blockedOn=t,void Ct(e.priority,(function(){Et(r)}))}else if(3===t&&r.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===r.tag?r.stateNode.containerInfo:null)}e.blockedOn=null}function jt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var r=Xt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==r)return null!==(t=wa(r))&&St(t),e.blockedOn=r,!1;var n=new(r=e.nativeEvent).constructor(r.type,r);ye=n,r.target.dispatchEvent(n),ye=null,t.shift()}return!0}function $t(e,t,r){jt(e)&&r.delete(t)}function qt(){Tt=!1,null!==Pt&&jt(Pt)&&(Pt=null),null!==Lt&&jt(Lt)&&(Lt=null),null!==zt&&jt(zt)&&(zt=null),_t.forEach($t),Ot.forEach($t)}function Ft(e,t){e.blockedOn===t&&(e.blockedOn=null,Tt||(Tt=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,qt)))}function Bt(e){function t(t){return Ft(t,e)}if(0<Mt.length){Ft(Mt[0],e);for(var r=1;r<Mt.length;r++){var n=Mt[r];n.blockedOn===e&&(n.blockedOn=null)}}for(null!==Pt&&Ft(Pt,e),null!==Lt&&Ft(Lt,e),null!==zt&&Ft(zt,e),_t.forEach(t),Ot.forEach(t),r=0;r<Dt.length;r++)(n=Dt[r]).blockedOn===e&&(n.blockedOn=null);for(;0<Dt.length&&null===(r=Dt[0]).blockedOn;)Rt(r),null===r.blockedOn&&Dt.shift()}var Ht=y.ReactCurrentBatchConfig,Vt=!0;function Ut(e,t,r,n){var a=wt,i=Ht.transition;Ht.transition=null;try{wt=1,Gt(e,t,r,n)}finally{wt=a,Ht.transition=i}}function Wt(e,t,r,n){var a=wt,i=Ht.transition;Ht.transition=null;try{wt=4,Gt(e,t,r,n)}finally{wt=a,Ht.transition=i}}function Gt(e,t,r,n){if(Vt){var a=Xt(e,t,r,n);if(null===a)Vn(e,t,n,Yt,r),At(e,n);else if(function(e,t,r,n,a){switch(t){case"focusin":return Pt=It(Pt,e,t,r,n,a),!0;case"dragenter":return Lt=It(Lt,e,t,r,n,a),!0;case"mouseover":return zt=It(zt,e,t,r,n,a),!0;case"pointerover":var i=a.pointerId;return _t.set(i,It(_t.get(i)||null,e,t,r,n,a)),!0;case"gotpointercapture":return i=a.pointerId,Ot.set(i,It(Ot.get(i)||null,e,t,r,n,a)),!0}return!1}(a,e,t,r,n))n.stopPropagation();else if(At(e,n),4&t&&-1<Nt.indexOf(e)){for(;null!==a;){var i=wa(a);if(null!==i&&xt(i),null===(i=Xt(e,t,r,n))&&Vn(e,t,n,Yt,r),i===a)break;a=i}null!==a&&n.stopPropagation()}else Vn(e,t,n,null,r)}}var Yt=null;function Xt(e,t,r,n){if(Yt=null,null!==(e=ba(e=xe(n))))if(null===(t=Be(e)))e=null;else if(13===(r=t.tag)){if(null!==(e=He(t)))return e;e=null}else if(3===r){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Yt=e,null}function Qt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Je()){case Ze:return 1;case et:return 4;case tt:case rt:return 16;case nt:return 536870912;default:return 16}default:return 16}}var Kt=null,Jt=null,Zt=null;function er(){if(Zt)return Zt;var e,t,r=Jt,n=r.length,a="value"in Kt?Kt.value:Kt.textContent,i=a.length;for(e=0;e<n&&r[e]===a[e];e++);var s=n-e;for(t=1;t<=s&&r[n-t]===a[i-t];t++);return Zt=a.slice(e,1<t?1-t:void 0)}function tr(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function rr(){return!0}function nr(){return!1}function ar(e){function t(t,r,n,a,i){for(var s in this._reactName=t,this._targetInst=n,this.type=r,this.nativeEvent=a,this.target=i,this.currentTarget=null,e)e.hasOwnProperty(s)&&(t=e[s],this[s]=t?t(a):a[s]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?rr:nr,this.isPropagationStopped=nr,this}return R(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=rr)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=rr)},persist:function(){},isPersistent:rr}),t}var ir,sr,lr,or={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},ur=ar(or),cr=R({},or,{view:0,detail:0}),dr=ar(cr),pr=R({},cr,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:kr,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==lr&&(lr&&"mousemove"===e.type?(ir=e.screenX-lr.screenX,sr=e.screenY-lr.screenY):sr=ir=0,lr=e),ir)},movementY:function(e){return"movementY"in e?e.movementY:sr}}),fr=ar(pr),mr=ar(R({},pr,{dataTransfer:0})),hr=ar(R({},cr,{relatedTarget:0})),vr=ar(R({},or,{animationName:0,elapsedTime:0,pseudoElement:0})),gr=R({},or,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),br=ar(gr),wr=ar(R({},or,{data:0})),yr={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},xr={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Sr={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Er(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Sr[e])&&!!t[e]}function kr(){return Er}var Cr=R({},cr,{key:function(e){if(e.key){var t=yr[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tr(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?xr[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:kr,charCode:function(e){return"keypress"===e.type?tr(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tr(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Tr=ar(Cr),Mr=ar(R({},pr,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Pr=ar(R({},cr,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:kr})),Lr=ar(R({},or,{propertyName:0,elapsedTime:0,pseudoElement:0})),zr=R({},pr,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),_r=ar(zr),Or=[9,13,27,32],Dr=c&&"CompositionEvent"in window,Nr=null;c&&"documentMode"in document&&(Nr=document.documentMode);var Ar=c&&"TextEvent"in window&&!Nr,Ir=c&&(!Dr||Nr&&8<Nr&&11>=Nr),Rr=String.fromCharCode(32),jr=!1;function $r(e,t){switch(e){case"keyup":return-1!==Or.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function qr(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Fr=!1,Br={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Hr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Br[e.type]:"textarea"===t}function Vr(e,t,r,n){Te(n),0<(t=Wn(t,"onChange")).length&&(r=new ur("onChange","change",null,r,n),e.push({event:r,listeners:t}))}var Ur=null,Wr=null;function Gr(e){jn(e,0)}function Yr(e){if(G(ya(e)))return e}function Xr(e,t){if("change"===e)return t}var Qr=!1;if(c){var Kr;if(c){var Jr="oninput"in document;if(!Jr){var Zr=document.createElement("div");Zr.setAttribute("oninput","return;"),Jr="function"==typeof Zr.oninput}Kr=Jr}else Kr=!1;Qr=Kr&&(!document.documentMode||9<document.documentMode)}function en(){Ur&&(Ur.detachEvent("onpropertychange",tn),Wr=Ur=null)}function tn(e){if("value"===e.propertyName&&Yr(Wr)){var t=[];Vr(t,Wr,e,xe(e)),_e(Gr,t)}}function rn(e,t,r){"focusin"===e?(en(),Wr=r,(Ur=t).attachEvent("onpropertychange",tn)):"focusout"===e&&en()}function nn(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Yr(Wr)}function an(e,t){if("click"===e)return Yr(t)}function sn(e,t){if("input"===e||"change"===e)return Yr(t)}var ln="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function on(e,t){if(ln(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var r=Object.keys(e),n=Object.keys(t);if(r.length!==n.length)return!1;for(n=0;n<r.length;n++){var a=r[n];if(!d.call(t,a)||!ln(e[a],t[a]))return!1}return!0}function un(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cn(e,t){var r,n=un(e);for(e=0;n;){if(3===n.nodeType){if(r=e+n.textContent.length,e<=t&&r>=t)return{node:n,offset:t-e};e=r}e:{for(;n;){if(n.nextSibling){n=n.nextSibling;break e}n=n.parentNode}n=void 0}n=un(n)}}function dn(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?dn(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function pn(){for(var e=window,t=Y();t instanceof e.HTMLIFrameElement;){try{var r="string"==typeof t.contentWindow.location.href}catch(e){r=!1}if(!r)break;t=Y((e=t.contentWindow).document)}return t}function fn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function mn(e){var t=pn(),r=e.focusedElem,n=e.selectionRange;if(t!==r&&r&&r.ownerDocument&&dn(r.ownerDocument.documentElement,r)){if(null!==n&&fn(r))if(t=n.start,void 0===(e=n.end)&&(e=t),"selectionStart"in r)r.selectionStart=t,r.selectionEnd=Math.min(e,r.value.length);else if((e=(t=r.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var a=r.textContent.length,i=Math.min(n.start,a);n=void 0===n.end?i:Math.min(n.end,a),!e.extend&&i>n&&(a=n,n=i,i=a),a=cn(r,i);var s=cn(r,n);a&&s&&(1!==e.rangeCount||e.anchorNode!==a.node||e.anchorOffset!==a.offset||e.focusNode!==s.node||e.focusOffset!==s.offset)&&((t=t.createRange()).setStart(a.node,a.offset),e.removeAllRanges(),i>n?(e.addRange(t),e.extend(s.node,s.offset)):(t.setEnd(s.node,s.offset),e.addRange(t)))}for(t=[],e=r;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof r.focus&&r.focus(),r=0;r<t.length;r++)(e=t[r]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var hn=c&&"documentMode"in document&&11>=document.documentMode,vn=null,gn=null,bn=null,wn=!1;function yn(e,t,r){var n=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;wn||null==vn||vn!==Y(n)||(n="selectionStart"in(n=vn)&&fn(n)?{start:n.selectionStart,end:n.selectionEnd}:{anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},bn&&on(bn,n)||(bn=n,0<(n=Wn(gn,"onSelect")).length&&(t=new ur("onSelect","select",null,t,r),e.push({event:t,listeners:n}),t.target=vn)))}function xn(e,t){var r={};return r[e.toLowerCase()]=t.toLowerCase(),r["Webkit"+e]="webkit"+t,r["Moz"+e]="moz"+t,r}var Sn={animationend:xn("Animation","AnimationEnd"),animationiteration:xn("Animation","AnimationIteration"),animationstart:xn("Animation","AnimationStart"),transitionend:xn("Transition","TransitionEnd")},En={},kn={};function Cn(e){if(En[e])return En[e];if(!Sn[e])return e;var t,r=Sn[e];for(t in r)if(r.hasOwnProperty(t)&&t in kn)return En[e]=r[t];return e}c&&(kn=document.createElement("div").style,"AnimationEvent"in window||(delete Sn.animationend.animation,delete Sn.animationiteration.animation,delete Sn.animationstart.animation),"TransitionEvent"in window||delete Sn.transitionend.transition);var Tn=Cn("animationend"),Mn=Cn("animationiteration"),Pn=Cn("animationstart"),Ln=Cn("transitionend"),zn=new Map,_n="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function On(e,t){zn.set(e,t),o(t,[e])}for(var Dn=0;Dn<_n.length;Dn++){var Nn=_n[Dn];On(Nn.toLowerCase(),"on"+(Nn[0].toUpperCase()+Nn.slice(1)))}On(Tn,"onAnimationEnd"),On(Mn,"onAnimationIteration"),On(Pn,"onAnimationStart"),On("dblclick","onDoubleClick"),On("focusin","onFocus"),On("focusout","onBlur"),On(Ln,"onTransitionEnd"),u("onMouseEnter",["mouseout","mouseover"]),u("onMouseLeave",["mouseout","mouseover"]),u("onPointerEnter",["pointerout","pointerover"]),u("onPointerLeave",["pointerout","pointerover"]),o("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),o("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),o("onBeforeInput",["compositionend","keypress","textInput","paste"]),o("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),o("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),o("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var An="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),In=new Set("cancel close invalid load scroll toggle".split(" ").concat(An));function Rn(e,t,r){var n=e.type||"unknown-event";e.currentTarget=r,function(e,t,r,n,a,s,l,o,u){if(Fe.apply(this,arguments),Ie){if(!Ie)throw Error(i(198));var c=Re;Ie=!1,Re=null,je||(je=!0,$e=c)}}(n,t,void 0,e),e.currentTarget=null}function jn(e,t){t=!!(4&t);for(var r=0;r<e.length;r++){var n=e[r],a=n.event;n=n.listeners;e:{var i=void 0;if(t)for(var s=n.length-1;0<=s;s--){var l=n[s],o=l.instance,u=l.currentTarget;if(l=l.listener,o!==i&&a.isPropagationStopped())break e;Rn(a,l,u),i=o}else for(s=0;s<n.length;s++){if(o=(l=n[s]).instance,u=l.currentTarget,l=l.listener,o!==i&&a.isPropagationStopped())break e;Rn(a,l,u),i=o}}}if(je)throw e=$e,je=!1,$e=null,e}function $n(e,t){var r=t[ha];void 0===r&&(r=t[ha]=new Set);var n=e+"__bubble";r.has(n)||(Hn(t,e,2,!1),r.add(n))}function qn(e,t,r){var n=0;t&&(n|=4),Hn(r,e,n,t)}var Fn="_reactListening"+Math.random().toString(36).slice(2);function Bn(e){if(!e[Fn]){e[Fn]=!0,s.forEach((function(t){"selectionchange"!==t&&(In.has(t)||qn(t,!1,e),qn(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Fn]||(t[Fn]=!0,qn("selectionchange",!1,t))}}function Hn(e,t,r,n){switch(Qt(t)){case 1:var a=Ut;break;case 4:a=Wt;break;default:a=Gt}r=a.bind(null,t,r,e),a=void 0,!De||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(a=!0),n?void 0!==a?e.addEventListener(t,r,{capture:!0,passive:a}):e.addEventListener(t,r,!0):void 0!==a?e.addEventListener(t,r,{passive:a}):e.addEventListener(t,r,!1)}function Vn(e,t,r,n,a){var i=n;if(!(1&t||2&t||null===n))e:for(;;){if(null===n)return;var s=n.tag;if(3===s||4===s){var l=n.stateNode.containerInfo;if(l===a||8===l.nodeType&&l.parentNode===a)break;if(4===s)for(s=n.return;null!==s;){var o=s.tag;if((3===o||4===o)&&((o=s.stateNode.containerInfo)===a||8===o.nodeType&&o.parentNode===a))return;s=s.return}for(;null!==l;){if(null===(s=ba(l)))return;if(5===(o=s.tag)||6===o){n=i=s;continue e}l=l.parentNode}}n=n.return}_e((function(){var n=i,a=xe(r),s=[];e:{var l=zn.get(e);if(void 0!==l){var o=ur,u=e;switch(e){case"keypress":if(0===tr(r))break e;case"keydown":case"keyup":o=Tr;break;case"focusin":u="focus",o=hr;break;case"focusout":u="blur",o=hr;break;case"beforeblur":case"afterblur":o=hr;break;case"click":if(2===r.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":o=fr;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":o=mr;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":o=Pr;break;case Tn:case Mn:case Pn:o=vr;break;case Ln:o=Lr;break;case"scroll":o=dr;break;case"wheel":o=_r;break;case"copy":case"cut":case"paste":o=br;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":o=Mr}var c=!!(4&t),d=!c&&"scroll"===e,p=c?null!==l?l+"Capture":null:l;c=[];for(var f,m=n;null!==m;){var h=(f=m).stateNode;if(5===f.tag&&null!==h&&(f=h,null!==p&&null!=(h=Oe(m,p))&&c.push(Un(m,h,f))),d)break;m=m.return}0<c.length&&(l=new o(l,u,null,r,a),s.push({event:l,listeners:c}))}}if(!(7&t)){if(o="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||r===ye||!(u=r.relatedTarget||r.fromElement)||!ba(u)&&!u[ma])&&(o||l)&&(l=a.window===a?a:(l=a.ownerDocument)?l.defaultView||l.parentWindow:window,o?(o=n,null!==(u=(u=r.relatedTarget||r.toElement)?ba(u):null)&&(u!==(d=Be(u))||5!==u.tag&&6!==u.tag)&&(u=null)):(o=null,u=n),o!==u)){if(c=fr,h="onMouseLeave",p="onMouseEnter",m="mouse","pointerout"!==e&&"pointerover"!==e||(c=Mr,h="onPointerLeave",p="onPointerEnter",m="pointer"),d=null==o?l:ya(o),f=null==u?l:ya(u),(l=new c(h,m+"leave",o,r,a)).target=d,l.relatedTarget=f,h=null,ba(a)===n&&((c=new c(p,m+"enter",u,r,a)).target=f,c.relatedTarget=d,h=c),d=h,o&&u)e:{for(p=u,m=0,f=c=o;f;f=Gn(f))m++;for(f=0,h=p;h;h=Gn(h))f++;for(;0<m-f;)c=Gn(c),m--;for(;0<f-m;)p=Gn(p),f--;for(;m--;){if(c===p||null!==p&&c===p.alternate)break e;c=Gn(c),p=Gn(p)}c=null}else c=null;null!==o&&Yn(s,l,o,c,!1),null!==u&&null!==d&&Yn(s,d,u,c,!0)}if("select"===(o=(l=n?ya(n):window).nodeName&&l.nodeName.toLowerCase())||"input"===o&&"file"===l.type)var v=Xr;else if(Hr(l))if(Qr)v=sn;else{v=nn;var g=rn}else(o=l.nodeName)&&"input"===o.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(v=an);switch(v&&(v=v(e,n))?Vr(s,v,r,a):(g&&g(e,l,n),"focusout"===e&&(g=l._wrapperState)&&g.controlled&&"number"===l.type&&ee(l,"number",l.value)),g=n?ya(n):window,e){case"focusin":(Hr(g)||"true"===g.contentEditable)&&(vn=g,gn=n,bn=null);break;case"focusout":bn=gn=vn=null;break;case"mousedown":wn=!0;break;case"contextmenu":case"mouseup":case"dragend":wn=!1,yn(s,r,a);break;case"selectionchange":if(hn)break;case"keydown":case"keyup":yn(s,r,a)}var b;if(Dr)e:{switch(e){case"compositionstart":var w="onCompositionStart";break e;case"compositionend":w="onCompositionEnd";break e;case"compositionupdate":w="onCompositionUpdate";break e}w=void 0}else Fr?$r(e,r)&&(w="onCompositionEnd"):"keydown"===e&&229===r.keyCode&&(w="onCompositionStart");w&&(Ir&&"ko"!==r.locale&&(Fr||"onCompositionStart"!==w?"onCompositionEnd"===w&&Fr&&(b=er()):(Jt="value"in(Kt=a)?Kt.value:Kt.textContent,Fr=!0)),0<(g=Wn(n,w)).length&&(w=new wr(w,e,null,r,a),s.push({event:w,listeners:g}),(b||null!==(b=qr(r)))&&(w.data=b))),(b=Ar?function(e,t){switch(e){case"compositionend":return qr(t);case"keypress":return 32!==t.which?null:(jr=!0,Rr);case"textInput":return(e=t.data)===Rr&&jr?null:e;default:return null}}(e,r):function(e,t){if(Fr)return"compositionend"===e||!Dr&&$r(e,t)?(e=er(),Zt=Jt=Kt=null,Fr=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Ir&&"ko"!==t.locale?null:t.data}}(e,r))&&0<(n=Wn(n,"onBeforeInput")).length&&(a=new wr("onBeforeInput","beforeinput",null,r,a),s.push({event:a,listeners:n}),a.data=b)}jn(s,t)}))}function Un(e,t,r){return{instance:e,listener:t,currentTarget:r}}function Wn(e,t){for(var r=t+"Capture",n=[];null!==e;){var a=e,i=a.stateNode;5===a.tag&&null!==i&&(a=i,null!=(i=Oe(e,r))&&n.unshift(Un(e,i,a)),null!=(i=Oe(e,t))&&n.push(Un(e,i,a))),e=e.return}return n}function Gn(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Yn(e,t,r,n,a){for(var i=t._reactName,s=[];null!==r&&r!==n;){var l=r,o=l.alternate,u=l.stateNode;if(null!==o&&o===n)break;5===l.tag&&null!==u&&(l=u,a?null!=(o=Oe(r,i))&&s.unshift(Un(r,o,l)):a||null!=(o=Oe(r,i))&&s.push(Un(r,o,l))),r=r.return}0!==s.length&&e.push({event:t,listeners:s})}var Xn=/\r\n?/g,Qn=/\u0000|\uFFFD/g;function Kn(e){return("string"==typeof e?e:""+e).replace(Xn,"\n").replace(Qn,"")}function Jn(e,t,r){if(t=Kn(t),Kn(e)!==t&&r)throw Error(i(425))}function Zn(){}var ea=null,ta=null;function ra(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var na="function"==typeof setTimeout?setTimeout:void 0,aa="function"==typeof clearTimeout?clearTimeout:void 0,ia="function"==typeof Promise?Promise:void 0,sa="function"==typeof queueMicrotask?queueMicrotask:void 0!==ia?function(e){return ia.resolve(null).then(e).catch(la)}:na;function la(e){setTimeout((function(){throw e}))}function oa(e,t){var r=t,n=0;do{var a=r.nextSibling;if(e.removeChild(r),a&&8===a.nodeType)if("/$"===(r=a.data)){if(0===n)return e.removeChild(a),void Bt(t);n--}else"$"!==r&&"$?"!==r&&"$!"!==r||n++;r=a}while(r);Bt(t)}function ua(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function ca(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var r=e.data;if("$"===r||"$!"===r||"$?"===r){if(0===t)return e;t--}else"/$"===r&&t++}e=e.previousSibling}return null}var da=Math.random().toString(36).slice(2),pa="__reactFiber$"+da,fa="__reactProps$"+da,ma="__reactContainer$"+da,ha="__reactEvents$"+da,va="__reactListeners$"+da,ga="__reactHandles$"+da;function ba(e){var t=e[pa];if(t)return t;for(var r=e.parentNode;r;){if(t=r[ma]||r[pa]){if(r=t.alternate,null!==t.child||null!==r&&null!==r.child)for(e=ca(e);null!==e;){if(r=e[pa])return r;e=ca(e)}return t}r=(e=r).parentNode}return null}function wa(e){return!(e=e[pa]||e[ma])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function ya(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function xa(e){return e[fa]||null}var Sa=[],Ea=-1;function ka(e){return{current:e}}function Ca(e){0>Ea||(e.current=Sa[Ea],Sa[Ea]=null,Ea--)}function Ta(e,t){Ea++,Sa[Ea]=e.current,e.current=t}var Ma={},Pa=ka(Ma),La=ka(!1),za=Ma;function _a(e,t){var r=e.type.contextTypes;if(!r)return Ma;var n=e.stateNode;if(n&&n.__reactInternalMemoizedUnmaskedChildContext===t)return n.__reactInternalMemoizedMaskedChildContext;var a,i={};for(a in r)i[a]=t[a];return n&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function Oa(e){return null!=e.childContextTypes}function Da(){Ca(La),Ca(Pa)}function Na(e,t,r){if(Pa.current!==Ma)throw Error(i(168));Ta(Pa,t),Ta(La,r)}function Aa(e,t,r){var n=e.stateNode;if(t=t.childContextTypes,"function"!=typeof n.getChildContext)return r;for(var a in n=n.getChildContext())if(!(a in t))throw Error(i(108,H(e)||"Unknown",a));return R({},r,n)}function Ia(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Ma,za=Pa.current,Ta(Pa,e),Ta(La,La.current),!0}function Ra(e,t,r){var n=e.stateNode;if(!n)throw Error(i(169));r?(e=Aa(e,t,za),n.__reactInternalMemoizedMergedChildContext=e,Ca(La),Ca(Pa),Ta(Pa,e)):Ca(La),Ta(La,r)}var ja=null,$a=!1,qa=!1;function Fa(e){null===ja?ja=[e]:ja.push(e)}function Ba(){if(!qa&&null!==ja){qa=!0;var e=0,t=wt;try{var r=ja;for(wt=1;e<r.length;e++){var n=r[e];do{n=n(!0)}while(null!==n)}ja=null,$a=!1}catch(t){throw null!==ja&&(ja=ja.slice(e+1)),Ge(Ze,Ba),t}finally{wt=t,qa=!1}}return null}var Ha=[],Va=0,Ua=null,Wa=0,Ga=[],Ya=0,Xa=null,Qa=1,Ka="";function Ja(e,t){Ha[Va++]=Wa,Ha[Va++]=Ua,Ua=e,Wa=t}function Za(e,t,r){Ga[Ya++]=Qa,Ga[Ya++]=Ka,Ga[Ya++]=Xa,Xa=e;var n=Qa;e=Ka;var a=32-st(n)-1;n&=~(1<<a),r+=1;var i=32-st(t)+a;if(30<i){var s=a-a%5;i=(n&(1<<s)-1).toString(32),n>>=s,a-=s,Qa=1<<32-st(t)+a|r<<a|n,Ka=i+e}else Qa=1<<i|r<<a|n,Ka=e}function ei(e){null!==e.return&&(Ja(e,1),Za(e,1,0))}function ti(e){for(;e===Ua;)Ua=Ha[--Va],Ha[Va]=null,Wa=Ha[--Va],Ha[Va]=null;for(;e===Xa;)Xa=Ga[--Ya],Ga[Ya]=null,Ka=Ga[--Ya],Ga[Ya]=null,Qa=Ga[--Ya],Ga[Ya]=null}var ri=null,ni=null,ai=!1,ii=null;function si(e,t){var r=Ou(5,null,null,0);r.elementType="DELETED",r.stateNode=t,r.return=e,null===(t=e.deletions)?(e.deletions=[r],e.flags|=16):t.push(r)}function li(e,t){switch(e.tag){case 5:var r=e.type;return null!==(t=1!==t.nodeType||r.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,ri=e,ni=ua(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,ri=e,ni=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(r=null!==Xa?{id:Qa,overflow:Ka}:null,e.memoizedState={dehydrated:t,treeContext:r,retryLane:1073741824},(r=Ou(18,null,null,0)).stateNode=t,r.return=e,e.child=r,ri=e,ni=null,!0);default:return!1}}function oi(e){return!(!(1&e.mode)||128&e.flags)}function ui(e){if(ai){var t=ni;if(t){var r=t;if(!li(e,t)){if(oi(e))throw Error(i(418));t=ua(r.nextSibling);var n=ri;t&&li(e,t)?si(n,r):(e.flags=-4097&e.flags|2,ai=!1,ri=e)}}else{if(oi(e))throw Error(i(418));e.flags=-4097&e.flags|2,ai=!1,ri=e}}}function ci(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;ri=e}function di(e){if(e!==ri)return!1;if(!ai)return ci(e),ai=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!ra(e.type,e.memoizedProps)),t&&(t=ni)){if(oi(e))throw pi(),Error(i(418));for(;t;)si(e,t),t=ua(t.nextSibling)}if(ci(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var r=e.data;if("/$"===r){if(0===t){ni=ua(e.nextSibling);break e}t--}else"$"!==r&&"$!"!==r&&"$?"!==r||t++}e=e.nextSibling}ni=null}}else ni=ri?ua(e.stateNode.nextSibling):null;return!0}function pi(){for(var e=ni;e;)e=ua(e.nextSibling)}function fi(){ni=ri=null,ai=!1}function mi(e){null===ii?ii=[e]:ii.push(e)}var hi=y.ReactCurrentBatchConfig;function vi(e,t){if(e&&e.defaultProps){for(var r in t=R({},t),e=e.defaultProps)void 0===t[r]&&(t[r]=e[r]);return t}return t}var gi=ka(null),bi=null,wi=null,yi=null;function xi(){yi=wi=bi=null}function Si(e){var t=gi.current;Ca(gi),e._currentValue=t}function Ei(e,t,r){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==n&&(n.childLanes|=t)):null!==n&&(n.childLanes&t)!==t&&(n.childLanes|=t),e===r)break;e=e.return}}function ki(e,t){bi=e,yi=wi=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(!!(e.lanes&t)&&(wl=!0),e.firstContext=null)}function Ci(e){var t=e._currentValue;if(yi!==e)if(e={context:e,memoizedValue:t,next:null},null===wi){if(null===bi)throw Error(i(308));wi=e,bi.dependencies={lanes:0,firstContext:e}}else wi=wi.next=e;return t}var Ti=null;function Mi(e){null===Ti?Ti=[e]:Ti.push(e)}function Pi(e,t,r,n){var a=t.interleaved;return null===a?(r.next=r,Mi(t)):(r.next=a.next,a.next=r),t.interleaved=r,Li(e,n)}function Li(e,t){e.lanes|=t;var r=e.alternate;for(null!==r&&(r.lanes|=t),r=e,e=e.return;null!==e;)e.childLanes|=t,null!==(r=e.alternate)&&(r.childLanes|=t),r=e,e=e.return;return 3===r.tag?r.stateNode:null}var zi=!1;function _i(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Oi(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Di(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Ni(e,t,r){var n=e.updateQueue;if(null===n)return null;if(n=n.shared,2&Lo){var a=n.pending;return null===a?t.next=t:(t.next=a.next,a.next=t),n.pending=t,Li(e,r)}return null===(a=n.interleaved)?(t.next=t,Mi(n)):(t.next=a.next,a.next=t),n.interleaved=t,Li(e,r)}function Ai(e,t,r){if(null!==(t=t.updateQueue)&&(t=t.shared,4194240&r)){var n=t.lanes;r|=n&=e.pendingLanes,t.lanes=r,bt(e,r)}}function Ii(e,t){var r=e.updateQueue,n=e.alternate;if(null!==n&&r===(n=n.updateQueue)){var a=null,i=null;if(null!==(r=r.firstBaseUpdate)){do{var s={eventTime:r.eventTime,lane:r.lane,tag:r.tag,payload:r.payload,callback:r.callback,next:null};null===i?a=i=s:i=i.next=s,r=r.next}while(null!==r);null===i?a=i=t:i=i.next=t}else a=i=t;return r={baseState:n.baseState,firstBaseUpdate:a,lastBaseUpdate:i,shared:n.shared,effects:n.effects},void(e.updateQueue=r)}null===(e=r.lastBaseUpdate)?r.firstBaseUpdate=t:e.next=t,r.lastBaseUpdate=t}function Ri(e,t,r,n){var a=e.updateQueue;zi=!1;var i=a.firstBaseUpdate,s=a.lastBaseUpdate,l=a.shared.pending;if(null!==l){a.shared.pending=null;var o=l,u=o.next;o.next=null,null===s?i=u:s.next=u,s=o;var c=e.alternate;null!==c&&(l=(c=c.updateQueue).lastBaseUpdate)!==s&&(null===l?c.firstBaseUpdate=u:l.next=u,c.lastBaseUpdate=o)}if(null!==i){var d=a.baseState;for(s=0,c=u=o=null,l=i;;){var p=l.lane,f=l.eventTime;if((n&p)===p){null!==c&&(c=c.next={eventTime:f,lane:0,tag:l.tag,payload:l.payload,callback:l.callback,next:null});e:{var m=e,h=l;switch(p=t,f=r,h.tag){case 1:if("function"==typeof(m=h.payload)){d=m.call(f,d,p);break e}d=m;break e;case 3:m.flags=-65537&m.flags|128;case 0:if(null==(p="function"==typeof(m=h.payload)?m.call(f,d,p):m))break e;d=R({},d,p);break e;case 2:zi=!0}}null!==l.callback&&0!==l.lane&&(e.flags|=64,null===(p=a.effects)?a.effects=[l]:p.push(l))}else f={eventTime:f,lane:p,tag:l.tag,payload:l.payload,callback:l.callback,next:null},null===c?(u=c=f,o=d):c=c.next=f,s|=p;if(null===(l=l.next)){if(null===(l=a.shared.pending))break;l=(p=l).next,p.next=null,a.lastBaseUpdate=p,a.shared.pending=null}}if(null===c&&(o=d),a.baseState=o,a.firstBaseUpdate=u,a.lastBaseUpdate=c,null!==(t=a.shared.interleaved)){a=t;do{s|=a.lane,a=a.next}while(a!==t)}else null===i&&(a.shared.lanes=0);Ro|=s,e.lanes=s,e.memoizedState=d}}function ji(e,t,r){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var n=e[t],a=n.callback;if(null!==a){if(n.callback=null,n=r,"function"!=typeof a)throw Error(i(191,a));a.call(n)}}}var $i=(new n.Component).refs;function qi(e,t,r,n){r=null==(r=r(n,t=e.memoizedState))?t:R({},t,r),e.memoizedState=r,0===e.lanes&&(e.updateQueue.baseState=r)}var Fi={isMounted:function(e){return!!(e=e._reactInternals)&&Be(e)===e},enqueueSetState:function(e,t,r){e=e._reactInternals;var n=tu(),a=ru(e),i=Di(n,a);i.payload=t,null!=r&&(i.callback=r),null!==(t=Ni(e,i,a))&&(nu(t,e,a,n),Ai(t,e,a))},enqueueReplaceState:function(e,t,r){e=e._reactInternals;var n=tu(),a=ru(e),i=Di(n,a);i.tag=1,i.payload=t,null!=r&&(i.callback=r),null!==(t=Ni(e,i,a))&&(nu(t,e,a,n),Ai(t,e,a))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var r=tu(),n=ru(e),a=Di(r,n);a.tag=2,null!=t&&(a.callback=t),null!==(t=Ni(e,a,n))&&(nu(t,e,n,r),Ai(t,e,n))}};function Bi(e,t,r,n,a,i,s){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(n,i,s):!(t.prototype&&t.prototype.isPureReactComponent&&on(r,n)&&on(a,i))}function Hi(e,t,r){var n=!1,a=Ma,i=t.contextType;return"object"==typeof i&&null!==i?i=Ci(i):(a=Oa(t)?za:Pa.current,i=(n=null!=(n=t.contextTypes))?_a(e,a):Ma),t=new t(r,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Fi,e.stateNode=t,t._reactInternals=e,n&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=i),t}function Vi(e,t,r,n){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(r,n),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(r,n),t.state!==e&&Fi.enqueueReplaceState(t,t.state,null)}function Ui(e,t,r,n){var a=e.stateNode;a.props=r,a.state=e.memoizedState,a.refs=$i,_i(e);var i=t.contextType;"object"==typeof i&&null!==i?a.context=Ci(i):(i=Oa(t)?za:Pa.current,a.context=_a(e,i)),a.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&(qi(e,t,i,r),a.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(t=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),t!==a.state&&Fi.enqueueReplaceState(a,a.state,null),Ri(e,r,a,n),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.flags|=4194308)}function Wi(e,t,r){if(null!==(e=r.ref)&&"function"!=typeof e&&"object"!=typeof e){if(r._owner){if(r=r._owner){if(1!==r.tag)throw Error(i(309));var n=r.stateNode}if(!n)throw Error(i(147,e));var a=n,s=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===s?t.ref:(t=function(e){var t=a.refs;t===$i&&(t=a.refs={}),null===e?delete t[s]:t[s]=e},t._stringRef=s,t)}if("string"!=typeof e)throw Error(i(284));if(!r._owner)throw Error(i(290,e))}return e}function Gi(e,t){throw e=Object.prototype.toString.call(t),Error(i(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Yi(e){return(0,e._init)(e._payload)}function Xi(e){function t(t,r){if(e){var n=t.deletions;null===n?(t.deletions=[r],t.flags|=16):n.push(r)}}function r(r,n){if(!e)return null;for(;null!==n;)t(r,n),n=n.sibling;return null}function n(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(e,t){return(e=Nu(e,t)).index=0,e.sibling=null,e}function s(t,r,n){return t.index=n,e?null!==(n=t.alternate)?(n=n.index)<r?(t.flags|=2,r):n:(t.flags|=2,r):(t.flags|=1048576,r)}function l(t){return e&&null===t.alternate&&(t.flags|=2),t}function o(e,t,r,n){return null===t||6!==t.tag?((t=ju(r,e.mode,n)).return=e,t):((t=a(t,r)).return=e,t)}function u(e,t,r,n){var i=r.type;return i===E?d(e,t,r.props.children,n,r.key):null!==t&&(t.elementType===i||"object"==typeof i&&null!==i&&i.$$typeof===O&&Yi(i)===t.type)?((n=a(t,r.props)).ref=Wi(e,t,r),n.return=e,n):((n=Au(r.type,r.key,r.props,null,e.mode,n)).ref=Wi(e,t,r),n.return=e,n)}function c(e,t,r,n){return null===t||4!==t.tag||t.stateNode.containerInfo!==r.containerInfo||t.stateNode.implementation!==r.implementation?((t=$u(r,e.mode,n)).return=e,t):((t=a(t,r.children||[])).return=e,t)}function d(e,t,r,n,i){return null===t||7!==t.tag?((t=Iu(r,e.mode,n,i)).return=e,t):((t=a(t,r)).return=e,t)}function p(e,t,r){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=ju(""+t,e.mode,r)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case x:return(r=Au(t.type,t.key,t.props,null,e.mode,r)).ref=Wi(e,null,t),r.return=e,r;case S:return(t=$u(t,e.mode,r)).return=e,t;case O:return p(e,(0,t._init)(t._payload),r)}if(te(t)||A(t))return(t=Iu(t,e.mode,r,null)).return=e,t;Gi(e,t)}return null}function f(e,t,r,n){var a=null!==t?t.key:null;if("string"==typeof r&&""!==r||"number"==typeof r)return null!==a?null:o(e,t,""+r,n);if("object"==typeof r&&null!==r){switch(r.$$typeof){case x:return r.key===a?u(e,t,r,n):null;case S:return r.key===a?c(e,t,r,n):null;case O:return f(e,t,(a=r._init)(r._payload),n)}if(te(r)||A(r))return null!==a?null:d(e,t,r,n,null);Gi(e,r)}return null}function m(e,t,r,n,a){if("string"==typeof n&&""!==n||"number"==typeof n)return o(t,e=e.get(r)||null,""+n,a);if("object"==typeof n&&null!==n){switch(n.$$typeof){case x:return u(t,e=e.get(null===n.key?r:n.key)||null,n,a);case S:return c(t,e=e.get(null===n.key?r:n.key)||null,n,a);case O:return m(e,t,r,(0,n._init)(n._payload),a)}if(te(n)||A(n))return d(t,e=e.get(r)||null,n,a,null);Gi(t,n)}return null}function h(a,i,l,o){for(var u=null,c=null,d=i,h=i=0,v=null;null!==d&&h<l.length;h++){d.index>h?(v=d,d=null):v=d.sibling;var g=f(a,d,l[h],o);if(null===g){null===d&&(d=v);break}e&&d&&null===g.alternate&&t(a,d),i=s(g,i,h),null===c?u=g:c.sibling=g,c=g,d=v}if(h===l.length)return r(a,d),ai&&Ja(a,h),u;if(null===d){for(;h<l.length;h++)null!==(d=p(a,l[h],o))&&(i=s(d,i,h),null===c?u=d:c.sibling=d,c=d);return ai&&Ja(a,h),u}for(d=n(a,d);h<l.length;h++)null!==(v=m(d,a,h,l[h],o))&&(e&&null!==v.alternate&&d.delete(null===v.key?h:v.key),i=s(v,i,h),null===c?u=v:c.sibling=v,c=v);return e&&d.forEach((function(e){return t(a,e)})),ai&&Ja(a,h),u}function v(a,l,o,u){var c=A(o);if("function"!=typeof c)throw Error(i(150));if(null==(o=c.call(o)))throw Error(i(151));for(var d=c=null,h=l,v=l=0,g=null,b=o.next();null!==h&&!b.done;v++,b=o.next()){h.index>v?(g=h,h=null):g=h.sibling;var w=f(a,h,b.value,u);if(null===w){null===h&&(h=g);break}e&&h&&null===w.alternate&&t(a,h),l=s(w,l,v),null===d?c=w:d.sibling=w,d=w,h=g}if(b.done)return r(a,h),ai&&Ja(a,v),c;if(null===h){for(;!b.done;v++,b=o.next())null!==(b=p(a,b.value,u))&&(l=s(b,l,v),null===d?c=b:d.sibling=b,d=b);return ai&&Ja(a,v),c}for(h=n(a,h);!b.done;v++,b=o.next())null!==(b=m(h,a,v,b.value,u))&&(e&&null!==b.alternate&&h.delete(null===b.key?v:b.key),l=s(b,l,v),null===d?c=b:d.sibling=b,d=b);return e&&h.forEach((function(e){return t(a,e)})),ai&&Ja(a,v),c}return function e(n,i,s,o){if("object"==typeof s&&null!==s&&s.type===E&&null===s.key&&(s=s.props.children),"object"==typeof s&&null!==s){switch(s.$$typeof){case x:e:{for(var u=s.key,c=i;null!==c;){if(c.key===u){if((u=s.type)===E){if(7===c.tag){r(n,c.sibling),(i=a(c,s.props.children)).return=n,n=i;break e}}else if(c.elementType===u||"object"==typeof u&&null!==u&&u.$$typeof===O&&Yi(u)===c.type){r(n,c.sibling),(i=a(c,s.props)).ref=Wi(n,c,s),i.return=n,n=i;break e}r(n,c);break}t(n,c),c=c.sibling}s.type===E?((i=Iu(s.props.children,n.mode,o,s.key)).return=n,n=i):((o=Au(s.type,s.key,s.props,null,n.mode,o)).ref=Wi(n,i,s),o.return=n,n=o)}return l(n);case S:e:{for(c=s.key;null!==i;){if(i.key===c){if(4===i.tag&&i.stateNode.containerInfo===s.containerInfo&&i.stateNode.implementation===s.implementation){r(n,i.sibling),(i=a(i,s.children||[])).return=n,n=i;break e}r(n,i);break}t(n,i),i=i.sibling}(i=$u(s,n.mode,o)).return=n,n=i}return l(n);case O:return e(n,i,(c=s._init)(s._payload),o)}if(te(s))return h(n,i,s,o);if(A(s))return v(n,i,s,o);Gi(n,s)}return"string"==typeof s&&""!==s||"number"==typeof s?(s=""+s,null!==i&&6===i.tag?(r(n,i.sibling),(i=a(i,s)).return=n,n=i):(r(n,i),(i=ju(s,n.mode,o)).return=n,n=i),l(n)):r(n,i)}}var Qi=Xi(!0),Ki=Xi(!1),Ji={},Zi=ka(Ji),es=ka(Ji),ts=ka(Ji);function rs(e){if(e===Ji)throw Error(i(174));return e}function ns(e,t){switch(Ta(ts,t),Ta(es,e),Ta(Zi,Ji),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:oe(null,"");break;default:t=oe(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}Ca(Zi),Ta(Zi,t)}function as(){Ca(Zi),Ca(es),Ca(ts)}function is(e){rs(ts.current);var t=rs(Zi.current),r=oe(t,e.type);t!==r&&(Ta(es,e),Ta(Zi,r))}function ss(e){es.current===e&&(Ca(Zi),Ca(es))}var ls=ka(0);function os(e){for(var t=e;null!==t;){if(13===t.tag){var r=t.memoizedState;if(null!==r&&(null===(r=r.dehydrated)||"$?"===r.data||"$!"===r.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(128&t.flags)return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var us=[];function cs(){for(var e=0;e<us.length;e++)us[e]._workInProgressVersionPrimary=null;us.length=0}var ds=y.ReactCurrentDispatcher,ps=y.ReactCurrentBatchConfig,fs=0,ms=null,hs=null,vs=null,gs=!1,bs=!1,ws=0,ys=0;function xs(){throw Error(i(321))}function Ss(e,t){if(null===t)return!1;for(var r=0;r<t.length&&r<e.length;r++)if(!ln(e[r],t[r]))return!1;return!0}function Es(e,t,r,n,a,s){if(fs=s,ms=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,ds.current=null===e||null===e.memoizedState?sl:ll,e=r(n,a),bs){s=0;do{if(bs=!1,ws=0,25<=s)throw Error(i(301));s+=1,vs=hs=null,t.updateQueue=null,ds.current=ol,e=r(n,a)}while(bs)}if(ds.current=il,t=null!==hs&&null!==hs.next,fs=0,vs=hs=ms=null,gs=!1,t)throw Error(i(300));return e}function ks(){var e=0!==ws;return ws=0,e}function Cs(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===vs?ms.memoizedState=vs=e:vs=vs.next=e,vs}function Ts(){if(null===hs){var e=ms.alternate;e=null!==e?e.memoizedState:null}else e=hs.next;var t=null===vs?ms.memoizedState:vs.next;if(null!==t)vs=t,hs=e;else{if(null===e)throw Error(i(310));e={memoizedState:(hs=e).memoizedState,baseState:hs.baseState,baseQueue:hs.baseQueue,queue:hs.queue,next:null},null===vs?ms.memoizedState=vs=e:vs=vs.next=e}return vs}function Ms(e,t){return"function"==typeof t?t(e):t}function Ps(e){var t=Ts(),r=t.queue;if(null===r)throw Error(i(311));r.lastRenderedReducer=e;var n=hs,a=n.baseQueue,s=r.pending;if(null!==s){if(null!==a){var l=a.next;a.next=s.next,s.next=l}n.baseQueue=a=s,r.pending=null}if(null!==a){s=a.next,n=n.baseState;var o=l=null,u=null,c=s;do{var d=c.lane;if((fs&d)===d)null!==u&&(u=u.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),n=c.hasEagerState?c.eagerState:e(n,c.action);else{var p={lane:d,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===u?(o=u=p,l=n):u=u.next=p,ms.lanes|=d,Ro|=d}c=c.next}while(null!==c&&c!==s);null===u?l=n:u.next=o,ln(n,t.memoizedState)||(wl=!0),t.memoizedState=n,t.baseState=l,t.baseQueue=u,r.lastRenderedState=n}if(null!==(e=r.interleaved)){a=e;do{s=a.lane,ms.lanes|=s,Ro|=s,a=a.next}while(a!==e)}else null===a&&(r.lanes=0);return[t.memoizedState,r.dispatch]}function Ls(e){var t=Ts(),r=t.queue;if(null===r)throw Error(i(311));r.lastRenderedReducer=e;var n=r.dispatch,a=r.pending,s=t.memoizedState;if(null!==a){r.pending=null;var l=a=a.next;do{s=e(s,l.action),l=l.next}while(l!==a);ln(s,t.memoizedState)||(wl=!0),t.memoizedState=s,null===t.baseQueue&&(t.baseState=s),r.lastRenderedState=s}return[s,n]}function zs(){}function _s(e,t){var r=ms,n=Ts(),a=t(),s=!ln(n.memoizedState,a);if(s&&(n.memoizedState=a,wl=!0),n=n.queue,Hs(Ns.bind(null,r,n,e),[e]),n.getSnapshot!==t||s||null!==vs&&1&vs.memoizedState.tag){if(r.flags|=2048,js(9,Ds.bind(null,r,n,a,t),void 0,null),null===zo)throw Error(i(349));30&fs||Os(r,t,a)}return a}function Os(e,t,r){e.flags|=16384,e={getSnapshot:t,value:r},null===(t=ms.updateQueue)?(t={lastEffect:null,stores:null},ms.updateQueue=t,t.stores=[e]):null===(r=t.stores)?t.stores=[e]:r.push(e)}function Ds(e,t,r,n){t.value=r,t.getSnapshot=n,As(t)&&Is(e)}function Ns(e,t,r){return r((function(){As(t)&&Is(e)}))}function As(e){var t=e.getSnapshot;e=e.value;try{var r=t();return!ln(e,r)}catch(e){return!0}}function Is(e){var t=Li(e,1);null!==t&&nu(t,e,1,-1)}function Rs(e){var t=Cs();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Ms,lastRenderedState:e},t.queue=e,e=e.dispatch=tl.bind(null,ms,e),[t.memoizedState,e]}function js(e,t,r,n){return e={tag:e,create:t,destroy:r,deps:n,next:null},null===(t=ms.updateQueue)?(t={lastEffect:null,stores:null},ms.updateQueue=t,t.lastEffect=e.next=e):null===(r=t.lastEffect)?t.lastEffect=e.next=e:(n=r.next,r.next=e,e.next=n,t.lastEffect=e),e}function $s(){return Ts().memoizedState}function qs(e,t,r,n){var a=Cs();ms.flags|=e,a.memoizedState=js(1|t,r,void 0,void 0===n?null:n)}function Fs(e,t,r,n){var a=Ts();n=void 0===n?null:n;var i=void 0;if(null!==hs){var s=hs.memoizedState;if(i=s.destroy,null!==n&&Ss(n,s.deps))return void(a.memoizedState=js(t,r,i,n))}ms.flags|=e,a.memoizedState=js(1|t,r,i,n)}function Bs(e,t){return qs(8390656,8,e,t)}function Hs(e,t){return Fs(2048,8,e,t)}function Vs(e,t){return Fs(4,2,e,t)}function Us(e,t){return Fs(4,4,e,t)}function Ws(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Gs(e,t,r){return r=null!=r?r.concat([e]):null,Fs(4,4,Ws.bind(null,t,e),r)}function Ys(){}function Xs(e,t){var r=Ts();t=void 0===t?null:t;var n=r.memoizedState;return null!==n&&null!==t&&Ss(t,n[1])?n[0]:(r.memoizedState=[e,t],e)}function Qs(e,t){var r=Ts();t=void 0===t?null:t;var n=r.memoizedState;return null!==n&&null!==t&&Ss(t,n[1])?n[0]:(e=e(),r.memoizedState=[e,t],e)}function Ks(e,t,r){return 21&fs?(ln(r,t)||(r=ht(),ms.lanes|=r,Ro|=r,e.baseState=!0),t):(e.baseState&&(e.baseState=!1,wl=!0),e.memoizedState=r)}function Js(e,t){var r=wt;wt=0!==r&&4>r?r:4,e(!0);var n=ps.transition;ps.transition={};try{e(!1),t()}finally{wt=r,ps.transition=n}}function Zs(){return Ts().memoizedState}function el(e,t,r){var n=ru(e);r={lane:n,action:r,hasEagerState:!1,eagerState:null,next:null},rl(e)?nl(t,r):null!==(r=Pi(e,t,r,n))&&(nu(r,e,n,tu()),al(r,t,n))}function tl(e,t,r){var n=ru(e),a={lane:n,action:r,hasEagerState:!1,eagerState:null,next:null};if(rl(e))nl(t,a);else{var i=e.alternate;if(0===e.lanes&&(null===i||0===i.lanes)&&null!==(i=t.lastRenderedReducer))try{var s=t.lastRenderedState,l=i(s,r);if(a.hasEagerState=!0,a.eagerState=l,ln(l,s)){var o=t.interleaved;return null===o?(a.next=a,Mi(t)):(a.next=o.next,o.next=a),void(t.interleaved=a)}}catch(e){}null!==(r=Pi(e,t,a,n))&&(nu(r,e,n,a=tu()),al(r,t,n))}}function rl(e){var t=e.alternate;return e===ms||null!==t&&t===ms}function nl(e,t){bs=gs=!0;var r=e.pending;null===r?t.next=t:(t.next=r.next,r.next=t),e.pending=t}function al(e,t,r){if(4194240&r){var n=t.lanes;r|=n&=e.pendingLanes,t.lanes=r,bt(e,r)}}var il={readContext:Ci,useCallback:xs,useContext:xs,useEffect:xs,useImperativeHandle:xs,useInsertionEffect:xs,useLayoutEffect:xs,useMemo:xs,useReducer:xs,useRef:xs,useState:xs,useDebugValue:xs,useDeferredValue:xs,useTransition:xs,useMutableSource:xs,useSyncExternalStore:xs,useId:xs,unstable_isNewReconciler:!1},sl={readContext:Ci,useCallback:function(e,t){return Cs().memoizedState=[e,void 0===t?null:t],e},useContext:Ci,useEffect:Bs,useImperativeHandle:function(e,t,r){return r=null!=r?r.concat([e]):null,qs(4194308,4,Ws.bind(null,t,e),r)},useLayoutEffect:function(e,t){return qs(4194308,4,e,t)},useInsertionEffect:function(e,t){return qs(4,2,e,t)},useMemo:function(e,t){var r=Cs();return t=void 0===t?null:t,e=e(),r.memoizedState=[e,t],e},useReducer:function(e,t,r){var n=Cs();return t=void 0!==r?r(t):t,n.memoizedState=n.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},n.queue=e,e=e.dispatch=el.bind(null,ms,e),[n.memoizedState,e]},useRef:function(e){return e={current:e},Cs().memoizedState=e},useState:Rs,useDebugValue:Ys,useDeferredValue:function(e){return Cs().memoizedState=e},useTransition:function(){var e=Rs(!1),t=e[0];return e=Js.bind(null,e[1]),Cs().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,r){var n=ms,a=Cs();if(ai){if(void 0===r)throw Error(i(407));r=r()}else{if(r=t(),null===zo)throw Error(i(349));30&fs||Os(n,t,r)}a.memoizedState=r;var s={value:r,getSnapshot:t};return a.queue=s,Bs(Ns.bind(null,n,s,e),[e]),n.flags|=2048,js(9,Ds.bind(null,n,s,r,t),void 0,null),r},useId:function(){var e=Cs(),t=zo.identifierPrefix;if(ai){var r=Ka;t=":"+t+"R"+(r=(Qa&~(1<<32-st(Qa)-1)).toString(32)+r),0<(r=ws++)&&(t+="H"+r.toString(32)),t+=":"}else t=":"+t+"r"+(r=ys++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},ll={readContext:Ci,useCallback:Xs,useContext:Ci,useEffect:Hs,useImperativeHandle:Gs,useInsertionEffect:Vs,useLayoutEffect:Us,useMemo:Qs,useReducer:Ps,useRef:$s,useState:function(){return Ps(Ms)},useDebugValue:Ys,useDeferredValue:function(e){return Ks(Ts(),hs.memoizedState,e)},useTransition:function(){return[Ps(Ms)[0],Ts().memoizedState]},useMutableSource:zs,useSyncExternalStore:_s,useId:Zs,unstable_isNewReconciler:!1},ol={readContext:Ci,useCallback:Xs,useContext:Ci,useEffect:Hs,useImperativeHandle:Gs,useInsertionEffect:Vs,useLayoutEffect:Us,useMemo:Qs,useReducer:Ls,useRef:$s,useState:function(){return Ls(Ms)},useDebugValue:Ys,useDeferredValue:function(e){var t=Ts();return null===hs?t.memoizedState=e:Ks(t,hs.memoizedState,e)},useTransition:function(){return[Ls(Ms)[0],Ts().memoizedState]},useMutableSource:zs,useSyncExternalStore:_s,useId:Zs,unstable_isNewReconciler:!1};function ul(e,t){try{var r="",n=t;do{r+=F(n),n=n.return}while(n);var a=r}catch(e){a="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:a,digest:null}}function cl(e,t,r){return{value:e,source:null,stack:null!=r?r:null,digest:null!=t?t:null}}function dl(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var pl="function"==typeof WeakMap?WeakMap:Map;function fl(e,t,r){(r=Di(-1,r)).tag=3,r.payload={element:null};var n=t.value;return r.callback=function(){Uo||(Uo=!0,Wo=n),dl(0,t)},r}function ml(e,t,r){(r=Di(-1,r)).tag=3;var n=e.type.getDerivedStateFromError;if("function"==typeof n){var a=t.value;r.payload=function(){return n(a)},r.callback=function(){dl(0,t)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(r.callback=function(){dl(0,t),"function"!=typeof n&&(null===Go?Go=new Set([this]):Go.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),r}function hl(e,t,r){var n=e.pingCache;if(null===n){n=e.pingCache=new pl;var a=new Set;n.set(t,a)}else void 0===(a=n.get(t))&&(a=new Set,n.set(t,a));a.has(r)||(a.add(r),e=Tu.bind(null,e,t,r),t.then(e,e))}function vl(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function gl(e,t,r,n,a){return 1&e.mode?(e.flags|=65536,e.lanes=a,e):(e===t?e.flags|=65536:(e.flags|=128,r.flags|=131072,r.flags&=-52805,1===r.tag&&(null===r.alternate?r.tag=17:((t=Di(-1,1)).tag=2,Ni(r,t,1))),r.lanes|=1),e)}var bl=y.ReactCurrentOwner,wl=!1;function yl(e,t,r,n){t.child=null===e?Ki(t,null,r,n):Qi(t,e.child,r,n)}function xl(e,t,r,n,a){r=r.render;var i=t.ref;return ki(t,a),n=Es(e,t,r,n,i,a),r=ks(),null===e||wl?(ai&&r&&ei(t),t.flags|=1,yl(e,t,n,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,Vl(e,t,a))}function Sl(e,t,r,n,a){if(null===e){var i=r.type;return"function"!=typeof i||Du(i)||void 0!==i.defaultProps||null!==r.compare||void 0!==r.defaultProps?((e=Au(r.type,null,n,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,El(e,t,i,n,a))}if(i=e.child,!(e.lanes&a)){var s=i.memoizedProps;if((r=null!==(r=r.compare)?r:on)(s,n)&&e.ref===t.ref)return Vl(e,t,a)}return t.flags|=1,(e=Nu(i,n)).ref=t.ref,e.return=t,t.child=e}function El(e,t,r,n,a){if(null!==e){var i=e.memoizedProps;if(on(i,n)&&e.ref===t.ref){if(wl=!1,t.pendingProps=n=i,!(e.lanes&a))return t.lanes=e.lanes,Vl(e,t,a);131072&e.flags&&(wl=!0)}}return Tl(e,t,r,n,a)}function kl(e,t,r){var n=t.pendingProps,a=n.children,i=null!==e?e.memoizedState:null;if("hidden"===n.mode)if(1&t.mode){if(!(1073741824&r))return e=null!==i?i.baseLanes|r:r,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,Ta(No,Do),Do|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},n=null!==i?i.baseLanes:r,Ta(No,Do),Do|=n}else t.memoizedState={baseLanes:0,cachePool:null,transitions:null},Ta(No,Do),Do|=r;else null!==i?(n=i.baseLanes|r,t.memoizedState=null):n=r,Ta(No,Do),Do|=n;return yl(e,t,a,r),t.child}function Cl(e,t){var r=t.ref;(null===e&&null!==r||null!==e&&e.ref!==r)&&(t.flags|=512,t.flags|=2097152)}function Tl(e,t,r,n,a){var i=Oa(r)?za:Pa.current;return i=_a(t,i),ki(t,a),r=Es(e,t,r,n,i,a),n=ks(),null===e||wl?(ai&&n&&ei(t),t.flags|=1,yl(e,t,r,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,Vl(e,t,a))}function Ml(e,t,r,n,a){if(Oa(r)){var i=!0;Ia(t)}else i=!1;if(ki(t,a),null===t.stateNode)Hl(e,t),Hi(t,r,n),Ui(t,r,n,a),n=!0;else if(null===e){var s=t.stateNode,l=t.memoizedProps;s.props=l;var o=s.context,u=r.contextType;u="object"==typeof u&&null!==u?Ci(u):_a(t,u=Oa(r)?za:Pa.current);var c=r.getDerivedStateFromProps,d="function"==typeof c||"function"==typeof s.getSnapshotBeforeUpdate;d||"function"!=typeof s.UNSAFE_componentWillReceiveProps&&"function"!=typeof s.componentWillReceiveProps||(l!==n||o!==u)&&Vi(t,s,n,u),zi=!1;var p=t.memoizedState;s.state=p,Ri(t,n,s,a),o=t.memoizedState,l!==n||p!==o||La.current||zi?("function"==typeof c&&(qi(t,r,c,n),o=t.memoizedState),(l=zi||Bi(t,r,l,n,p,o,u))?(d||"function"!=typeof s.UNSAFE_componentWillMount&&"function"!=typeof s.componentWillMount||("function"==typeof s.componentWillMount&&s.componentWillMount(),"function"==typeof s.UNSAFE_componentWillMount&&s.UNSAFE_componentWillMount()),"function"==typeof s.componentDidMount&&(t.flags|=4194308)):("function"==typeof s.componentDidMount&&(t.flags|=4194308),t.memoizedProps=n,t.memoizedState=o),s.props=n,s.state=o,s.context=u,n=l):("function"==typeof s.componentDidMount&&(t.flags|=4194308),n=!1)}else{s=t.stateNode,Oi(e,t),l=t.memoizedProps,u=t.type===t.elementType?l:vi(t.type,l),s.props=u,d=t.pendingProps,p=s.context,o="object"==typeof(o=r.contextType)&&null!==o?Ci(o):_a(t,o=Oa(r)?za:Pa.current);var f=r.getDerivedStateFromProps;(c="function"==typeof f||"function"==typeof s.getSnapshotBeforeUpdate)||"function"!=typeof s.UNSAFE_componentWillReceiveProps&&"function"!=typeof s.componentWillReceiveProps||(l!==d||p!==o)&&Vi(t,s,n,o),zi=!1,p=t.memoizedState,s.state=p,Ri(t,n,s,a);var m=t.memoizedState;l!==d||p!==m||La.current||zi?("function"==typeof f&&(qi(t,r,f,n),m=t.memoizedState),(u=zi||Bi(t,r,u,n,p,m,o)||!1)?(c||"function"!=typeof s.UNSAFE_componentWillUpdate&&"function"!=typeof s.componentWillUpdate||("function"==typeof s.componentWillUpdate&&s.componentWillUpdate(n,m,o),"function"==typeof s.UNSAFE_componentWillUpdate&&s.UNSAFE_componentWillUpdate(n,m,o)),"function"==typeof s.componentDidUpdate&&(t.flags|=4),"function"==typeof s.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof s.componentDidUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),"function"!=typeof s.getSnapshotBeforeUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=1024),t.memoizedProps=n,t.memoizedState=m),s.props=n,s.state=m,s.context=o,n=u):("function"!=typeof s.componentDidUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),"function"!=typeof s.getSnapshotBeforeUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=1024),n=!1)}return Pl(e,t,r,n,i,a)}function Pl(e,t,r,n,a,i){Cl(e,t);var s=!!(128&t.flags);if(!n&&!s)return a&&Ra(t,r,!1),Vl(e,t,i);n=t.stateNode,bl.current=t;var l=s&&"function"!=typeof r.getDerivedStateFromError?null:n.render();return t.flags|=1,null!==e&&s?(t.child=Qi(t,e.child,null,i),t.child=Qi(t,null,l,i)):yl(e,t,l,i),t.memoizedState=n.state,a&&Ra(t,r,!0),t.child}function Ll(e){var t=e.stateNode;t.pendingContext?Na(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Na(0,t.context,!1),ns(e,t.containerInfo)}function zl(e,t,r,n,a){return fi(),mi(a),t.flags|=256,yl(e,t,r,n),t.child}var _l,Ol,Dl,Nl,Al={dehydrated:null,treeContext:null,retryLane:0};function Il(e){return{baseLanes:e,cachePool:null,transitions:null}}function Rl(e,t,r){var n,a=t.pendingProps,s=ls.current,l=!1,o=!!(128&t.flags);if((n=o)||(n=(null===e||null!==e.memoizedState)&&!!(2&s)),n?(l=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(s|=1),Ta(ls,1&s),null===e)return ui(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(1&t.mode?"$!"===e.data?t.lanes=8:t.lanes=1073741824:t.lanes=1,null):(o=a.children,e=a.fallback,l?(a=t.mode,l=t.child,o={mode:"hidden",children:o},1&a||null===l?l=Ru(o,a,0,null):(l.childLanes=0,l.pendingProps=o),e=Iu(e,a,r,null),l.return=t,e.return=t,l.sibling=e,t.child=l,t.child.memoizedState=Il(r),t.memoizedState=Al,e):jl(t,o));if(null!==(s=e.memoizedState)&&null!==(n=s.dehydrated))return function(e,t,r,n,a,s,l){if(r)return 256&t.flags?(t.flags&=-257,$l(e,t,l,n=cl(Error(i(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(s=n.fallback,a=t.mode,n=Ru({mode:"visible",children:n.children},a,0,null),(s=Iu(s,a,l,null)).flags|=2,n.return=t,s.return=t,n.sibling=s,t.child=n,1&t.mode&&Qi(t,e.child,null,l),t.child.memoizedState=Il(l),t.memoizedState=Al,s);if(!(1&t.mode))return $l(e,t,l,null);if("$!"===a.data){if(n=a.nextSibling&&a.nextSibling.dataset)var o=n.dgst;return n=o,$l(e,t,l,n=cl(s=Error(i(419)),n,void 0))}if(o=!!(l&e.childLanes),wl||o){if(null!==(n=zo)){switch(l&-l){case 4:a=2;break;case 16:a=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:a=32;break;case 536870912:a=268435456;break;default:a=0}0!==(a=a&(n.suspendedLanes|l)?0:a)&&a!==s.retryLane&&(s.retryLane=a,Li(e,a),nu(n,e,a,-1))}return vu(),$l(e,t,l,n=cl(Error(i(421))))}return"$?"===a.data?(t.flags|=128,t.child=e.child,t=Pu.bind(null,e),a._reactRetry=t,null):(e=s.treeContext,ni=ua(a.nextSibling),ri=t,ai=!0,ii=null,null!==e&&(Ga[Ya++]=Qa,Ga[Ya++]=Ka,Ga[Ya++]=Xa,Qa=e.id,Ka=e.overflow,Xa=t),(t=jl(t,n.children)).flags|=4096,t)}(e,t,o,a,n,s,r);if(l){l=a.fallback,o=t.mode,n=(s=e.child).sibling;var u={mode:"hidden",children:a.children};return 1&o||t.child===s?(a=Nu(s,u)).subtreeFlags=14680064&s.subtreeFlags:((a=t.child).childLanes=0,a.pendingProps=u,t.deletions=null),null!==n?l=Nu(n,l):(l=Iu(l,o,r,null)).flags|=2,l.return=t,a.return=t,a.sibling=l,t.child=a,a=l,l=t.child,o=null===(o=e.child.memoizedState)?Il(r):{baseLanes:o.baseLanes|r,cachePool:null,transitions:o.transitions},l.memoizedState=o,l.childLanes=e.childLanes&~r,t.memoizedState=Al,a}return e=(l=e.child).sibling,a=Nu(l,{mode:"visible",children:a.children}),!(1&t.mode)&&(a.lanes=r),a.return=t,a.sibling=null,null!==e&&(null===(r=t.deletions)?(t.deletions=[e],t.flags|=16):r.push(e)),t.child=a,t.memoizedState=null,a}function jl(e,t){return(t=Ru({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function $l(e,t,r,n){return null!==n&&mi(n),Qi(t,e.child,null,r),(e=jl(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function ql(e,t,r){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),Ei(e.return,t,r)}function Fl(e,t,r,n,a){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:n,tail:r,tailMode:a}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=n,i.tail=r,i.tailMode=a)}function Bl(e,t,r){var n=t.pendingProps,a=n.revealOrder,i=n.tail;if(yl(e,t,n.children,r),2&(n=ls.current))n=1&n|2,t.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&ql(e,r,t);else if(19===e.tag)ql(e,r,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}n&=1}if(Ta(ls,n),1&t.mode)switch(a){case"forwards":for(r=t.child,a=null;null!==r;)null!==(e=r.alternate)&&null===os(e)&&(a=r),r=r.sibling;null===(r=a)?(a=t.child,t.child=null):(a=r.sibling,r.sibling=null),Fl(t,!1,a,r,i);break;case"backwards":for(r=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===os(e)){t.child=a;break}e=a.sibling,a.sibling=r,r=a,a=e}Fl(t,!0,r,null,i);break;case"together":Fl(t,!1,null,null,void 0);break;default:t.memoizedState=null}else t.memoizedState=null;return t.child}function Hl(e,t){!(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Vl(e,t,r){if(null!==e&&(t.dependencies=e.dependencies),Ro|=t.lanes,!(r&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(r=Nu(e=t.child,e.pendingProps),t.child=r,r.return=t;null!==e.sibling;)e=e.sibling,(r=r.sibling=Nu(e,e.pendingProps)).return=t;r.sibling=null}return t.child}function Ul(e,t){if(!ai)switch(e.tailMode){case"hidden":t=e.tail;for(var r=null;null!==t;)null!==t.alternate&&(r=t),t=t.sibling;null===r?e.tail=null:r.sibling=null;break;case"collapsed":r=e.tail;for(var n=null;null!==r;)null!==r.alternate&&(n=r),r=r.sibling;null===n?t||null===e.tail?e.tail=null:e.tail.sibling=null:n.sibling=null}}function Wl(e){var t=null!==e.alternate&&e.alternate.child===e.child,r=0,n=0;if(t)for(var a=e.child;null!==a;)r|=a.lanes|a.childLanes,n|=14680064&a.subtreeFlags,n|=14680064&a.flags,a.return=e,a=a.sibling;else for(a=e.child;null!==a;)r|=a.lanes|a.childLanes,n|=a.subtreeFlags,n|=a.flags,a.return=e,a=a.sibling;return e.subtreeFlags|=n,e.childLanes=r,t}function Gl(e,t,r){var n=t.pendingProps;switch(ti(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Wl(t),null;case 1:case 17:return Oa(t.type)&&Da(),Wl(t),null;case 3:return n=t.stateNode,as(),Ca(La),Ca(Pa),cs(),n.pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||(di(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&!(256&t.flags)||(t.flags|=1024,null!==ii&&(lu(ii),ii=null))),Ol(e,t),Wl(t),null;case 5:ss(t);var a=rs(ts.current);if(r=t.type,null!==e&&null!=t.stateNode)Dl(e,t,r,n,a),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!n){if(null===t.stateNode)throw Error(i(166));return Wl(t),null}if(e=rs(Zi.current),di(t)){n=t.stateNode,r=t.type;var s=t.memoizedProps;switch(n[pa]=t,n[fa]=s,e=!!(1&t.mode),r){case"dialog":$n("cancel",n),$n("close",n);break;case"iframe":case"object":case"embed":$n("load",n);break;case"video":case"audio":for(a=0;a<An.length;a++)$n(An[a],n);break;case"source":$n("error",n);break;case"img":case"image":case"link":$n("error",n),$n("load",n);break;case"details":$n("toggle",n);break;case"input":Q(n,s),$n("invalid",n);break;case"select":n._wrapperState={wasMultiple:!!s.multiple},$n("invalid",n);break;case"textarea":ae(n,s),$n("invalid",n)}for(var o in be(r,s),a=null,s)if(s.hasOwnProperty(o)){var u=s[o];"children"===o?"string"==typeof u?n.textContent!==u&&(!0!==s.suppressHydrationWarning&&Jn(n.textContent,u,e),a=["children",u]):"number"==typeof u&&n.textContent!==""+u&&(!0!==s.suppressHydrationWarning&&Jn(n.textContent,u,e),a=["children",""+u]):l.hasOwnProperty(o)&&null!=u&&"onScroll"===o&&$n("scroll",n)}switch(r){case"input":W(n),Z(n,s,!0);break;case"textarea":W(n),se(n);break;case"select":case"option":break;default:"function"==typeof s.onClick&&(n.onclick=Zn)}n=a,t.updateQueue=n,null!==n&&(t.flags|=4)}else{o=9===a.nodeType?a:a.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=le(r)),"http://www.w3.org/1999/xhtml"===e?"script"===r?((e=o.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof n.is?e=o.createElement(r,{is:n.is}):(e=o.createElement(r),"select"===r&&(o=e,n.multiple?o.multiple=!0:n.size&&(o.size=n.size))):e=o.createElementNS(e,r),e[pa]=t,e[fa]=n,_l(e,t,!1,!1),t.stateNode=e;e:{switch(o=we(r,n),r){case"dialog":$n("cancel",e),$n("close",e),a=n;break;case"iframe":case"object":case"embed":$n("load",e),a=n;break;case"video":case"audio":for(a=0;a<An.length;a++)$n(An[a],e);a=n;break;case"source":$n("error",e),a=n;break;case"img":case"image":case"link":$n("error",e),$n("load",e),a=n;break;case"details":$n("toggle",e),a=n;break;case"input":Q(e,n),a=X(e,n),$n("invalid",e);break;case"option":default:a=n;break;case"select":e._wrapperState={wasMultiple:!!n.multiple},a=R({},n,{value:void 0}),$n("invalid",e);break;case"textarea":ae(e,n),a=ne(e,n),$n("invalid",e)}for(s in be(r,a),u=a)if(u.hasOwnProperty(s)){var c=u[s];"style"===s?ve(e,c):"dangerouslySetInnerHTML"===s?null!=(c=c?c.__html:void 0)&&de(e,c):"children"===s?"string"==typeof c?("textarea"!==r||""!==c)&&pe(e,c):"number"==typeof c&&pe(e,""+c):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(l.hasOwnProperty(s)?null!=c&&"onScroll"===s&&$n("scroll",e):null!=c&&w(e,s,c,o))}switch(r){case"input":W(e),Z(e,n,!1);break;case"textarea":W(e),se(e);break;case"option":null!=n.value&&e.setAttribute("value",""+V(n.value));break;case"select":e.multiple=!!n.multiple,null!=(s=n.value)?re(e,!!n.multiple,s,!1):null!=n.defaultValue&&re(e,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=Zn)}switch(r){case"button":case"input":case"select":case"textarea":n=!!n.autoFocus;break e;case"img":n=!0;break e;default:n=!1}}n&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return Wl(t),null;case 6:if(e&&null!=t.stateNode)Nl(e,t,e.memoizedProps,n);else{if("string"!=typeof n&&null===t.stateNode)throw Error(i(166));if(r=rs(ts.current),rs(Zi.current),di(t)){if(n=t.stateNode,r=t.memoizedProps,n[pa]=t,(s=n.nodeValue!==r)&&null!==(e=ri))switch(e.tag){case 3:Jn(n.nodeValue,r,!!(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Jn(n.nodeValue,r,!!(1&e.mode))}s&&(t.flags|=4)}else(n=(9===r.nodeType?r:r.ownerDocument).createTextNode(n))[pa]=t,t.stateNode=n}return Wl(t),null;case 13:if(Ca(ls),n=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(ai&&null!==ni&&1&t.mode&&!(128&t.flags))pi(),fi(),t.flags|=98560,s=!1;else if(s=di(t),null!==n&&null!==n.dehydrated){if(null===e){if(!s)throw Error(i(318));if(!(s=null!==(s=t.memoizedState)?s.dehydrated:null))throw Error(i(317));s[pa]=t}else fi(),!(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Wl(t),s=!1}else null!==ii&&(lu(ii),ii=null),s=!0;if(!s)return 65536&t.flags?t:null}return 128&t.flags?(t.lanes=r,t):((n=null!==n)!=(null!==e&&null!==e.memoizedState)&&n&&(t.child.flags|=8192,1&t.mode&&(null===e||1&ls.current?0===Ao&&(Ao=3):vu())),null!==t.updateQueue&&(t.flags|=4),Wl(t),null);case 4:return as(),Ol(e,t),null===e&&Bn(t.stateNode.containerInfo),Wl(t),null;case 10:return Si(t.type._context),Wl(t),null;case 19:if(Ca(ls),null===(s=t.memoizedState))return Wl(t),null;if(n=!!(128&t.flags),null===(o=s.rendering))if(n)Ul(s,!1);else{if(0!==Ao||null!==e&&128&e.flags)for(e=t.child;null!==e;){if(null!==(o=os(e))){for(t.flags|=128,Ul(s,!1),null!==(n=o.updateQueue)&&(t.updateQueue=n,t.flags|=4),t.subtreeFlags=0,n=r,r=t.child;null!==r;)e=n,(s=r).flags&=14680066,null===(o=s.alternate)?(s.childLanes=0,s.lanes=e,s.child=null,s.subtreeFlags=0,s.memoizedProps=null,s.memoizedState=null,s.updateQueue=null,s.dependencies=null,s.stateNode=null):(s.childLanes=o.childLanes,s.lanes=o.lanes,s.child=o.child,s.subtreeFlags=0,s.deletions=null,s.memoizedProps=o.memoizedProps,s.memoizedState=o.memoizedState,s.updateQueue=o.updateQueue,s.type=o.type,e=o.dependencies,s.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),r=r.sibling;return Ta(ls,1&ls.current|2),t.child}e=e.sibling}null!==s.tail&&Ke()>Ho&&(t.flags|=128,n=!0,Ul(s,!1),t.lanes=4194304)}else{if(!n)if(null!==(e=os(o))){if(t.flags|=128,n=!0,null!==(r=e.updateQueue)&&(t.updateQueue=r,t.flags|=4),Ul(s,!0),null===s.tail&&"hidden"===s.tailMode&&!o.alternate&&!ai)return Wl(t),null}else 2*Ke()-s.renderingStartTime>Ho&&1073741824!==r&&(t.flags|=128,n=!0,Ul(s,!1),t.lanes=4194304);s.isBackwards?(o.sibling=t.child,t.child=o):(null!==(r=s.last)?r.sibling=o:t.child=o,s.last=o)}return null!==s.tail?(t=s.tail,s.rendering=t,s.tail=t.sibling,s.renderingStartTime=Ke(),t.sibling=null,r=ls.current,Ta(ls,n?1&r|2:1&r),t):(Wl(t),null);case 22:case 23:return pu(),n=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==n&&(t.flags|=8192),n&&1&t.mode?!!(1073741824&Do)&&(Wl(t),6&t.subtreeFlags&&(t.flags|=8192)):Wl(t),null;case 24:case 25:return null}throw Error(i(156,t.tag))}function Yl(e,t){switch(ti(t),t.tag){case 1:return Oa(t.type)&&Da(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return as(),Ca(La),Ca(Pa),cs(),65536&(e=t.flags)&&!(128&e)?(t.flags=-65537&e|128,t):null;case 5:return ss(t),null;case 13:if(Ca(ls),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(i(340));fi()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return Ca(ls),null;case 4:return as(),null;case 10:return Si(t.type._context),null;case 22:case 23:return pu(),null;default:return null}}_l=function(e,t){for(var r=t.child;null!==r;){if(5===r.tag||6===r.tag)e.appendChild(r.stateNode);else if(4!==r.tag&&null!==r.child){r.child.return=r,r=r.child;continue}if(r===t)break;for(;null===r.sibling;){if(null===r.return||r.return===t)return;r=r.return}r.sibling.return=r.return,r=r.sibling}},Ol=function(){},Dl=function(e,t,r,n){var a=e.memoizedProps;if(a!==n){e=t.stateNode,rs(Zi.current);var i,s=null;switch(r){case"input":a=X(e,a),n=X(e,n),s=[];break;case"select":a=R({},a,{value:void 0}),n=R({},n,{value:void 0}),s=[];break;case"textarea":a=ne(e,a),n=ne(e,n),s=[];break;default:"function"!=typeof a.onClick&&"function"==typeof n.onClick&&(e.onclick=Zn)}for(c in be(r,n),r=null,a)if(!n.hasOwnProperty(c)&&a.hasOwnProperty(c)&&null!=a[c])if("style"===c){var o=a[c];for(i in o)o.hasOwnProperty(i)&&(r||(r={}),r[i]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(l.hasOwnProperty(c)?s||(s=[]):(s=s||[]).push(c,null));for(c in n){var u=n[c];if(o=null!=a?a[c]:void 0,n.hasOwnProperty(c)&&u!==o&&(null!=u||null!=o))if("style"===c)if(o){for(i in o)!o.hasOwnProperty(i)||u&&u.hasOwnProperty(i)||(r||(r={}),r[i]="");for(i in u)u.hasOwnProperty(i)&&o[i]!==u[i]&&(r||(r={}),r[i]=u[i])}else r||(s||(s=[]),s.push(c,r)),r=u;else"dangerouslySetInnerHTML"===c?(u=u?u.__html:void 0,o=o?o.__html:void 0,null!=u&&o!==u&&(s=s||[]).push(c,u)):"children"===c?"string"!=typeof u&&"number"!=typeof u||(s=s||[]).push(c,""+u):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(l.hasOwnProperty(c)?(null!=u&&"onScroll"===c&&$n("scroll",e),s||o===u||(s=[])):(s=s||[]).push(c,u))}r&&(s=s||[]).push("style",r);var c=s;(t.updateQueue=c)&&(t.flags|=4)}},Nl=function(e,t,r,n){r!==n&&(t.flags|=4)};var Xl=!1,Ql=!1,Kl="function"==typeof WeakSet?WeakSet:Set,Jl=null;function Zl(e,t){var r=e.ref;if(null!==r)if("function"==typeof r)try{r(null)}catch(r){Cu(e,t,r)}else r.current=null}function eo(e,t,r){try{r()}catch(r){Cu(e,t,r)}}var to=!1;function ro(e,t,r){var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var a=n=n.next;do{if((a.tag&e)===e){var i=a.destroy;a.destroy=void 0,void 0!==i&&eo(t,r,i)}a=a.next}while(a!==n)}}function no(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var r=t=t.next;do{if((r.tag&e)===e){var n=r.create;r.destroy=n()}r=r.next}while(r!==t)}}function ao(e){var t=e.ref;if(null!==t){var r=e.stateNode;e.tag,e=r,"function"==typeof t?t(e):t.current=e}}function io(e){var t=e.alternate;null!==t&&(e.alternate=null,io(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[pa],delete t[fa],delete t[ha],delete t[va],delete t[ga]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function so(e){return 5===e.tag||3===e.tag||4===e.tag}function lo(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||so(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function oo(e,t,r){var n=e.tag;if(5===n||6===n)e=e.stateNode,t?8===r.nodeType?r.parentNode.insertBefore(e,t):r.insertBefore(e,t):(8===r.nodeType?(t=r.parentNode).insertBefore(e,r):(t=r).appendChild(e),null!=(r=r._reactRootContainer)||null!==t.onclick||(t.onclick=Zn));else if(4!==n&&null!==(e=e.child))for(oo(e,t,r),e=e.sibling;null!==e;)oo(e,t,r),e=e.sibling}function uo(e,t,r){var n=e.tag;if(5===n||6===n)e=e.stateNode,t?r.insertBefore(e,t):r.appendChild(e);else if(4!==n&&null!==(e=e.child))for(uo(e,t,r),e=e.sibling;null!==e;)uo(e,t,r),e=e.sibling}var co=null,po=!1;function fo(e,t,r){for(r=r.child;null!==r;)mo(e,t,r),r=r.sibling}function mo(e,t,r){if(it&&"function"==typeof it.onCommitFiberUnmount)try{it.onCommitFiberUnmount(at,r)}catch(e){}switch(r.tag){case 5:Ql||Zl(r,t);case 6:var n=co,a=po;co=null,fo(e,t,r),po=a,null!==(co=n)&&(po?(e=co,r=r.stateNode,8===e.nodeType?e.parentNode.removeChild(r):e.removeChild(r)):co.removeChild(r.stateNode));break;case 18:null!==co&&(po?(e=co,r=r.stateNode,8===e.nodeType?oa(e.parentNode,r):1===e.nodeType&&oa(e,r),Bt(e)):oa(co,r.stateNode));break;case 4:n=co,a=po,co=r.stateNode.containerInfo,po=!0,fo(e,t,r),co=n,po=a;break;case 0:case 11:case 14:case 15:if(!Ql&&null!==(n=r.updateQueue)&&null!==(n=n.lastEffect)){a=n=n.next;do{var i=a,s=i.destroy;i=i.tag,void 0!==s&&(2&i||4&i)&&eo(r,t,s),a=a.next}while(a!==n)}fo(e,t,r);break;case 1:if(!Ql&&(Zl(r,t),"function"==typeof(n=r.stateNode).componentWillUnmount))try{n.props=r.memoizedProps,n.state=r.memoizedState,n.componentWillUnmount()}catch(e){Cu(r,t,e)}fo(e,t,r);break;case 21:fo(e,t,r);break;case 22:1&r.mode?(Ql=(n=Ql)||null!==r.memoizedState,fo(e,t,r),Ql=n):fo(e,t,r);break;default:fo(e,t,r)}}function ho(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var r=e.stateNode;null===r&&(r=e.stateNode=new Kl),t.forEach((function(t){var n=Lu.bind(null,e,t);r.has(t)||(r.add(t),t.then(n,n))}))}}function vo(e,t){var r=t.deletions;if(null!==r)for(var n=0;n<r.length;n++){var a=r[n];try{var s=e,l=t,o=l;e:for(;null!==o;){switch(o.tag){case 5:co=o.stateNode,po=!1;break e;case 3:case 4:co=o.stateNode.containerInfo,po=!0;break e}o=o.return}if(null===co)throw Error(i(160));mo(s,l,a),co=null,po=!1;var u=a.alternate;null!==u&&(u.return=null),a.return=null}catch(e){Cu(a,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)go(t,e),t=t.sibling}function go(e,t){var r=e.alternate,n=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(vo(t,e),bo(e),4&n){try{ro(3,e,e.return),no(3,e)}catch(t){Cu(e,e.return,t)}try{ro(5,e,e.return)}catch(t){Cu(e,e.return,t)}}break;case 1:vo(t,e),bo(e),512&n&&null!==r&&Zl(r,r.return);break;case 5:if(vo(t,e),bo(e),512&n&&null!==r&&Zl(r,r.return),32&e.flags){var a=e.stateNode;try{pe(a,"")}catch(t){Cu(e,e.return,t)}}if(4&n&&null!=(a=e.stateNode)){var s=e.memoizedProps,l=null!==r?r.memoizedProps:s,o=e.type,u=e.updateQueue;if(e.updateQueue=null,null!==u)try{"input"===o&&"radio"===s.type&&null!=s.name&&K(a,s),we(o,l);var c=we(o,s);for(l=0;l<u.length;l+=2){var d=u[l],p=u[l+1];"style"===d?ve(a,p):"dangerouslySetInnerHTML"===d?de(a,p):"children"===d?pe(a,p):w(a,d,p,c)}switch(o){case"input":J(a,s);break;case"textarea":ie(a,s);break;case"select":var f=a._wrapperState.wasMultiple;a._wrapperState.wasMultiple=!!s.multiple;var m=s.value;null!=m?re(a,!!s.multiple,m,!1):f!==!!s.multiple&&(null!=s.defaultValue?re(a,!!s.multiple,s.defaultValue,!0):re(a,!!s.multiple,s.multiple?[]:"",!1))}a[fa]=s}catch(t){Cu(e,e.return,t)}}break;case 6:if(vo(t,e),bo(e),4&n){if(null===e.stateNode)throw Error(i(162));a=e.stateNode,s=e.memoizedProps;try{a.nodeValue=s}catch(t){Cu(e,e.return,t)}}break;case 3:if(vo(t,e),bo(e),4&n&&null!==r&&r.memoizedState.isDehydrated)try{Bt(t.containerInfo)}catch(t){Cu(e,e.return,t)}break;case 4:default:vo(t,e),bo(e);break;case 13:vo(t,e),bo(e),8192&(a=e.child).flags&&(s=null!==a.memoizedState,a.stateNode.isHidden=s,!s||null!==a.alternate&&null!==a.alternate.memoizedState||(Bo=Ke())),4&n&&ho(e);break;case 22:if(d=null!==r&&null!==r.memoizedState,1&e.mode?(Ql=(c=Ql)||d,vo(t,e),Ql=c):vo(t,e),bo(e),8192&n){if(c=null!==e.memoizedState,(e.stateNode.isHidden=c)&&!d&&1&e.mode)for(Jl=e,d=e.child;null!==d;){for(p=Jl=d;null!==Jl;){switch(m=(f=Jl).child,f.tag){case 0:case 11:case 14:case 15:ro(4,f,f.return);break;case 1:Zl(f,f.return);var h=f.stateNode;if("function"==typeof h.componentWillUnmount){n=f,r=f.return;try{t=n,h.props=t.memoizedProps,h.state=t.memoizedState,h.componentWillUnmount()}catch(e){Cu(n,r,e)}}break;case 5:Zl(f,f.return);break;case 22:if(null!==f.memoizedState){So(p);continue}}null!==m?(m.return=f,Jl=m):So(p)}d=d.sibling}e:for(d=null,p=e;;){if(5===p.tag){if(null===d){d=p;try{a=p.stateNode,c?"function"==typeof(s=a.style).setProperty?s.setProperty("display","none","important"):s.display="none":(o=p.stateNode,l=null!=(u=p.memoizedProps.style)&&u.hasOwnProperty("display")?u.display:null,o.style.display=he("display",l))}catch(t){Cu(e,e.return,t)}}}else if(6===p.tag){if(null===d)try{p.stateNode.nodeValue=c?"":p.memoizedProps}catch(t){Cu(e,e.return,t)}}else if((22!==p.tag&&23!==p.tag||null===p.memoizedState||p===e)&&null!==p.child){p.child.return=p,p=p.child;continue}if(p===e)break e;for(;null===p.sibling;){if(null===p.return||p.return===e)break e;d===p&&(d=null),p=p.return}d===p&&(d=null),p.sibling.return=p.return,p=p.sibling}}break;case 19:vo(t,e),bo(e),4&n&&ho(e);case 21:}}function bo(e){var t=e.flags;if(2&t){try{e:{for(var r=e.return;null!==r;){if(so(r)){var n=r;break e}r=r.return}throw Error(i(160))}switch(n.tag){case 5:var a=n.stateNode;32&n.flags&&(pe(a,""),n.flags&=-33),uo(e,lo(e),a);break;case 3:case 4:var s=n.stateNode.containerInfo;oo(e,lo(e),s);break;default:throw Error(i(161))}}catch(t){Cu(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function wo(e,t,r){Jl=e,yo(e,t,r)}function yo(e,t,r){for(var n=!!(1&e.mode);null!==Jl;){var a=Jl,i=a.child;if(22===a.tag&&n){var s=null!==a.memoizedState||Xl;if(!s){var l=a.alternate,o=null!==l&&null!==l.memoizedState||Ql;l=Xl;var u=Ql;if(Xl=s,(Ql=o)&&!u)for(Jl=a;null!==Jl;)o=(s=Jl).child,22===s.tag&&null!==s.memoizedState?Eo(a):null!==o?(o.return=s,Jl=o):Eo(a);for(;null!==i;)Jl=i,yo(i,t,r),i=i.sibling;Jl=a,Xl=l,Ql=u}xo(e)}else 8772&a.subtreeFlags&&null!==i?(i.return=a,Jl=i):xo(e)}}function xo(e){for(;null!==Jl;){var t=Jl;if(8772&t.flags){var r=t.alternate;try{if(8772&t.flags)switch(t.tag){case 0:case 11:case 15:Ql||no(5,t);break;case 1:var n=t.stateNode;if(4&t.flags&&!Ql)if(null===r)n.componentDidMount();else{var a=t.elementType===t.type?r.memoizedProps:vi(t.type,r.memoizedProps);n.componentDidUpdate(a,r.memoizedState,n.__reactInternalSnapshotBeforeUpdate)}var s=t.updateQueue;null!==s&&ji(t,s,n);break;case 3:var l=t.updateQueue;if(null!==l){if(r=null,null!==t.child)switch(t.child.tag){case 5:case 1:r=t.child.stateNode}ji(t,l,r)}break;case 5:var o=t.stateNode;if(null===r&&4&t.flags){r=o;var u=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":u.autoFocus&&r.focus();break;case"img":u.src&&(r.src=u.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var c=t.alternate;if(null!==c){var d=c.memoizedState;if(null!==d){var p=d.dehydrated;null!==p&&Bt(p)}}}break;default:throw Error(i(163))}Ql||512&t.flags&&ao(t)}catch(e){Cu(t,t.return,e)}}if(t===e){Jl=null;break}if(null!==(r=t.sibling)){r.return=t.return,Jl=r;break}Jl=t.return}}function So(e){for(;null!==Jl;){var t=Jl;if(t===e){Jl=null;break}var r=t.sibling;if(null!==r){r.return=t.return,Jl=r;break}Jl=t.return}}function Eo(e){for(;null!==Jl;){var t=Jl;try{switch(t.tag){case 0:case 11:case 15:var r=t.return;try{no(4,t)}catch(e){Cu(t,r,e)}break;case 1:var n=t.stateNode;if("function"==typeof n.componentDidMount){var a=t.return;try{n.componentDidMount()}catch(e){Cu(t,a,e)}}var i=t.return;try{ao(t)}catch(e){Cu(t,i,e)}break;case 5:var s=t.return;try{ao(t)}catch(e){Cu(t,s,e)}}}catch(e){Cu(t,t.return,e)}if(t===e){Jl=null;break}var l=t.sibling;if(null!==l){l.return=t.return,Jl=l;break}Jl=t.return}}var ko,Co=Math.ceil,To=y.ReactCurrentDispatcher,Mo=y.ReactCurrentOwner,Po=y.ReactCurrentBatchConfig,Lo=0,zo=null,_o=null,Oo=0,Do=0,No=ka(0),Ao=0,Io=null,Ro=0,jo=0,$o=0,qo=null,Fo=null,Bo=0,Ho=1/0,Vo=null,Uo=!1,Wo=null,Go=null,Yo=!1,Xo=null,Qo=0,Ko=0,Jo=null,Zo=-1,eu=0;function tu(){return 6&Lo?Ke():-1!==Zo?Zo:Zo=Ke()}function ru(e){return 1&e.mode?2&Lo&&0!==Oo?Oo&-Oo:null!==hi.transition?(0===eu&&(eu=ht()),eu):0!==(e=wt)?e:e=void 0===(e=window.event)?16:Qt(e.type):1}function nu(e,t,r,n){if(50<Ko)throw Ko=0,Jo=null,Error(i(185));gt(e,r,n),2&Lo&&e===zo||(e===zo&&(!(2&Lo)&&(jo|=r),4===Ao&&ou(e,Oo)),au(e,n),1===r&&0===Lo&&!(1&t.mode)&&(Ho=Ke()+500,$a&&Ba()))}function au(e,t){var r=e.callbackNode;!function(e,t){for(var r=e.suspendedLanes,n=e.pingedLanes,a=e.expirationTimes,i=e.pendingLanes;0<i;){var s=31-st(i),l=1<<s,o=a[s];-1===o?l&r&&!(l&n)||(a[s]=ft(l,t)):o<=t&&(e.expiredLanes|=l),i&=~l}}(e,t);var n=pt(e,e===zo?Oo:0);if(0===n)null!==r&&Ye(r),e.callbackNode=null,e.callbackPriority=0;else if(t=n&-n,e.callbackPriority!==t){if(null!=r&&Ye(r),1===t)0===e.tag?function(e){$a=!0,Fa(e)}(uu.bind(null,e)):Fa(uu.bind(null,e)),sa((function(){!(6&Lo)&&Ba()})),r=null;else{switch(yt(n)){case 1:r=Ze;break;case 4:r=et;break;case 16:default:r=tt;break;case 536870912:r=nt}r=zu(r,iu.bind(null,e))}e.callbackPriority=t,e.callbackNode=r}}function iu(e,t){if(Zo=-1,eu=0,6&Lo)throw Error(i(327));var r=e.callbackNode;if(Eu()&&e.callbackNode!==r)return null;var n=pt(e,e===zo?Oo:0);if(0===n)return null;if(30&n||n&e.expiredLanes||t)t=gu(e,n);else{t=n;var a=Lo;Lo|=2;var s=hu();for(zo===e&&Oo===t||(Vo=null,Ho=Ke()+500,fu(e,t));;)try{wu();break}catch(t){mu(e,t)}xi(),To.current=s,Lo=a,null!==_o?t=0:(zo=null,Oo=0,t=Ao)}if(0!==t){if(2===t&&0!==(a=mt(e))&&(n=a,t=su(e,a)),1===t)throw r=Io,fu(e,0),ou(e,n),au(e,Ke()),r;if(6===t)ou(e,n);else{if(a=e.current.alternate,!(30&n||function(e){for(var t=e;;){if(16384&t.flags){var r=t.updateQueue;if(null!==r&&null!==(r=r.stores))for(var n=0;n<r.length;n++){var a=r[n],i=a.getSnapshot;a=a.value;try{if(!ln(i(),a))return!1}catch(e){return!1}}}if(r=t.child,16384&t.subtreeFlags&&null!==r)r.return=t,t=r;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(a)||(t=gu(e,n),2===t&&(s=mt(e),0!==s&&(n=s,t=su(e,s))),1!==t)))throw r=Io,fu(e,0),ou(e,n),au(e,Ke()),r;switch(e.finishedWork=a,e.finishedLanes=n,t){case 0:case 1:throw Error(i(345));case 2:case 5:Su(e,Fo,Vo);break;case 3:if(ou(e,n),(130023424&n)===n&&10<(t=Bo+500-Ke())){if(0!==pt(e,0))break;if(((a=e.suspendedLanes)&n)!==n){tu(),e.pingedLanes|=e.suspendedLanes&a;break}e.timeoutHandle=na(Su.bind(null,e,Fo,Vo),t);break}Su(e,Fo,Vo);break;case 4:if(ou(e,n),(4194240&n)===n)break;for(t=e.eventTimes,a=-1;0<n;){var l=31-st(n);s=1<<l,(l=t[l])>a&&(a=l),n&=~s}if(n=a,10<(n=(120>(n=Ke()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*Co(n/1960))-n)){e.timeoutHandle=na(Su.bind(null,e,Fo,Vo),n);break}Su(e,Fo,Vo);break;default:throw Error(i(329))}}}return au(e,Ke()),e.callbackNode===r?iu.bind(null,e):null}function su(e,t){var r=qo;return e.current.memoizedState.isDehydrated&&(fu(e,t).flags|=256),2!==(e=gu(e,t))&&(t=Fo,Fo=r,null!==t&&lu(t)),e}function lu(e){null===Fo?Fo=e:Fo.push.apply(Fo,e)}function ou(e,t){for(t&=~$o,t&=~jo,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var r=31-st(t),n=1<<r;e[r]=-1,t&=~n}}function uu(e){if(6&Lo)throw Error(i(327));Eu();var t=pt(e,0);if(!(1&t))return au(e,Ke()),null;var r=gu(e,t);if(0!==e.tag&&2===r){var n=mt(e);0!==n&&(t=n,r=su(e,n))}if(1===r)throw r=Io,fu(e,0),ou(e,t),au(e,Ke()),r;if(6===r)throw Error(i(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,Su(e,Fo,Vo),au(e,Ke()),null}function cu(e,t){var r=Lo;Lo|=1;try{return e(t)}finally{0===(Lo=r)&&(Ho=Ke()+500,$a&&Ba())}}function du(e){null!==Xo&&0===Xo.tag&&!(6&Lo)&&Eu();var t=Lo;Lo|=1;var r=Po.transition,n=wt;try{if(Po.transition=null,wt=1,e)return e()}finally{wt=n,Po.transition=r,!(6&(Lo=t))&&Ba()}}function pu(){Do=No.current,Ca(No)}function fu(e,t){e.finishedWork=null,e.finishedLanes=0;var r=e.timeoutHandle;if(-1!==r&&(e.timeoutHandle=-1,aa(r)),null!==_o)for(r=_o.return;null!==r;){var n=r;switch(ti(n),n.tag){case 1:null!=(n=n.type.childContextTypes)&&Da();break;case 3:as(),Ca(La),Ca(Pa),cs();break;case 5:ss(n);break;case 4:as();break;case 13:case 19:Ca(ls);break;case 10:Si(n.type._context);break;case 22:case 23:pu()}r=r.return}if(zo=e,_o=e=Nu(e.current,null),Oo=Do=t,Ao=0,Io=null,$o=jo=Ro=0,Fo=qo=null,null!==Ti){for(t=0;t<Ti.length;t++)if(null!==(n=(r=Ti[t]).interleaved)){r.interleaved=null;var a=n.next,i=r.pending;if(null!==i){var s=i.next;i.next=a,n.next=s}r.pending=n}Ti=null}return e}function mu(e,t){for(;;){var r=_o;try{if(xi(),ds.current=il,gs){for(var n=ms.memoizedState;null!==n;){var a=n.queue;null!==a&&(a.pending=null),n=n.next}gs=!1}if(fs=0,vs=hs=ms=null,bs=!1,ws=0,Mo.current=null,null===r||null===r.return){Ao=1,Io=t,_o=null;break}e:{var s=e,l=r.return,o=r,u=t;if(t=Oo,o.flags|=32768,null!==u&&"object"==typeof u&&"function"==typeof u.then){var c=u,d=o,p=d.tag;if(!(1&d.mode||0!==p&&11!==p&&15!==p)){var f=d.alternate;f?(d.updateQueue=f.updateQueue,d.memoizedState=f.memoizedState,d.lanes=f.lanes):(d.updateQueue=null,d.memoizedState=null)}var m=vl(l);if(null!==m){m.flags&=-257,gl(m,l,o,0,t),1&m.mode&&hl(s,c,t),u=c;var h=(t=m).updateQueue;if(null===h){var v=new Set;v.add(u),t.updateQueue=v}else h.add(u);break e}if(!(1&t)){hl(s,c,t),vu();break e}u=Error(i(426))}else if(ai&&1&o.mode){var g=vl(l);if(null!==g){!(65536&g.flags)&&(g.flags|=256),gl(g,l,o,0,t),mi(ul(u,o));break e}}s=u=ul(u,o),4!==Ao&&(Ao=2),null===qo?qo=[s]:qo.push(s),s=l;do{switch(s.tag){case 3:s.flags|=65536,t&=-t,s.lanes|=t,Ii(s,fl(0,u,t));break e;case 1:o=u;var b=s.type,w=s.stateNode;if(!(128&s.flags||"function"!=typeof b.getDerivedStateFromError&&(null===w||"function"!=typeof w.componentDidCatch||null!==Go&&Go.has(w)))){s.flags|=65536,t&=-t,s.lanes|=t,Ii(s,ml(s,o,t));break e}}s=s.return}while(null!==s)}xu(r)}catch(e){t=e,_o===r&&null!==r&&(_o=r=r.return);continue}break}}function hu(){var e=To.current;return To.current=il,null===e?il:e}function vu(){0!==Ao&&3!==Ao&&2!==Ao||(Ao=4),null===zo||!(268435455&Ro)&&!(268435455&jo)||ou(zo,Oo)}function gu(e,t){var r=Lo;Lo|=2;var n=hu();for(zo===e&&Oo===t||(Vo=null,fu(e,t));;)try{bu();break}catch(t){mu(e,t)}if(xi(),Lo=r,To.current=n,null!==_o)throw Error(i(261));return zo=null,Oo=0,Ao}function bu(){for(;null!==_o;)yu(_o)}function wu(){for(;null!==_o&&!Xe();)yu(_o)}function yu(e){var t=ko(e.alternate,e,Do);e.memoizedProps=e.pendingProps,null===t?xu(e):_o=t,Mo.current=null}function xu(e){var t=e;do{var r=t.alternate;if(e=t.return,32768&t.flags){if(null!==(r=Yl(r,t)))return r.flags&=32767,void(_o=r);if(null===e)return Ao=6,void(_o=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}else if(null!==(r=Gl(r,t,Do)))return void(_o=r);if(null!==(t=t.sibling))return void(_o=t);_o=t=e}while(null!==t);0===Ao&&(Ao=5)}function Su(e,t,r){var n=wt,a=Po.transition;try{Po.transition=null,wt=1,function(e,t,r,n){do{Eu()}while(null!==Xo);if(6&Lo)throw Error(i(327));r=e.finishedWork;var a=e.finishedLanes;if(null===r)return null;if(e.finishedWork=null,e.finishedLanes=0,r===e.current)throw Error(i(177));e.callbackNode=null,e.callbackPriority=0;var s=r.lanes|r.childLanes;if(function(e,t){var r=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var n=e.eventTimes;for(e=e.expirationTimes;0<r;){var a=31-st(r),i=1<<a;t[a]=0,n[a]=-1,e[a]=-1,r&=~i}}(e,s),e===zo&&(_o=zo=null,Oo=0),!(2064&r.subtreeFlags)&&!(2064&r.flags)||Yo||(Yo=!0,zu(tt,(function(){return Eu(),null}))),s=!!(15990&r.flags),15990&r.subtreeFlags||s){s=Po.transition,Po.transition=null;var l=wt;wt=1;var o=Lo;Lo|=4,Mo.current=null,function(e,t){if(ea=Vt,fn(e=pn())){if("selectionStart"in e)var r={start:e.selectionStart,end:e.selectionEnd};else e:{var n=(r=(r=e.ownerDocument)&&r.defaultView||window).getSelection&&r.getSelection();if(n&&0!==n.rangeCount){r=n.anchorNode;var a=n.anchorOffset,s=n.focusNode;n=n.focusOffset;try{r.nodeType,s.nodeType}catch(e){r=null;break e}var l=0,o=-1,u=-1,c=0,d=0,p=e,f=null;t:for(;;){for(var m;p!==r||0!==a&&3!==p.nodeType||(o=l+a),p!==s||0!==n&&3!==p.nodeType||(u=l+n),3===p.nodeType&&(l+=p.nodeValue.length),null!==(m=p.firstChild);)f=p,p=m;for(;;){if(p===e)break t;if(f===r&&++c===a&&(o=l),f===s&&++d===n&&(u=l),null!==(m=p.nextSibling))break;f=(p=f).parentNode}p=m}r=-1===o||-1===u?null:{start:o,end:u}}else r=null}r=r||{start:0,end:0}}else r=null;for(ta={focusedElem:e,selectionRange:r},Vt=!1,Jl=t;null!==Jl;)if(e=(t=Jl).child,1028&t.subtreeFlags&&null!==e)e.return=t,Jl=e;else for(;null!==Jl;){t=Jl;try{var h=t.alternate;if(1024&t.flags)switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==h){var v=h.memoizedProps,g=h.memoizedState,b=t.stateNode,w=b.getSnapshotBeforeUpdate(t.elementType===t.type?v:vi(t.type,v),g);b.__reactInternalSnapshotBeforeUpdate=w}break;case 3:var y=t.stateNode.containerInfo;1===y.nodeType?y.textContent="":9===y.nodeType&&y.documentElement&&y.removeChild(y.documentElement);break;default:throw Error(i(163))}}catch(e){Cu(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Jl=e;break}Jl=t.return}h=to,to=!1}(e,r),go(r,e),mn(ta),Vt=!!ea,ta=ea=null,e.current=r,wo(r,e,a),Qe(),Lo=o,wt=l,Po.transition=s}else e.current=r;if(Yo&&(Yo=!1,Xo=e,Qo=a),0===(s=e.pendingLanes)&&(Go=null),function(e){if(it&&"function"==typeof it.onCommitFiberRoot)try{it.onCommitFiberRoot(at,e,void 0,!(128&~e.current.flags))}catch(e){}}(r.stateNode),au(e,Ke()),null!==t)for(n=e.onRecoverableError,r=0;r<t.length;r++)n((a=t[r]).value,{componentStack:a.stack,digest:a.digest});if(Uo)throw Uo=!1,e=Wo,Wo=null,e;!!(1&Qo)&&0!==e.tag&&Eu(),1&(s=e.pendingLanes)?e===Jo?Ko++:(Ko=0,Jo=e):Ko=0,Ba()}(e,t,r,n)}finally{Po.transition=a,wt=n}return null}function Eu(){if(null!==Xo){var e=yt(Qo),t=Po.transition,r=wt;try{if(Po.transition=null,wt=16>e?16:e,null===Xo)var n=!1;else{if(e=Xo,Xo=null,Qo=0,6&Lo)throw Error(i(331));var a=Lo;for(Lo|=4,Jl=e.current;null!==Jl;){var s=Jl,l=s.child;if(16&Jl.flags){var o=s.deletions;if(null!==o){for(var u=0;u<o.length;u++){var c=o[u];for(Jl=c;null!==Jl;){var d=Jl;switch(d.tag){case 0:case 11:case 15:ro(8,d,s)}var p=d.child;if(null!==p)p.return=d,Jl=p;else for(;null!==Jl;){var f=(d=Jl).sibling,m=d.return;if(io(d),d===c){Jl=null;break}if(null!==f){f.return=m,Jl=f;break}Jl=m}}}var h=s.alternate;if(null!==h){var v=h.child;if(null!==v){h.child=null;do{var g=v.sibling;v.sibling=null,v=g}while(null!==v)}}Jl=s}}if(2064&s.subtreeFlags&&null!==l)l.return=s,Jl=l;else e:for(;null!==Jl;){if(2048&(s=Jl).flags)switch(s.tag){case 0:case 11:case 15:ro(9,s,s.return)}var b=s.sibling;if(null!==b){b.return=s.return,Jl=b;break e}Jl=s.return}}var w=e.current;for(Jl=w;null!==Jl;){var y=(l=Jl).child;if(2064&l.subtreeFlags&&null!==y)y.return=l,Jl=y;else e:for(l=w;null!==Jl;){if(2048&(o=Jl).flags)try{switch(o.tag){case 0:case 11:case 15:no(9,o)}}catch(e){Cu(o,o.return,e)}if(o===l){Jl=null;break e}var x=o.sibling;if(null!==x){x.return=o.return,Jl=x;break e}Jl=o.return}}if(Lo=a,Ba(),it&&"function"==typeof it.onPostCommitFiberRoot)try{it.onPostCommitFiberRoot(at,e)}catch(e){}n=!0}return n}finally{wt=r,Po.transition=t}}return!1}function ku(e,t,r){e=Ni(e,t=fl(0,t=ul(r,t),1),1),t=tu(),null!==e&&(gt(e,1,t),au(e,t))}function Cu(e,t,r){if(3===e.tag)ku(e,e,r);else for(;null!==t;){if(3===t.tag){ku(t,e,r);break}if(1===t.tag){var n=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof n.componentDidCatch&&(null===Go||!Go.has(n))){t=Ni(t,e=ml(t,e=ul(r,e),1),1),e=tu(),null!==t&&(gt(t,1,e),au(t,e));break}}t=t.return}}function Tu(e,t,r){var n=e.pingCache;null!==n&&n.delete(t),t=tu(),e.pingedLanes|=e.suspendedLanes&r,zo===e&&(Oo&r)===r&&(4===Ao||3===Ao&&(130023424&Oo)===Oo&&500>Ke()-Bo?fu(e,0):$o|=r),au(e,t)}function Mu(e,t){0===t&&(1&e.mode?(t=ct,!(130023424&(ct<<=1))&&(ct=4194304)):t=1);var r=tu();null!==(e=Li(e,t))&&(gt(e,t,r),au(e,r))}function Pu(e){var t=e.memoizedState,r=0;null!==t&&(r=t.retryLane),Mu(e,r)}function Lu(e,t){var r=0;switch(e.tag){case 13:var n=e.stateNode,a=e.memoizedState;null!==a&&(r=a.retryLane);break;case 19:n=e.stateNode;break;default:throw Error(i(314))}null!==n&&n.delete(t),Mu(e,r)}function zu(e,t){return Ge(e,t)}function _u(e,t,r,n){this.tag=e,this.key=r,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=n,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Ou(e,t,r,n){return new _u(e,t,r,n)}function Du(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Nu(e,t){var r=e.alternate;return null===r?((r=Ou(e.tag,t,e.key,e.mode)).elementType=e.elementType,r.type=e.type,r.stateNode=e.stateNode,r.alternate=e,e.alternate=r):(r.pendingProps=t,r.type=e.type,r.flags=0,r.subtreeFlags=0,r.deletions=null),r.flags=14680064&e.flags,r.childLanes=e.childLanes,r.lanes=e.lanes,r.child=e.child,r.memoizedProps=e.memoizedProps,r.memoizedState=e.memoizedState,r.updateQueue=e.updateQueue,t=e.dependencies,r.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},r.sibling=e.sibling,r.index=e.index,r.ref=e.ref,r}function Au(e,t,r,n,a,s){var l=2;if(n=e,"function"==typeof e)Du(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case E:return Iu(r.children,a,s,t);case k:l=8,a|=8;break;case C:return(e=Ou(12,r,t,2|a)).elementType=C,e.lanes=s,e;case L:return(e=Ou(13,r,t,a)).elementType=L,e.lanes=s,e;case z:return(e=Ou(19,r,t,a)).elementType=z,e.lanes=s,e;case D:return Ru(r,a,s,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case T:l=10;break e;case M:l=9;break e;case P:l=11;break e;case _:l=14;break e;case O:l=16,n=null;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=Ou(l,r,t,a)).elementType=e,t.type=n,t.lanes=s,t}function Iu(e,t,r,n){return(e=Ou(7,e,n,t)).lanes=r,e}function Ru(e,t,r,n){return(e=Ou(22,e,n,t)).elementType=D,e.lanes=r,e.stateNode={isHidden:!1},e}function ju(e,t,r){return(e=Ou(6,e,null,t)).lanes=r,e}function $u(e,t,r){return(t=Ou(4,null!==e.children?e.children:[],e.key,t)).lanes=r,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function qu(e,t,r,n,a){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=vt(0),this.expirationTimes=vt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=vt(0),this.identifierPrefix=n,this.onRecoverableError=a,this.mutableSourceEagerHydrationData=null}function Fu(e,t,r,n,a,i,s,l,o){return e=new qu(e,t,r,l,o),1===t?(t=1,!0===i&&(t|=8)):t=0,i=Ou(3,null,null,t),e.current=i,i.stateNode=e,i.memoizedState={element:n,isDehydrated:r,cache:null,transitions:null,pendingSuspenseBoundaries:null},_i(i),e}function Bu(e){if(!e)return Ma;e:{if(Be(e=e._reactInternals)!==e||1!==e.tag)throw Error(i(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Oa(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(i(171))}if(1===e.tag){var r=e.type;if(Oa(r))return Aa(e,r,t)}return t}function Hu(e,t,r,n,a,i,s,l,o){return(e=Fu(r,n,!0,e,0,i,0,l,o)).context=Bu(null),r=e.current,(i=Di(n=tu(),a=ru(r))).callback=null!=t?t:null,Ni(r,i,a),e.current.lanes=a,gt(e,a,n),au(e,n),e}function Vu(e,t,r,n){var a=t.current,i=tu(),s=ru(a);return r=Bu(r),null===t.context?t.context=r:t.pendingContext=r,(t=Di(i,s)).payload={element:e},null!==(n=void 0===n?null:n)&&(t.callback=n),null!==(e=Ni(a,t,s))&&(nu(e,a,s,i),Ai(e,a,s)),s}function Uu(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Wu(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var r=e.retryLane;e.retryLane=0!==r&&r<t?r:t}}function Gu(e,t){Wu(e,t),(e=e.alternate)&&Wu(e,t)}ko=function(e,t,r){if(null!==e)if(e.memoizedProps!==t.pendingProps||La.current)wl=!0;else{if(!(e.lanes&r||128&t.flags))return wl=!1,function(e,t,r){switch(t.tag){case 3:Ll(t),fi();break;case 5:is(t);break;case 1:Oa(t.type)&&Ia(t);break;case 4:ns(t,t.stateNode.containerInfo);break;case 10:var n=t.type._context,a=t.memoizedProps.value;Ta(gi,n._currentValue),n._currentValue=a;break;case 13:if(null!==(n=t.memoizedState))return null!==n.dehydrated?(Ta(ls,1&ls.current),t.flags|=128,null):r&t.child.childLanes?Rl(e,t,r):(Ta(ls,1&ls.current),null!==(e=Vl(e,t,r))?e.sibling:null);Ta(ls,1&ls.current);break;case 19:if(n=!!(r&t.childLanes),128&e.flags){if(n)return Bl(e,t,r);t.flags|=128}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),Ta(ls,ls.current),n)break;return null;case 22:case 23:return t.lanes=0,kl(e,t,r)}return Vl(e,t,r)}(e,t,r);wl=!!(131072&e.flags)}else wl=!1,ai&&1048576&t.flags&&Za(t,Wa,t.index);switch(t.lanes=0,t.tag){case 2:var n=t.type;Hl(e,t),e=t.pendingProps;var a=_a(t,Pa.current);ki(t,r),a=Es(null,t,n,e,a,r);var s=ks();return t.flags|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Oa(n)?(s=!0,Ia(t)):s=!1,t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,_i(t),a.updater=Fi,t.stateNode=a,a._reactInternals=t,Ui(t,n,e,r),t=Pl(null,t,n,!0,s,r)):(t.tag=0,ai&&s&&ei(t),yl(null,t,a,r),t=t.child),t;case 16:n=t.elementType;e:{switch(Hl(e,t),e=t.pendingProps,n=(a=n._init)(n._payload),t.type=n,a=t.tag=function(e){if("function"==typeof e)return Du(e)?1:0;if(null!=e){if((e=e.$$typeof)===P)return 11;if(e===_)return 14}return 2}(n),e=vi(n,e),a){case 0:t=Tl(null,t,n,e,r);break e;case 1:t=Ml(null,t,n,e,r);break e;case 11:t=xl(null,t,n,e,r);break e;case 14:t=Sl(null,t,n,vi(n.type,e),r);break e}throw Error(i(306,n,""))}return t;case 0:return n=t.type,a=t.pendingProps,Tl(e,t,n,a=t.elementType===n?a:vi(n,a),r);case 1:return n=t.type,a=t.pendingProps,Ml(e,t,n,a=t.elementType===n?a:vi(n,a),r);case 3:e:{if(Ll(t),null===e)throw Error(i(387));n=t.pendingProps,a=(s=t.memoizedState).element,Oi(e,t),Ri(t,n,null,r);var l=t.memoizedState;if(n=l.element,s.isDehydrated){if(s={element:n,isDehydrated:!1,cache:l.cache,pendingSuspenseBoundaries:l.pendingSuspenseBoundaries,transitions:l.transitions},t.updateQueue.baseState=s,t.memoizedState=s,256&t.flags){t=zl(e,t,n,r,a=ul(Error(i(423)),t));break e}if(n!==a){t=zl(e,t,n,r,a=ul(Error(i(424)),t));break e}for(ni=ua(t.stateNode.containerInfo.firstChild),ri=t,ai=!0,ii=null,r=Ki(t,null,n,r),t.child=r;r;)r.flags=-3&r.flags|4096,r=r.sibling}else{if(fi(),n===a){t=Vl(e,t,r);break e}yl(e,t,n,r)}t=t.child}return t;case 5:return is(t),null===e&&ui(t),n=t.type,a=t.pendingProps,s=null!==e?e.memoizedProps:null,l=a.children,ra(n,a)?l=null:null!==s&&ra(n,s)&&(t.flags|=32),Cl(e,t),yl(e,t,l,r),t.child;case 6:return null===e&&ui(t),null;case 13:return Rl(e,t,r);case 4:return ns(t,t.stateNode.containerInfo),n=t.pendingProps,null===e?t.child=Qi(t,null,n,r):yl(e,t,n,r),t.child;case 11:return n=t.type,a=t.pendingProps,xl(e,t,n,a=t.elementType===n?a:vi(n,a),r);case 7:return yl(e,t,t.pendingProps,r),t.child;case 8:case 12:return yl(e,t,t.pendingProps.children,r),t.child;case 10:e:{if(n=t.type._context,a=t.pendingProps,s=t.memoizedProps,l=a.value,Ta(gi,n._currentValue),n._currentValue=l,null!==s)if(ln(s.value,l)){if(s.children===a.children&&!La.current){t=Vl(e,t,r);break e}}else for(null!==(s=t.child)&&(s.return=t);null!==s;){var o=s.dependencies;if(null!==o){l=s.child;for(var u=o.firstContext;null!==u;){if(u.context===n){if(1===s.tag){(u=Di(-1,r&-r)).tag=2;var c=s.updateQueue;if(null!==c){var d=(c=c.shared).pending;null===d?u.next=u:(u.next=d.next,d.next=u),c.pending=u}}s.lanes|=r,null!==(u=s.alternate)&&(u.lanes|=r),Ei(s.return,r,t),o.lanes|=r;break}u=u.next}}else if(10===s.tag)l=s.type===t.type?null:s.child;else if(18===s.tag){if(null===(l=s.return))throw Error(i(341));l.lanes|=r,null!==(o=l.alternate)&&(o.lanes|=r),Ei(l,r,t),l=s.sibling}else l=s.child;if(null!==l)l.return=s;else for(l=s;null!==l;){if(l===t){l=null;break}if(null!==(s=l.sibling)){s.return=l.return,l=s;break}l=l.return}s=l}yl(e,t,a.children,r),t=t.child}return t;case 9:return a=t.type,n=t.pendingProps.children,ki(t,r),n=n(a=Ci(a)),t.flags|=1,yl(e,t,n,r),t.child;case 14:return a=vi(n=t.type,t.pendingProps),Sl(e,t,n,a=vi(n.type,a),r);case 15:return El(e,t,t.type,t.pendingProps,r);case 17:return n=t.type,a=t.pendingProps,a=t.elementType===n?a:vi(n,a),Hl(e,t),t.tag=1,Oa(n)?(e=!0,Ia(t)):e=!1,ki(t,r),Hi(t,n,a),Ui(t,n,a,r),Pl(null,t,n,!0,e,r);case 19:return Bl(e,t,r);case 22:return kl(e,t,r)}throw Error(i(156,t.tag))};var Yu="function"==typeof reportError?reportError:function(e){console.error(e)};function Xu(e){this._internalRoot=e}function Qu(e){this._internalRoot=e}function Ku(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Ju(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Zu(){}function ec(e,t,r,n,a){var i=r._reactRootContainer;if(i){var s=i;if("function"==typeof a){var l=a;a=function(){var e=Uu(s);l.call(e)}}Vu(t,s,e,a)}else s=function(e,t,r,n,a){if(a){if("function"==typeof n){var i=n;n=function(){var e=Uu(s);i.call(e)}}var s=Hu(t,n,e,0,null,!1,0,"",Zu);return e._reactRootContainer=s,e[ma]=s.current,Bn(8===e.nodeType?e.parentNode:e),du(),s}for(;a=e.lastChild;)e.removeChild(a);if("function"==typeof n){var l=n;n=function(){var e=Uu(o);l.call(e)}}var o=Fu(e,0,!1,null,0,!1,0,"",Zu);return e._reactRootContainer=o,e[ma]=o.current,Bn(8===e.nodeType?e.parentNode:e),du((function(){Vu(t,o,r,n)})),o}(r,t,e,a,n);return Uu(s)}Qu.prototype.render=Xu.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(i(409));Vu(e,t,null,null)},Qu.prototype.unmount=Xu.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;du((function(){Vu(null,e,null,null)})),t[ma]=null}},Qu.prototype.unstable_scheduleHydration=function(e){if(e){var t=kt();e={blockedOn:null,target:e,priority:t};for(var r=0;r<Dt.length&&0!==t&&t<Dt[r].priority;r++);Dt.splice(r,0,e),0===r&&Rt(e)}},xt=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var r=dt(t.pendingLanes);0!==r&&(bt(t,1|r),au(t,Ke()),!(6&Lo)&&(Ho=Ke()+500,Ba()))}break;case 13:du((function(){var t=Li(e,1);if(null!==t){var r=tu();nu(t,e,1,r)}})),Gu(e,1)}},St=function(e){if(13===e.tag){var t=Li(e,134217728);null!==t&&nu(t,e,134217728,tu()),Gu(e,134217728)}},Et=function(e){if(13===e.tag){var t=ru(e),r=Li(e,t);null!==r&&nu(r,e,t,tu()),Gu(e,t)}},kt=function(){return wt},Ct=function(e,t){var r=wt;try{return wt=e,t()}finally{wt=r}},Se=function(e,t,r){switch(t){case"input":if(J(e,r),t=r.name,"radio"===r.type&&null!=t){for(r=e;r.parentNode;)r=r.parentNode;for(r=r.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<r.length;t++){var n=r[t];if(n!==e&&n.form===e.form){var a=xa(n);if(!a)throw Error(i(90));G(n),J(n,a)}}}break;case"textarea":ie(e,r);break;case"select":null!=(t=r.value)&&re(e,!!r.multiple,t,!1)}},Pe=cu,Le=du;var tc={usingClientEntryPoint:!1,Events:[wa,ya,xa,Te,Me,cu]},rc={findFiberByHostInstance:ba,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},nc={bundleType:rc.bundleType,version:rc.version,rendererPackageName:rc.rendererPackageName,rendererConfig:rc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:y.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ue(e))?null:e.stateNode},findFiberByHostInstance:rc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var ac=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!ac.isDisabled&&ac.supportsFiber)try{at=ac.inject(nc),it=ac}catch(ce){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=tc,t.createPortal=function(e,t){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Ku(t))throw Error(i(200));return function(e,t,r){var n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:S,key:null==n?null:""+n,children:e,containerInfo:t,implementation:r}}(e,t,null,r)},t.createRoot=function(e,t){if(!Ku(e))throw Error(i(299));var r=!1,n="",a=Yu;return null!=t&&(!0===t.unstable_strictMode&&(r=!0),void 0!==t.identifierPrefix&&(n=t.identifierPrefix),void 0!==t.onRecoverableError&&(a=t.onRecoverableError)),t=Fu(e,1,!1,null,0,r,0,n,a),e[ma]=t.current,Bn(8===e.nodeType?e.parentNode:e),new Xu(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(i(188));throw e=Object.keys(e).join(","),Error(i(268,e))}return null===(e=Ue(t))?null:e.stateNode},t.flushSync=function(e){return du(e)},t.hydrate=function(e,t,r){if(!Ju(t))throw Error(i(200));return ec(null,e,t,!0,r)},t.hydrateRoot=function(e,t,r){if(!Ku(e))throw Error(i(405));var n=null!=r&&r.hydratedSources||null,a=!1,s="",l=Yu;if(null!=r&&(!0===r.unstable_strictMode&&(a=!0),void 0!==r.identifierPrefix&&(s=r.identifierPrefix),void 0!==r.onRecoverableError&&(l=r.onRecoverableError)),t=Hu(t,null,e,1,null!=r?r:null,a,0,s,l),e[ma]=t.current,Bn(e),n)for(e=0;e<n.length;e++)a=(a=(r=n[e])._getVersion)(r._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[r,a]:t.mutableSourceEagerHydrationData.push(r,a);return new Qu(t)},t.render=function(e,t,r){if(!Ju(t))throw Error(i(200));return ec(null,e,t,!1,r)},t.unmountComponentAtNode=function(e){if(!Ju(e))throw Error(i(40));return!!e._reactRootContainer&&(du((function(){ec(null,null,e,!1,(function(){e._reactRootContainer=null,e[ma]=null}))})),!0)},t.unstable_batchedUpdates=cu,t.unstable_renderSubtreeIntoContainer=function(e,t,r,n){if(!Ju(r))throw Error(i(200));if(null==e||void 0===e._reactInternals)throw Error(i(38));return ec(e,t,r,!1,n)},t.version="18.2.0-next-9e3b772b8-20220608"},338:(e,t,r)=>{"use strict";var n=r(961);t.createRoot=n.createRoot,t.hydrateRoot=n.hydrateRoot},961:(e,t,r)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=r(551)},20:(e,t,r)=>{"use strict";var n=r(540),a=Symbol.for("react.element"),i=(Symbol.for("react.fragment"),Object.prototype.hasOwnProperty),s=n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l={key:!0,ref:!0,__self:!0,__source:!0};function o(e,t,r){var n,o={},u=null,c=null;for(n in void 0!==r&&(u=""+r),void 0!==t.key&&(u=""+t.key),void 0!==t.ref&&(c=t.ref),t)i.call(t,n)&&!l.hasOwnProperty(n)&&(o[n]=t[n]);if(e&&e.defaultProps)for(n in t=e.defaultProps)void 0===o[n]&&(o[n]=t[n]);return{$$typeof:a,type:e,key:u,ref:c,props:o,_owner:s.current}}t.jsx=o,t.jsxs=o},287:(e,t)=>{"use strict";var r=Symbol.for("react.element"),n=Symbol.for("react.portal"),a=Symbol.for("react.fragment"),i=Symbol.for("react.strict_mode"),s=Symbol.for("react.profiler"),l=Symbol.for("react.provider"),o=Symbol.for("react.context"),u=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),p=Symbol.for("react.lazy"),f=Symbol.iterator,m={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},h=Object.assign,v={};function g(e,t,r){this.props=e,this.context=t,this.refs=v,this.updater=r||m}function b(){}function w(e,t,r){this.props=e,this.context=t,this.refs=v,this.updater=r||m}g.prototype.isReactComponent={},g.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},g.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},b.prototype=g.prototype;var y=w.prototype=new b;y.constructor=w,h(y,g.prototype),y.isPureReactComponent=!0;var x=Array.isArray,S=Object.prototype.hasOwnProperty,E={current:null},k={key:!0,ref:!0,__self:!0,__source:!0};function C(e,t,n){var a,i={},s=null,l=null;if(null!=t)for(a in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(s=""+t.key),t)S.call(t,a)&&!k.hasOwnProperty(a)&&(i[a]=t[a]);var o=arguments.length-2;if(1===o)i.children=n;else if(1<o){for(var u=Array(o),c=0;c<o;c++)u[c]=arguments[c+2];i.children=u}if(e&&e.defaultProps)for(a in o=e.defaultProps)void 0===i[a]&&(i[a]=o[a]);return{$$typeof:r,type:e,key:s,ref:l,props:i,_owner:E.current}}function T(e){return"object"==typeof e&&null!==e&&e.$$typeof===r}var M=/\/+/g;function P(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function L(e,t,a,i,s){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var o=!1;if(null===e)o=!0;else switch(l){case"string":case"number":o=!0;break;case"object":switch(e.$$typeof){case r:case n:o=!0}}if(o)return s=s(o=e),e=""===i?"."+P(o,0):i,x(s)?(a="",null!=e&&(a=e.replace(M,"$&/")+"/"),L(s,t,a,"",(function(e){return e}))):null!=s&&(T(s)&&(s=function(e,t){return{$$typeof:r,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(s,a+(!s.key||o&&o.key===s.key?"":(""+s.key).replace(M,"$&/")+"/")+e)),t.push(s)),1;if(o=0,i=""===i?".":i+":",x(e))for(var u=0;u<e.length;u++){var c=i+P(l=e[u],u);o+=L(l,t,a,c,s)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=f&&e[f]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),u=0;!(l=e.next()).done;)o+=L(l=l.value,t,a,c=i+P(l,u++),s);else if("object"===l)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return o}function z(e,t,r){if(null==e)return e;var n=[],a=0;return L(e,n,"","",(function(e){return t.call(r,e,a++)})),n}function _(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var O={current:null},D={transition:null},N={ReactCurrentDispatcher:O,ReactCurrentBatchConfig:D,ReactCurrentOwner:E};t.Children={map:z,forEach:function(e,t,r){z(e,(function(){t.apply(this,arguments)}),r)},count:function(e){var t=0;return z(e,(function(){t++})),t},toArray:function(e){return z(e,(function(e){return e}))||[]},only:function(e){if(!T(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=g,t.Fragment=a,t.Profiler=s,t.PureComponent=w,t.StrictMode=i,t.Suspense=c,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=N,t.cloneElement=function(e,t,n){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var a=h({},e.props),i=e.key,s=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(s=t.ref,l=E.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var o=e.type.defaultProps;for(u in t)S.call(t,u)&&!k.hasOwnProperty(u)&&(a[u]=void 0===t[u]&&void 0!==o?o[u]:t[u])}var u=arguments.length-2;if(1===u)a.children=n;else if(1<u){o=Array(u);for(var c=0;c<u;c++)o[c]=arguments[c+2];a.children=o}return{$$typeof:r,type:e.type,key:i,ref:s,props:a,_owner:l}},t.createContext=function(e){return(e={$$typeof:o,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:l,_context:e},e.Consumer=e},t.createElement=C,t.createFactory=function(e){var t=C.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=T,t.lazy=function(e){return{$$typeof:p,_payload:{_status:-1,_result:e},_init:_}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=D.transition;D.transition={};try{e()}finally{D.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return O.current.useCallback(e,t)},t.useContext=function(e){return O.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return O.current.useDeferredValue(e)},t.useEffect=function(e,t){return O.current.useEffect(e,t)},t.useId=function(){return O.current.useId()},t.useImperativeHandle=function(e,t,r){return O.current.useImperativeHandle(e,t,r)},t.useInsertionEffect=function(e,t){return O.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return O.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return O.current.useMemo(e,t)},t.useReducer=function(e,t,r){return O.current.useReducer(e,t,r)},t.useRef=function(e){return O.current.useRef(e)},t.useState=function(e){return O.current.useState(e)},t.useSyncExternalStore=function(e,t,r){return O.current.useSyncExternalStore(e,t,r)},t.useTransition=function(){return O.current.useTransition()},t.version="18.2.0"},540:(e,t,r)=>{"use strict";e.exports=r(287)},848:(e,t,r)=>{"use strict";e.exports=r(20)},463:(e,t)=>{"use strict";function r(e,t){var r=e.length;e.push(t);e:for(;0<r;){var n=r-1>>>1,a=e[n];if(!(0<i(a,t)))break e;e[n]=t,e[r]=a,r=n}}function n(e){return 0===e.length?null:e[0]}function a(e){if(0===e.length)return null;var t=e[0],r=e.pop();if(r!==t){e[0]=r;e:for(var n=0,a=e.length,s=a>>>1;n<s;){var l=2*(n+1)-1,o=e[l],u=l+1,c=e[u];if(0>i(o,r))u<a&&0>i(c,o)?(e[n]=c,e[u]=r,n=u):(e[n]=o,e[l]=r,n=l);else{if(!(u<a&&0>i(c,r)))break e;e[n]=c,e[u]=r,n=u}}}return t}function i(e,t){var r=e.sortIndex-t.sortIndex;return 0!==r?r:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var s=performance;t.unstable_now=function(){return s.now()}}else{var l=Date,o=l.now();t.unstable_now=function(){return l.now()-o}}var u=[],c=[],d=1,p=null,f=3,m=!1,h=!1,v=!1,g="function"==typeof setTimeout?setTimeout:null,b="function"==typeof clearTimeout?clearTimeout:null,w="undefined"!=typeof setImmediate?setImmediate:null;function y(e){for(var t=n(c);null!==t;){if(null===t.callback)a(c);else{if(!(t.startTime<=e))break;a(c),t.sortIndex=t.expirationTime,r(u,t)}t=n(c)}}function x(e){if(v=!1,y(e),!h)if(null!==n(u))h=!0,D(S);else{var t=n(c);null!==t&&N(x,t.startTime-e)}}function S(e,r){h=!1,v&&(v=!1,b(T),T=-1),m=!0;var i=f;try{for(y(r),p=n(u);null!==p&&(!(p.expirationTime>r)||e&&!L());){var s=p.callback;if("function"==typeof s){p.callback=null,f=p.priorityLevel;var l=s(p.expirationTime<=r);r=t.unstable_now(),"function"==typeof l?p.callback=l:p===n(u)&&a(u),y(r)}else a(u);p=n(u)}if(null!==p)var o=!0;else{var d=n(c);null!==d&&N(x,d.startTime-r),o=!1}return o}finally{p=null,f=i,m=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var E,k=!1,C=null,T=-1,M=5,P=-1;function L(){return!(t.unstable_now()-P<M)}function z(){if(null!==C){var e=t.unstable_now();P=e;var r=!0;try{r=C(!0,e)}finally{r?E():(k=!1,C=null)}}else k=!1}if("function"==typeof w)E=function(){w(z)};else if("undefined"!=typeof MessageChannel){var _=new MessageChannel,O=_.port2;_.port1.onmessage=z,E=function(){O.postMessage(null)}}else E=function(){g(z,0)};function D(e){C=e,k||(k=!0,E())}function N(e,r){T=g((function(){e(t.unstable_now())}),r)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){h||m||(h=!0,D(S))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):M=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return f},t.unstable_getFirstCallbackNode=function(){return n(u)},t.unstable_next=function(e){switch(f){case 1:case 2:case 3:var t=3;break;default:t=f}var r=f;f=t;try{return e()}finally{f=r}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var r=f;f=e;try{return t()}finally{f=r}},t.unstable_scheduleCallback=function(e,a,i){var s=t.unstable_now();switch(i="object"==typeof i&&null!==i&&"number"==typeof(i=i.delay)&&0<i?s+i:s,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:d++,callback:a,priorityLevel:e,startTime:i,expirationTime:l=i+l,sortIndex:-1},i>s?(e.sortIndex=i,r(c,e),null===n(u)&&e===n(c)&&(v?(b(T),T=-1):v=!0,N(x,i-s))):(e.sortIndex=l,r(u,e),h||m||(h=!0,D(S))),e},t.unstable_shouldYield=L,t.unstable_wrapCallback=function(e){var t=f;return function(){var r=f;f=t;try{return e.apply(this,arguments)}finally{f=r}}}},982:(e,t,r)=>{"use strict";e.exports=r(463)},942:(e,t)=>{var r;!function(){"use strict";var n={}.hasOwnProperty;function a(){for(var e="",t=0;t<arguments.length;t++){var r=arguments[t];r&&(e=s(e,i(r)))}return e}function i(e){if("string"==typeof e||"number"==typeof e)return e;if("object"!=typeof e)return"";if(Array.isArray(e))return a.apply(null,e);if(e.toString!==Object.prototype.toString&&!e.toString.toString().includes("[native code]"))return e.toString();var t="";for(var r in e)n.call(e,r)&&e[r]&&(t=s(t,r));return t}function s(e,t){return t?e?e+" "+t:e+t:e}e.exports?(a.default=a,e.exports=a):void 0===(r=function(){return a}.apply(t,[]))||(e.exports=r)}()}},n={};function a(e){var t=n[e];if(void 0!==t)return t.exports;var i=n[e]={exports:{}};return r[e](i,i.exports,a),i.exports}a.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return a.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,a.t=function(r,n){if(1&n&&(r=this(r)),8&n)return r;if("object"==typeof r&&r){if(4&n&&r.__esModule)return r;if(16&n&&"function"==typeof r.then)return r}var i=Object.create(null);a.r(i);var s={};e=e||[null,t({}),t([]),t(t)];for(var l=2&n&&r;"object"==typeof l&&!~e.indexOf(l);l=t(l))Object.getOwnPropertyNames(l).forEach((e=>s[e]=()=>r[e]));return s.default=()=>r,a.d(i,s),i},a.d=(e,t)=>{for(var r in t)a.o(t,r)&&!a.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},a.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;a.g.importScripts&&(e=a.g.location+"");var t=a.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");if(r.length)for(var n=r.length-1;n>-1&&(!e||!/^http(s?):/.test(e));)e=r[n--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),a.p=e})(),(()=>{"use strict";var e,t=a(540),r=a.t(t,2),n=a(961),i=a.t(n,2);function s(){return s=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},s.apply(this,arguments)}!function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(e||(e={}));const l="popstate";function o(e,t){if(!1===e||null==e)throw new Error(t)}function u(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function c(e,t){return{usr:e.state,key:e.key,idx:t}}function d(e,t,r,n){return void 0===r&&(r=null),s({pathname:"string"==typeof e?e:e.pathname,search:"",hash:""},"string"==typeof t?f(t):t,{state:r,key:t&&t.key||n||Math.random().toString(36).substr(2,8)})}function p(e){let{pathname:t="/",search:r="",hash:n=""}=e;return r&&"?"!==r&&(t+="?"===r.charAt(0)?r:"?"+r),n&&"#"!==n&&(t+="#"===n.charAt(0)?n:"#"+n),t}function f(e){let t={};if(e){let r=e.indexOf("#");r>=0&&(t.hash=e.substr(r),e=e.substr(0,r));let n=e.indexOf("?");n>=0&&(t.search=e.substr(n),e=e.substr(0,n)),e&&(t.pathname=e)}return t}function m(t,r,n,a){void 0===a&&(a={});let{window:i=document.defaultView,v5Compat:u=!1}=a,f=i.history,m=e.Pop,h=null,v=g();function g(){return(f.state||{idx:null}).idx}function b(){m=e.Pop;let t=g(),r=null==t?null:t-v;v=t,h&&h({action:m,location:y.location,delta:r})}function w(e){let t="null"!==i.location.origin?i.location.origin:i.location.href,r="string"==typeof e?e:p(e);return r=r.replace(/ $/,"%20"),o(t,"No window.location.(origin|href) available to create URL for href: "+r),new URL(r,t)}null==v&&(v=0,f.replaceState(s({},f.state,{idx:v}),""));let y={get action(){return m},get location(){return t(i,f)},listen(e){if(h)throw new Error("A history only accepts one active listener");return i.addEventListener(l,b),h=e,()=>{i.removeEventListener(l,b),h=null}},createHref:e=>r(i,e),createURL:w,encodeLocation(e){let t=w(e);return{pathname:t.pathname,search:t.search,hash:t.hash}},push:function(t,r){m=e.Push;let a=d(y.location,t,r);n&&n(a,t),v=g()+1;let s=c(a,v),l=y.createHref(a);try{f.pushState(s,"",l)}catch(e){if(e instanceof DOMException&&"DataCloneError"===e.name)throw e;i.location.assign(l)}u&&h&&h({action:m,location:y.location,delta:1})},replace:function(t,r){m=e.Replace;let a=d(y.location,t,r);n&&n(a,t),v=g();let i=c(a,v),s=y.createHref(a);f.replaceState(i,"",s),u&&h&&h({action:m,location:y.location,delta:0})},go:e=>f.go(e)};return y}var h;!function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"}(h||(h={}));const v=new Set(["lazy","caseSensitive","path","id","index","children"]);function g(e,t,r,n){return void 0===r&&(r=[]),void 0===n&&(n={}),e.map(((e,a)=>{let i=[...r,a],l="string"==typeof e.id?e.id:i.join("-");if(o(!0!==e.index||!e.children,"Cannot specify children on an index route"),o(!n[l],'Found a route id collision on id "'+l+"\".  Route id's must be globally unique within Data Router usages"),function(e){return!0===e.index}(e)){let r=s({},e,t(e),{id:l});return n[l]=r,r}{let r=s({},e,t(e),{id:l,children:void 0});return n[l]=r,e.children&&(r.children=g(e.children,t,i,n)),r}}))}function b(e,t,r){void 0===r&&(r="/");let n=O(("string"==typeof t?f(t):t).pathname||"/",r);if(null==n)return null;let a=w(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){return e.length===t.length&&e.slice(0,-1).every(((e,r)=>e===t[r]))?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(a);let i=null;for(let e=0;null==i&&e<a.length;++e){let t=_(n);i=L(a[e],t)}return i}function w(e,t,r,n){void 0===t&&(t=[]),void 0===r&&(r=[]),void 0===n&&(n="");let a=(e,a,i)=>{let s={relativePath:void 0===i?e.path||"":i,caseSensitive:!0===e.caseSensitive,childrenIndex:a,route:e};s.relativePath.startsWith("/")&&(o(s.relativePath.startsWith(n),'Absolute route path "'+s.relativePath+'" nested under path "'+n+'" is not valid. An absolute child route path must start with the combined path of all its parent routes.'),s.relativePath=s.relativePath.slice(n.length));let l=R([n,s.relativePath]),u=r.concat(s);e.children&&e.children.length>0&&(o(!0!==e.index,'Index routes must not have child routes. Please remove all child routes from route path "'+l+'".'),w(e.children,t,u,l)),(null!=e.path||e.index)&&t.push({path:l,score:P(l,e.index),routesMeta:u})};return e.forEach(((e,t)=>{var r;if(""!==e.path&&null!=(r=e.path)&&r.includes("?"))for(let r of y(e.path))a(e,t,r);else a(e,t)})),t}function y(e){let t=e.split("/");if(0===t.length)return[];let[r,...n]=t,a=r.endsWith("?"),i=r.replace(/\?$/,"");if(0===n.length)return a?[i,""]:[i];let s=y(n.join("/")),l=[];return l.push(...s.map((e=>""===e?i:[i,e].join("/")))),a&&l.push(...s),l.map((t=>e.startsWith("/")&&""===t?"/":t))}const x=/^:[\w-]+$/,S=3,E=2,k=1,C=10,T=-2,M=e=>"*"===e;function P(e,t){let r=e.split("/"),n=r.length;return r.some(M)&&(n+=T),t&&(n+=E),r.filter((e=>!M(e))).reduce(((e,t)=>e+(x.test(t)?S:""===t?k:C)),n)}function L(e,t){let{routesMeta:r}=e,n={},a="/",i=[];for(let e=0;e<r.length;++e){let s=r[e],l=e===r.length-1,o="/"===a?t:t.slice(a.length)||"/",u=z({path:s.relativePath,caseSensitive:s.caseSensitive,end:l},o);if(!u)return null;Object.assign(n,u.params);let c=s.route;i.push({params:n,pathname:R([a,u.pathname]),pathnameBase:j(R([a,u.pathnameBase])),route:c}),"/"!==u.pathnameBase&&(a=R([a,u.pathnameBase]))}return i}function z(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[r,n]=function(e,t,r){void 0===t&&(t=!1),void 0===r&&(r=!0),u("*"===e||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were "'+e.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+e.replace(/\*$/,"/*")+'".');let n=[],a="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^${}|()[\]]/g,"\\$&").replace(/\/:([\w-]+)(\?)?/g,((e,t,r)=>(n.push({paramName:t,isOptional:null!=r}),r?"/?([^\\/]+)?":"/([^\\/]+)")));return e.endsWith("*")?(n.push({paramName:"*"}),a+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):r?a+="\\/*$":""!==e&&"/"!==e&&(a+="(?:(?=\\/|$))"),[new RegExp(a,t?void 0:"i"),n]}(e.path,e.caseSensitive,e.end),a=t.match(r);if(!a)return null;let i=a[0],s=i.replace(/(.)\/+$/,"$1"),l=a.slice(1);return{params:n.reduce(((e,t,r)=>{let{paramName:n,isOptional:a}=t;if("*"===n){let e=l[r]||"";s=i.slice(0,i.length-e.length).replace(/(.)\/+$/,"$1")}const o=l[r];return e[n]=a&&!o?void 0:(o||"").replace(/%2F/g,"/"),e}),{}),pathname:i,pathnameBase:s,pattern:e}}function _(e){try{return e.split("/").map((e=>decodeURIComponent(e).replace(/\//g,"%2F"))).join("/")}catch(t){return u(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding ('+t+")."),e}}function O(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let r=t.endsWith("/")?t.length-1:t.length,n=e.charAt(r);return n&&"/"!==n?null:e.slice(r)||"/"}function D(e,t,r,n){return"Cannot include a '"+e+"' character in a manually specified `to."+t+"` field ["+JSON.stringify(n)+"].  Please separate it out to the `to."+r+'` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.'}function N(e){return e.filter(((e,t)=>0===t||e.route.path&&e.route.path.length>0))}function A(e,t){let r=N(e);return t?r.map(((t,r)=>r===e.length-1?t.pathname:t.pathnameBase)):r.map((e=>e.pathnameBase))}function I(e,t,r,n){let a;void 0===n&&(n=!1),"string"==typeof e?a=f(e):(a=s({},e),o(!a.pathname||!a.pathname.includes("?"),D("?","pathname","search",a)),o(!a.pathname||!a.pathname.includes("#"),D("#","pathname","hash",a)),o(!a.search||!a.search.includes("#"),D("#","search","hash",a)));let i,l=""===e||""===a.pathname,u=l?"/":a.pathname;if(null==u)i=r;else{let e=t.length-1;if(!n&&u.startsWith("..")){let t=u.split("/");for(;".."===t[0];)t.shift(),e-=1;a.pathname=t.join("/")}i=e>=0?t[e]:"/"}let c=function(e,t){void 0===t&&(t="/");let{pathname:r,search:n="",hash:a=""}="string"==typeof e?f(e):e,i=r?r.startsWith("/")?r:function(e,t){let r=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?r.length>1&&r.pop():"."!==e&&r.push(e)})),r.length>1?r.join("/"):"/"}(r,t):t;return{pathname:i,search:$(n),hash:q(a)}}(a,i),d=u&&"/"!==u&&u.endsWith("/"),p=(l||"."===u)&&r.endsWith("/");return c.pathname.endsWith("/")||!d&&!p||(c.pathname+="/"),c}const R=e=>e.join("/").replace(/\/\/+/g,"/"),j=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),$=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",q=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";Error;class F{constructor(e,t,r,n){void 0===n&&(n=!1),this.status=e,this.statusText=t||"",this.internal=n,r instanceof Error?(this.data=r.toString(),this.error=r):this.data=r}}function B(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"boolean"==typeof e.internal&&"data"in e}const H=["post","put","patch","delete"],V=new Set(H),U=["get",...H],W=new Set(U),G=new Set([301,302,303,307,308]),Y=new Set([307,308]),X={state:"idle",location:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0},Q={state:"idle",data:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0},K={state:"unblocked",proceed:void 0,reset:void 0,location:void 0},J=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,Z=e=>({hasErrorBoundary:Boolean(e.hasErrorBoundary)}),ee="remix-router-transitions";function te(t){const r=t.window?t.window:"undefined"!=typeof window?window:void 0,n=void 0!==r&&void 0!==r.document&&void 0!==r.document.createElement,a=!n;let i;if(o(t.routes.length>0,"You must provide a non-empty routes array to createRouter"),t.mapRouteProperties)i=t.mapRouteProperties;else if(t.detectErrorBoundary){let e=t.detectErrorBoundary;i=t=>({hasErrorBoundary:e(t)})}else i=Z;let l,c,p={},f=g(t.routes,i,void 0,p),m=t.basename||"/",v=t.unstable_dataStrategy||oe,w=s({v7_fetcherPersist:!1,v7_normalizeFormMethod:!1,v7_partialHydration:!1,v7_prependBasename:!1,v7_relativeSplatPath:!1,unstable_skipActionErrorRevalidation:!1},t.future),y=null,x=new Set,S=null,E=null,k=null,C=null!=t.hydrationData,T=b(f,t.history.location,m),M=null;if(null==T){let e=we(404,{pathname:t.history.location.pathname}),{matches:r,route:n}=be(f);T=r,M={[n.id]:e}}let P,L=T.some((e=>e.route.lazy)),z=T.some((e=>e.route.loader));if(L)c=!1;else if(z)if(w.v7_partialHydration){let e=t.hydrationData?t.hydrationData.loaderData:null,r=t.hydrationData?t.hydrationData.errors:null,n=t=>!t.route.loader||("function"!=typeof t.route.loader||!0!==t.route.loader.hydrate)&&(e&&void 0!==e[t.route.id]||r&&void 0!==r[t.route.id]);if(r){let e=T.findIndex((e=>void 0!==r[e.route.id]));c=T.slice(0,e+1).every(n)}else c=T.every(n)}else c=null!=t.hydrationData;else c=!0;let _,D={historyAction:t.history.action,location:t.history.location,matches:T,initialized:c,navigation:X,restoreScrollPosition:null==t.hydrationData&&null,preventScrollReset:!1,revalidation:"idle",loaderData:t.hydrationData&&t.hydrationData.loaderData||{},actionData:t.hydrationData&&t.hydrationData.actionData||null,errors:t.hydrationData&&t.hydrationData.errors||M,fetchers:new Map,blockers:new Map},N=e.Pop,A=!1,I=!1,R=new Map,j=null,$=!1,q=!1,H=[],V=[],U=new Map,W=0,te=-1,ie=new Map,se=new Set,pe=new Map,fe=new Map,xe=new Set,Le=new Map,Ae=new Map,Ie=!1;function Re(e,t){void 0===t&&(t={}),D=s({},D,e);let r=[],n=[];w.v7_fetcherPersist&&D.fetchers.forEach(((e,t)=>{"idle"===e.state&&(xe.has(t)?n.push(t):r.push(t))})),[...x].forEach((e=>e(D,{deletedFetchers:n,unstable_viewTransitionOpts:t.viewTransitionOpts,unstable_flushSync:!0===t.flushSync}))),w.v7_fetcherPersist&&(r.forEach((e=>D.fetchers.delete(e))),n.forEach((e=>Ge(e))))}function je(r,n,a){var i,o;let u,{flushSync:c}=void 0===a?{}:a,d=null!=D.actionData&&null!=D.navigation.formMethod&&Te(D.navigation.formMethod)&&"loading"===D.navigation.state&&!0!==(null==(i=r.state)?void 0:i._isRedirect);u=n.actionData?Object.keys(n.actionData).length>0?n.actionData:null:d?D.actionData:null;let p=n.loaderData?he(D.loaderData,n.loaderData,n.matches||[],n.errors):D.loaderData,m=D.blockers;m.size>0&&(m=new Map(m),m.forEach(((e,t)=>m.set(t,K))));let h,v=!0===A||null!=D.navigation.formMethod&&Te(D.navigation.formMethod)&&!0!==(null==(o=r.state)?void 0:o._isRedirect);if(l&&(f=l,l=void 0),$||N===e.Pop||(N===e.Push?t.history.push(r,r.state):N===e.Replace&&t.history.replace(r,r.state)),N===e.Pop){let e=R.get(D.location.pathname);e&&e.has(r.pathname)?h={currentLocation:D.location,nextLocation:r}:R.has(r.pathname)&&(h={currentLocation:r,nextLocation:D.location})}else if(I){let e=R.get(D.location.pathname);e?e.add(r.pathname):(e=new Set([r.pathname]),R.set(D.location.pathname,e)),h={currentLocation:D.location,nextLocation:r}}Re(s({},n,{actionData:u,loaderData:p,historyAction:N,location:r,initialized:!0,navigation:X,revalidation:"idle",restoreScrollPosition:nt(r,n.matches||D.matches),preventScrollReset:v,blockers:m}),{viewTransitionOpts:h,flushSync:!0===c}),N=e.Pop,A=!1,I=!1,$=!1,q=!1,H=[],V=[]}async function $e(r,n,a){_&&_.abort(),_=null,N=r,$=!0===(a&&a.startUninterruptedRevalidation),function(e,t){if(S&&k){let r=rt(e,t);S[r]=k()}}(D.location,D.matches),A=!0===(a&&a.preventScrollReset),I=!0===(a&&a.enableViewTransition);let i=l||f,o=a&&a.overrideNavigation,u=b(i,n,m),c=!0===(a&&a.flushSync);if(!u){let e=we(404,{pathname:n.pathname}),{matches:t,route:r}=be(i);return tt(),void je(n,{matches:t,loaderData:{},errors:{[r.id]:e}},{flushSync:c})}if(D.initialized&&!q&&(d=D.location,p=n,d.pathname===p.pathname&&d.search===p.search&&(""===d.hash?""!==p.hash:d.hash===p.hash||""!==p.hash))&&!(a&&a.submission&&Te(a.submission.formMethod)))return void je(n,{matches:u},{flushSync:c});var d,p;_=new AbortController;let v,g=de(t.history,n,_.signal,a&&a.submission);if(a&&a.pendingError)v=[ge(u).route.id,{type:h.error,error:a.pendingError}];else if(a&&a.submission&&Te(a.submission.formMethod)){let r=await async function(t,r,n,a,i){void 0===i&&(i={}),He();let s,l=function(e,t){return{state:"submitting",location:e,formMethod:t.formMethod,formAction:t.formAction,formEncType:t.formEncType,formData:t.formData,json:t.json,text:t.text}}(r,n);Re({navigation:l},{flushSync:!0===i.flushSync});let o=ze(a,r);if(o.route.action||o.route.lazy){if(s=(await Fe("action",t,[o],a))[0],t.signal.aborted)return{shortCircuited:!0}}else s={type:h.error,error:we(405,{method:t.method,pathname:r.pathname,routeId:o.route.id})};if(ke(s)){let e;return e=i&&null!=i.replace?i.replace:ce(s.response.headers.get("Location"),new URL(t.url),m)===D.location.pathname+D.location.search,await qe(t,s,{submission:n,replace:e}),{shortCircuited:!0}}if(Se(s))throw we(400,{type:"defer-action"});if(Ee(s)){let t=ge(a,o.route.id);return!0!==(i&&i.replace)&&(N=e.Push),{pendingActionResult:[t.route.id,s]}}return{pendingActionResult:[o.route.id,s]}}(g,n,a.submission,u,{replace:a.replace,flushSync:c});if(r.shortCircuited)return;v=r.pendingActionResult,o=Oe(n,a.submission),c=!1,g=de(t.history,g.url,g.signal)}let{shortCircuited:y,loaderData:x,errors:E}=await async function(e,r,n,a,i,o,u,c,d,p){let h=a||Oe(r,i),v=i||o||_e(h),g=l||f,[b,y]=ae(t.history,D,n,v,r,w.v7_partialHydration&&!0===c,w.unstable_skipActionErrorRevalidation,q,H,V,xe,pe,se,g,m,p);if(tt((e=>!(n&&n.some((t=>t.route.id===e)))||b&&b.some((t=>t.route.id===e)))),te=++W,0===b.length&&0===y.length){let e=Qe();return je(r,s({matches:n,loaderData:{},errors:p&&Ee(p[1])?{[p[0]]:p[1].error}:null},ve(p),e?{fetchers:new Map(D.fetchers)}:{}),{flushSync:d}),{shortCircuited:!0}}if(!($||w.v7_partialHydration&&c)){let e;y.forEach((e=>{let t=D.fetchers.get(e.key),r=De(void 0,t?t.data:void 0);D.fetchers.set(e.key,r)})),p&&!Ee(p[1])?e={[p[0]]:p[1].data}:D.actionData&&(e=0===Object.keys(D.actionData).length?null:D.actionData),Re(s({navigation:h},void 0!==e?{actionData:e}:{},y.length>0?{fetchers:new Map(D.fetchers)}:{}),{flushSync:d})}y.forEach((e=>{U.has(e.key)&&Ye(e.key),e.controller&&U.set(e.key,e.controller)}));let x=()=>y.forEach((e=>Ye(e.key)));_&&_.signal.addEventListener("abort",x);let{loaderResults:S,fetcherResults:E}=await Be(D.matches,n,b,y,e);if(e.signal.aborted)return{shortCircuited:!0};_&&_.signal.removeEventListener("abort",x),y.forEach((e=>U.delete(e.key)));let k=ye([...S,...E]);if(k){if(k.idx>=b.length){let e=y[k.idx-b.length].key;se.add(e)}return await qe(e,k.result,{replace:u}),{shortCircuited:!0}}let{loaderData:C,errors:T}=me(D,n,b,S,p,y,E,Le);Le.forEach(((e,t)=>{e.subscribe((r=>{(r||e.done)&&Le.delete(t)}))})),w.v7_partialHydration&&c&&D.errors&&Object.entries(D.errors).filter((e=>{let[t]=e;return!b.some((e=>e.route.id===t))})).forEach((e=>{let[t,r]=e;T=Object.assign(T||{},{[t]:r})}));let M=Qe(),P=Ke(te),L=M||P||y.length>0;return s({loaderData:C,errors:T},L?{fetchers:new Map(D.fetchers)}:{})}(g,n,u,o,a&&a.submission,a&&a.fetcherSubmission,a&&a.replace,a&&!0===a.initialHydration,c,v);y||(_=null,je(n,s({matches:u},ve(v),{loaderData:x,errors:E})))}async function qe(a,i,l){let{submission:u,fetcherSubmission:c,replace:p}=void 0===l?{}:l;i.response.headers.has("X-Remix-Revalidate")&&(q=!0);let f=i.response.headers.get("Location");o(f,"Expected a Location header on the redirect Response"),f=ce(f,new URL(a.url),m);let h=d(D.location,f,{_isRedirect:!0});if(n){let e=!1;if(i.response.headers.has("X-Remix-Reload-Document"))e=!0;else if(J.test(f)){const n=t.history.createURL(f);e=n.origin!==r.location.origin||null==O(n.pathname,m)}if(e)return void(p?r.location.replace(f):r.location.assign(f))}_=null;let v=!0===p?e.Replace:e.Push,{formMethod:g,formAction:b,formEncType:w}=D.navigation;!u&&!c&&g&&b&&w&&(u=_e(D.navigation));let y=u||c;if(Y.has(i.response.status)&&y&&Te(y.formMethod))await $e(v,h,{submission:s({},y,{formAction:f}),preventScrollReset:A});else{let e=Oe(h,u);await $e(v,h,{overrideNavigation:e,fetcherSubmission:c,preventScrollReset:A})}}async function Fe(e,t,r,n){try{let a=await async function(e,t,r,n,a,i,l,u){let c=n.reduce(((e,t)=>e.add(t.route.id)),new Set),d=new Set,p=await e({matches:a.map((e=>{let n=c.has(e.route.id);return s({},e,{shouldLoad:n,resolve:a=>(d.add(e.route.id),n?async function(e,t,r,n,a,i,s){let l,u,c=n=>{let a,l=new Promise(((e,t)=>a=t));u=()=>a(),t.signal.addEventListener("abort",u);let o,c=a=>"function"!=typeof n?Promise.reject(new Error('You cannot call the handler for a route which defines a boolean "'+e+'" [routeId: '+r.route.id+"]")):n({request:t,params:r.params,context:s},...void 0!==a?[a]:[]);return o=i?i((e=>c(e))):(async()=>{try{return{type:"data",result:await c()}}catch(e){return{type:"error",result:e}}})(),Promise.race([o,l])};try{let i=r.route[e];if(r.route.lazy)if(i){let e,[t]=await Promise.all([c(i).catch((t=>{e=t})),le(r.route,a,n)]);if(void 0!==e)throw e;l=t}else{if(await le(r.route,a,n),i=r.route[e],!i){if("action"===e){let e=new URL(t.url),n=e.pathname+e.search;throw we(405,{method:t.method,pathname:n,routeId:r.route.id})}return{type:h.data,result:void 0}}l=await c(i)}else{if(!i){let e=new URL(t.url);throw we(404,{pathname:e.pathname+e.search})}l=await c(i)}o(void 0!==l.result,"You defined "+("action"===e?"an action":"a loader")+' for route "'+r.route.id+"\" but didn't return anything from your `"+e+"` function. Please return a value or `null`.")}catch(e){return{type:h.error,result:e}}finally{u&&t.signal.removeEventListener("abort",u)}return l}(t,r,e,i,l,a,u):Promise.resolve({type:h.data,result:void 0}))})})),request:r,params:a[0].params,context:u});return a.forEach((e=>o(d.has(e.route.id),'`match.resolve()` was not called for route id "'+e.route.id+'". You must call `match.resolve()` on every match passed to `dataStrategy` to ensure all routes are properly loaded.'))),p.filter(((e,t)=>c.has(a[t].route.id)))}(v,e,t,r,n,p,i);return await Promise.all(a.map(((e,a)=>{if(function(e){return Ce(e.result)&&G.has(e.result.status)}(e)){let i=e.result;return{type:h.redirect,response:ue(i,t,r[a].route.id,n,m,w.v7_relativeSplatPath)}}return async function(e){let{result:t,type:r,status:n}=e;if(Ce(t)){let e;try{let r=t.headers.get("Content-Type");e=r&&/\bapplication\/json\b/.test(r)?null==t.body?null:await t.json():await t.text()}catch(e){return{type:h.error,error:e}}return r===h.error?{type:h.error,error:new F(t.status,t.statusText,e),statusCode:t.status,headers:t.headers}:{type:h.data,data:e,statusCode:t.status,headers:t.headers}}return r===h.error?{type:h.error,error:t,statusCode:B(t)?t.status:n}:function(e){let t=e;return t&&"object"==typeof t&&"object"==typeof t.data&&"function"==typeof t.subscribe&&"function"==typeof t.cancel&&"function"==typeof t.resolveData}(t)?{type:h.deferred,deferredData:t,statusCode:null==(a=t.init)?void 0:a.status,headers:(null==(i=t.init)?void 0:i.headers)&&new Headers(t.init.headers)}:{type:h.data,data:t,statusCode:n};var a,i}(e)})))}catch(e){return r.map((()=>({type:h.error,error:e})))}}async function Be(e,r,n,a,i){let[s,...l]=await Promise.all([n.length?Fe("loader",i,n,r):[],...a.map((e=>e.matches&&e.match&&e.controller?Fe("loader",de(t.history,e.path,e.controller.signal),[e.match],e.matches).then((e=>e[0])):Promise.resolve({type:h.error,error:we(404,{pathname:e.path})})))]);return await Promise.all([Me(e,n,s,s.map((()=>i.signal)),!1,D.loaderData),Me(e,a.map((e=>e.match)),l,a.map((e=>e.controller?e.controller.signal:null)),!0)]),{loaderResults:s,fetcherResults:l}}function He(){q=!0,H.push(...tt()),pe.forEach(((e,t)=>{U.has(t)&&(V.push(t),Ye(t))}))}function Ve(e,t,r){void 0===r&&(r={}),D.fetchers.set(e,t),Re({fetchers:new Map(D.fetchers)},{flushSync:!0===(r&&r.flushSync)})}function Ue(e,t,r,n){void 0===n&&(n={});let a=ge(D.matches,t);Ge(e),Re({errors:{[a.route.id]:r},fetchers:new Map(D.fetchers)},{flushSync:!0===(n&&n.flushSync)})}function We(e){return w.v7_fetcherPersist&&(fe.set(e,(fe.get(e)||0)+1),xe.has(e)&&xe.delete(e)),D.fetchers.get(e)||Q}function Ge(e){let t=D.fetchers.get(e);!U.has(e)||t&&"loading"===t.state&&ie.has(e)||Ye(e),pe.delete(e),ie.delete(e),se.delete(e),xe.delete(e),D.fetchers.delete(e)}function Ye(e){let t=U.get(e);o(t,"Expected fetch controller: "+e),t.abort(),U.delete(e)}function Xe(e){for(let t of e){let e=Ne(We(t).data);D.fetchers.set(t,e)}}function Qe(){let e=[],t=!1;for(let r of se){let n=D.fetchers.get(r);o(n,"Expected fetcher: "+r),"loading"===n.state&&(se.delete(r),e.push(r),t=!0)}return Xe(e),t}function Ke(e){let t=[];for(let[r,n]of ie)if(n<e){let e=D.fetchers.get(r);o(e,"Expected fetcher: "+r),"loading"===e.state&&(Ye(r),ie.delete(r),t.push(r))}return Xe(t),t.length>0}function Je(e){D.blockers.delete(e),Ae.delete(e)}function Ze(e,t){let r=D.blockers.get(e)||K;o("unblocked"===r.state&&"blocked"===t.state||"blocked"===r.state&&"blocked"===t.state||"blocked"===r.state&&"proceeding"===t.state||"blocked"===r.state&&"unblocked"===t.state||"proceeding"===r.state&&"unblocked"===t.state,"Invalid blocker state transition: "+r.state+" -> "+t.state);let n=new Map(D.blockers);n.set(e,t),Re({blockers:n})}function et(e){let{currentLocation:t,nextLocation:r,historyAction:n}=e;if(0===Ae.size)return;Ae.size>1&&u(!1,"A router only supports one blocker at a time");let a=Array.from(Ae.entries()),[i,s]=a[a.length-1],l=D.blockers.get(i);return l&&"proceeding"===l.state?void 0:s({currentLocation:t,nextLocation:r,historyAction:n})?i:void 0}function tt(e){let t=[];return Le.forEach(((r,n)=>{e&&!e(n)||(r.cancel(),t.push(n),Le.delete(n))})),t}function rt(e,t){return E&&E(e,t.map((e=>function(e,t){let{route:r,pathname:n,params:a}=e;return{id:r.id,pathname:n,params:a,data:t[r.id],handle:r.handle}}(e,D.loaderData))))||e.key}function nt(e,t){if(S){let r=rt(e,t),n=S[r];if("number"==typeof n)return n}return null}return P={get basename(){return m},get future(){return w},get state(){return D},get routes(){return f},get window(){return r},initialize:function(){if(y=t.history.listen((e=>{let{action:r,location:n,delta:a}=e;if(Ie)return void(Ie=!1);u(0===Ae.size||null!=a,"You are trying to use a blocker on a POP navigation to a location that was not created by @remix-run/router. This will fail silently in production. This can happen if you are navigating outside the router via `window.history.pushState`/`window.location.hash` instead of using router navigation APIs.  This can also happen if you are using createHashRouter and the user manually changes the URL.");let i=et({currentLocation:D.location,nextLocation:n,historyAction:r});return i&&null!=a?(Ie=!0,t.history.go(-1*a),void Ze(i,{state:"blocked",location:n,proceed(){Ze(i,{state:"proceeding",proceed:void 0,reset:void 0,location:n}),t.history.go(a)},reset(){let e=new Map(D.blockers);e.set(i,K),Re({blockers:e})}})):$e(r,n)})),n){!function(e,t){try{let r=e.sessionStorage.getItem(ee);if(r){let e=JSON.parse(r);for(let[r,n]of Object.entries(e||{}))n&&Array.isArray(n)&&t.set(r,new Set(n||[]))}}catch(e){}}(r,R);let e=()=>function(e,t){if(t.size>0){let r={};for(let[e,n]of t)r[e]=[...n];try{e.sessionStorage.setItem(ee,JSON.stringify(r))}catch(e){u(!1,"Failed to save applied view transitions in sessionStorage ("+e+").")}}}(r,R);r.addEventListener("pagehide",e),j=()=>r.removeEventListener("pagehide",e)}return D.initialized||$e(e.Pop,D.location,{initialHydration:!0}),P},subscribe:function(e){return x.add(e),()=>x.delete(e)},enableScrollRestoration:function(e,t,r){if(S=e,k=t,E=r||null,!C&&D.navigation===X){C=!0;let e=nt(D.location,D.matches);null!=e&&Re({restoreScrollPosition:e})}return()=>{S=null,k=null,E=null}},navigate:async function r(n,a){if("number"==typeof n)return void t.history.go(n);let i=re(D.location,D.matches,m,w.v7_prependBasename,n,w.v7_relativeSplatPath,null==a?void 0:a.fromRouteId,null==a?void 0:a.relative),{path:l,submission:o,error:u}=ne(w.v7_normalizeFormMethod,!1,i,a),c=D.location,p=d(D.location,l,a&&a.state);p=s({},p,t.history.encodeLocation(p));let f=a&&null!=a.replace?a.replace:void 0,h=e.Push;!0===f?h=e.Replace:!1===f||null!=o&&Te(o.formMethod)&&o.formAction===D.location.pathname+D.location.search&&(h=e.Replace);let v=a&&"preventScrollReset"in a?!0===a.preventScrollReset:void 0,g=!0===(a&&a.unstable_flushSync),b=et({currentLocation:c,nextLocation:p,historyAction:h});if(!b)return await $e(h,p,{submission:o,pendingError:u,preventScrollReset:v,replace:a&&a.replace,enableViewTransition:a&&a.unstable_viewTransition,flushSync:g});Ze(b,{state:"blocked",location:p,proceed(){Ze(b,{state:"proceeding",proceed:void 0,reset:void 0,location:p}),r(n,a)},reset(){let e=new Map(D.blockers);e.set(b,K),Re({blockers:e})}})},fetch:function(e,r,n,i){if(a)throw new Error("router.fetch() was called during the server render, but it shouldn't be. You are likely calling a useFetcher() method in the body of your component. Try moving it to a useEffect or a callback.");U.has(e)&&Ye(e);let s=!0===(i&&i.unstable_flushSync),u=l||f,c=re(D.location,D.matches,m,w.v7_prependBasename,n,w.v7_relativeSplatPath,r,null==i?void 0:i.relative),d=b(u,c,m);if(!d)return void Ue(e,r,we(404,{pathname:c}),{flushSync:s});let{path:p,submission:h,error:v}=ne(w.v7_normalizeFormMethod,!0,c,i);if(v)return void Ue(e,r,v,{flushSync:s});let g=ze(d,p);A=!0===(i&&i.preventScrollReset),h&&Te(h.formMethod)?async function(e,r,n,a,i,s,u){if(He(),pe.delete(e),!a.route.action&&!a.route.lazy){let t=we(405,{method:u.formMethod,pathname:n,routeId:r});return void Ue(e,r,t,{flushSync:s})}let c=D.fetchers.get(e);Ve(e,function(e,t){return{state:"submitting",formMethod:e.formMethod,formAction:e.formAction,formEncType:e.formEncType,formData:e.formData,json:e.json,text:e.text,data:t?t.data:void 0}}(u,c),{flushSync:s});let d=new AbortController,p=de(t.history,n,d.signal,u);U.set(e,d);let h=W,v=(await Fe("action",p,[a],i))[0];if(p.signal.aborted)return void(U.get(e)===d&&U.delete(e));if(w.v7_fetcherPersist&&xe.has(e)){if(ke(v)||Ee(v))return void Ve(e,Ne(void 0))}else{if(ke(v))return U.delete(e),te>h?void Ve(e,Ne(void 0)):(se.add(e),Ve(e,De(u)),qe(p,v,{fetcherSubmission:u}));if(Ee(v))return void Ue(e,r,v.error)}if(Se(v))throw we(400,{type:"defer-action"});let g=D.navigation.location||D.location,y=de(t.history,g,d.signal),x=l||f,S="idle"!==D.navigation.state?b(x,D.navigation.location,m):D.matches;o(S,"Didn't find any matches after fetcher action");let E=++W;ie.set(e,E);let k=De(u,v.data);D.fetchers.set(e,k);let[C,T]=ae(t.history,D,S,u,g,!1,w.unstable_skipActionErrorRevalidation,q,H,V,xe,pe,se,x,m,[a.route.id,v]);T.filter((t=>t.key!==e)).forEach((e=>{let t=e.key,r=D.fetchers.get(t),n=De(void 0,r?r.data:void 0);D.fetchers.set(t,n),U.has(t)&&Ye(t),e.controller&&U.set(t,e.controller)})),Re({fetchers:new Map(D.fetchers)});let M=()=>T.forEach((e=>Ye(e.key)));d.signal.addEventListener("abort",M);let{loaderResults:P,fetcherResults:L}=await Be(D.matches,S,C,T,y);if(d.signal.aborted)return;d.signal.removeEventListener("abort",M),ie.delete(e),U.delete(e),T.forEach((e=>U.delete(e.key)));let z=ye([...P,...L]);if(z){if(z.idx>=C.length){let e=T[z.idx-C.length].key;se.add(e)}return qe(y,z.result)}let{loaderData:O,errors:A}=me(D,D.matches,C,P,void 0,T,L,Le);if(D.fetchers.has(e)){let t=Ne(v.data);D.fetchers.set(e,t)}Ke(E),"loading"===D.navigation.state&&E>te?(o(N,"Expected pending action"),_&&_.abort(),je(D.navigation.location,{matches:S,loaderData:O,errors:A,fetchers:new Map(D.fetchers)})):(Re({errors:A,loaderData:he(D.loaderData,O,S,A),fetchers:new Map(D.fetchers)}),q=!1)}(e,r,p,g,d,s,h):(pe.set(e,{routeId:r,path:p}),async function(e,r,n,a,i,s,l){let u=D.fetchers.get(e);Ve(e,De(l,u?u.data:void 0),{flushSync:s});let c=new AbortController,d=de(t.history,n,c.signal);U.set(e,c);let p=W,f=(await Fe("loader",d,[a],i))[0];if(Se(f)&&(f=await Pe(f,d.signal,!0)||f),U.get(e)===c&&U.delete(e),!d.signal.aborted){if(!xe.has(e))return ke(f)?te>p?void Ve(e,Ne(void 0)):(se.add(e),void await qe(d,f)):void(Ee(f)?Ue(e,r,f.error):(o(!Se(f),"Unhandled fetcher deferred data"),Ve(e,Ne(f.data))));Ve(e,Ne(void 0))}}(e,r,p,g,d,s,h))},revalidate:function(){He(),Re({revalidation:"loading"}),"submitting"!==D.navigation.state&&("idle"!==D.navigation.state?$e(N||D.historyAction,D.navigation.location,{overrideNavigation:D.navigation}):$e(D.historyAction,D.location,{startUninterruptedRevalidation:!0}))},createHref:e=>t.history.createHref(e),encodeLocation:e=>t.history.encodeLocation(e),getFetcher:We,deleteFetcher:function(e){if(w.v7_fetcherPersist){let t=(fe.get(e)||0)-1;t<=0?(fe.delete(e),xe.add(e)):fe.set(e,t)}else Ge(e);Re({fetchers:new Map(D.fetchers)})},dispose:function(){y&&y(),j&&j(),x.clear(),_&&_.abort(),D.fetchers.forEach(((e,t)=>Ge(t))),D.blockers.forEach(((e,t)=>Je(t)))},getBlocker:function(e,t){let r=D.blockers.get(e)||K;return Ae.get(e)!==t&&Ae.set(e,t),r},deleteBlocker:Je,_internalFetchControllers:U,_internalActiveDeferreds:Le,_internalSetRoutes:function(e){p={},l=g(e,i,void 0,p)}},P}function re(e,t,r,n,a,i,s,l){let o,u;if(s){o=[];for(let e of t)if(o.push(e),e.route.id===s){u=e;break}}else o=t,u=t[t.length-1];let c=I(a||".",A(o,i),O(e.pathname,r)||e.pathname,"path"===l);return null==a&&(c.search=e.search,c.hash=e.hash),null!=a&&""!==a&&"."!==a||!u||!u.route.index||Le(c.search)||(c.search=c.search?c.search.replace(/^\?/,"?index&"):"?index"),n&&"/"!==r&&(c.pathname="/"===c.pathname?r:R([r,c.pathname])),p(c)}function ne(e,t,r,n){if(!n||!function(e){return null!=e&&("formData"in e&&null!=e.formData||"body"in e&&void 0!==e.body)}(n))return{path:r};if(n.formMethod&&(a=n.formMethod,!W.has(a.toLowerCase())))return{path:r,error:we(405,{method:n.formMethod})};var a;let i,s,l=()=>({path:r,error:we(400,{type:"invalid-body"})}),u=n.formMethod||"get",c=e?u.toUpperCase():u.toLowerCase(),d=xe(r);if(void 0!==n.body){if("text/plain"===n.formEncType){if(!Te(c))return l();let e="string"==typeof n.body?n.body:n.body instanceof FormData||n.body instanceof URLSearchParams?Array.from(n.body.entries()).reduce(((e,t)=>{let[r,n]=t;return""+e+r+"="+n+"\n"}),""):String(n.body);return{path:r,submission:{formMethod:c,formAction:d,formEncType:n.formEncType,formData:void 0,json:void 0,text:e}}}if("application/json"===n.formEncType){if(!Te(c))return l();try{let e="string"==typeof n.body?JSON.parse(n.body):n.body;return{path:r,submission:{formMethod:c,formAction:d,formEncType:n.formEncType,formData:void 0,json:e,text:void 0}}}catch(e){return l()}}}if(o("function"==typeof FormData,"FormData is not available in this environment"),n.formData)i=pe(n.formData),s=n.formData;else if(n.body instanceof FormData)i=pe(n.body),s=n.body;else if(n.body instanceof URLSearchParams)i=n.body,s=fe(i);else if(null==n.body)i=new URLSearchParams,s=new FormData;else try{i=new URLSearchParams(n.body),s=fe(i)}catch(e){return l()}let m={formMethod:c,formAction:d,formEncType:n&&n.formEncType||"application/x-www-form-urlencoded",formData:s,json:void 0,text:void 0};if(Te(m.formMethod))return{path:r,submission:m};let h=f(r);return t&&h.search&&Le(h.search)&&i.append("index",""),h.search="?"+i,{path:p(h),submission:m}}function ae(e,t,r,n,a,i,l,o,u,c,d,p,f,m,h,v){let g=v?Ee(v[1])?v[1].error:v[1].data:void 0,w=e.createURL(t.location),y=e.createURL(a),x=v&&Ee(v[1])?v[0]:void 0,S=x?function(e,t){let r=e;if(t){let n=e.findIndex((e=>e.route.id===t));n>=0&&(r=e.slice(0,n))}return r}(r,x):r,E=v?v[1].statusCode:void 0,k=l&&E&&E>=400,C=S.filter(((e,r)=>{let{route:a}=e;if(a.lazy)return!0;if(null==a.loader)return!1;if(i)return!("function"==typeof a.loader&&!a.loader.hydrate&&(void 0!==t.loaderData[a.id]||t.errors&&void 0!==t.errors[a.id]));if(function(e,t,r){let n=!t||r.route.id!==t.route.id,a=void 0===e[r.route.id];return n||a}(t.loaderData,t.matches[r],e)||u.some((t=>t===e.route.id)))return!0;let l=t.matches[r],c=e;return se(e,s({currentUrl:w,currentParams:l.params,nextUrl:y,nextParams:c.params},n,{actionResult:g,unstable_actionStatus:E,defaultShouldRevalidate:!k&&(o||w.pathname+w.search===y.pathname+y.search||w.search!==y.search||ie(l,c))}))})),T=[];return p.forEach(((e,a)=>{if(i||!r.some((t=>t.route.id===e.routeId))||d.has(a))return;let l=b(m,e.path,h);if(!l)return void T.push({key:a,routeId:e.routeId,path:e.path,matches:null,match:null,controller:null});let u=t.fetchers.get(a),p=ze(l,e.path),v=!1;v=!f.has(a)&&(!!c.includes(a)||(u&&"idle"!==u.state&&void 0===u.data?o:se(p,s({currentUrl:w,currentParams:t.matches[t.matches.length-1].params,nextUrl:y,nextParams:r[r.length-1].params},n,{actionResult:g,unstable_actionStatus:E,defaultShouldRevalidate:!k&&o})))),v&&T.push({key:a,routeId:e.routeId,path:e.path,matches:l,match:p,controller:new AbortController})})),[C,T]}function ie(e,t){let r=e.route.path;return e.pathname!==t.pathname||null!=r&&r.endsWith("*")&&e.params["*"]!==t.params["*"]}function se(e,t){if(e.route.shouldRevalidate){let r=e.route.shouldRevalidate(t);if("boolean"==typeof r)return r}return t.defaultShouldRevalidate}async function le(e,t,r){if(!e.lazy)return;let n=await e.lazy();if(!e.lazy)return;let a=r[e.id];o(a,"No route found in manifest");let i={};for(let e in n){let t=void 0!==a[e]&&"hasErrorBoundary"!==e;u(!t,'Route "'+a.id+'" has a static property "'+e+'" defined but its lazy function is also returning a value for this property. The lazy route property "'+e+'" will be ignored.'),t||v.has(e)||(i[e]=n[e])}Object.assign(a,i),Object.assign(a,s({},t(a),{lazy:void 0}))}function oe(e){return Promise.all(e.matches.map((e=>e.resolve())))}function ue(e,t,r,n,a,i){let s=e.headers.get("Location");if(o(s,"Redirects returned/thrown from loaders/actions must have a Location header"),!J.test(s)){let l=n.slice(0,n.findIndex((e=>e.route.id===r))+1);s=re(new URL(t.url),l,a,!0,s,i),e.headers.set("Location",s)}return e}function ce(e,t,r){if(J.test(e)){let n=e,a=n.startsWith("//")?new URL(t.protocol+n):new URL(n),i=null!=O(a.pathname,r);if(a.origin===t.origin&&i)return a.pathname+a.search+a.hash}return e}function de(e,t,r,n){let a=e.createURL(xe(t)).toString(),i={signal:r};if(n&&Te(n.formMethod)){let{formMethod:e,formEncType:t}=n;i.method=e.toUpperCase(),"application/json"===t?(i.headers=new Headers({"Content-Type":t}),i.body=JSON.stringify(n.json)):"text/plain"===t?i.body=n.text:"application/x-www-form-urlencoded"===t&&n.formData?i.body=pe(n.formData):i.body=n.formData}return new Request(a,i)}function pe(e){let t=new URLSearchParams;for(let[r,n]of e.entries())t.append(r,"string"==typeof n?n:n.name);return t}function fe(e){let t=new FormData;for(let[r,n]of e.entries())t.append(r,n);return t}function me(e,t,r,n,a,i,l,u){let{loaderData:c,errors:d}=function(e,t,r,n,a,i){let s,l={},u=null,c=!1,d={},p=n&&Ee(n[1])?n[1].error:void 0;return r.forEach(((r,n)=>{let f=t[n].route.id;if(o(!ke(r),"Cannot handle redirect results in processLoaderData"),Ee(r)){let t=r.error;if(void 0!==p&&(t=p,p=void 0),u=u||{},i)u[f]=t;else{let r=ge(e,f);null==u[r.route.id]&&(u[r.route.id]=t)}l[f]=void 0,c||(c=!0,s=B(r.error)?r.error.status:500),r.headers&&(d[f]=r.headers)}else Se(r)?(a.set(f,r.deferredData),l[f]=r.deferredData.data,null==r.statusCode||200===r.statusCode||c||(s=r.statusCode),r.headers&&(d[f]=r.headers)):(l[f]=r.data,r.statusCode&&200!==r.statusCode&&!c&&(s=r.statusCode),r.headers&&(d[f]=r.headers))})),void 0!==p&&n&&(u={[n[0]]:p},l[n[0]]=void 0),{loaderData:l,errors:u,statusCode:s||200,loaderHeaders:d}}(t,r,n,a,u,!1);for(let t=0;t<i.length;t++){let{key:r,match:n,controller:a}=i[t];o(void 0!==l&&void 0!==l[t],"Did not find corresponding fetcher result");let u=l[t];if(!a||!a.signal.aborted)if(Ee(u)){let t=ge(e.matches,null==n?void 0:n.route.id);d&&d[t.route.id]||(d=s({},d,{[t.route.id]:u.error})),e.fetchers.delete(r)}else if(ke(u))o(!1,"Unhandled fetcher revalidation redirect");else if(Se(u))o(!1,"Unhandled fetcher deferred data");else{let t=Ne(u.data);e.fetchers.set(r,t)}}return{loaderData:c,errors:d}}function he(e,t,r,n){let a=s({},t);for(let i of r){let r=i.route.id;if(t.hasOwnProperty(r)?void 0!==t[r]&&(a[r]=t[r]):void 0!==e[r]&&i.route.loader&&(a[r]=e[r]),n&&n.hasOwnProperty(r))break}return a}function ve(e){return e?Ee(e[1])?{actionData:{}}:{actionData:{[e[0]]:e[1].data}}:{}}function ge(e,t){return(t?e.slice(0,e.findIndex((e=>e.route.id===t))+1):[...e]).reverse().find((e=>!0===e.route.hasErrorBoundary))||e[0]}function be(e){let t=1===e.length?e[0]:e.find((e=>e.index||!e.path||"/"===e.path))||{id:"__shim-error-route__"};return{matches:[{params:{},pathname:"",pathnameBase:"",route:t}],route:t}}function we(e,t){let{pathname:r,routeId:n,method:a,type:i}=void 0===t?{}:t,s="Unknown Server Error",l="Unknown @remix-run/router error";return 400===e?(s="Bad Request",a&&r&&n?l="You made a "+a+' request to "'+r+'" but did not provide a `loader` for route "'+n+'", so there is no way to handle the request.':"defer-action"===i?l="defer() is not supported in actions":"invalid-body"===i&&(l="Unable to encode submission body")):403===e?(s="Forbidden",l='Route "'+n+'" does not match URL "'+r+'"'):404===e?(s="Not Found",l='No route matches URL "'+r+'"'):405===e&&(s="Method Not Allowed",a&&r&&n?l="You made a "+a.toUpperCase()+' request to "'+r+'" but did not provide an `action` for route "'+n+'", so there is no way to handle the request.':a&&(l='Invalid request method "'+a.toUpperCase()+'"')),new F(e||500,s,new Error(l),!0)}function ye(e){for(let t=e.length-1;t>=0;t--){let r=e[t];if(ke(r))return{result:r,idx:t}}}function xe(e){return p(s({},"string"==typeof e?f(e):e,{hash:""}))}function Se(e){return e.type===h.deferred}function Ee(e){return e.type===h.error}function ke(e){return(e&&e.type)===h.redirect}function Ce(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"object"==typeof e.headers&&void 0!==e.body}function Te(e){return V.has(e.toLowerCase())}async function Me(e,t,r,n,a,i){for(let s=0;s<r.length;s++){let l=r[s],u=t[s];if(!u)continue;let c=e.find((e=>e.route.id===u.route.id)),d=null!=c&&!ie(c,u)&&void 0!==(i&&i[u.route.id]);if(Se(l)&&(a||d)){let e=n[s];o(e,"Expected an AbortSignal for revalidating fetcher deferred result"),await Pe(l,e,a).then((e=>{e&&(r[s]=e||r[s])}))}}}async function Pe(e,t,r){if(void 0===r&&(r=!1),!await e.deferredData.resolveData(t)){if(r)try{return{type:h.data,data:e.deferredData.unwrappedData}}catch(e){return{type:h.error,error:e}}return{type:h.data,data:e.deferredData.data}}}function Le(e){return new URLSearchParams(e).getAll("index").some((e=>""===e))}function ze(e,t){let r="string"==typeof t?f(t).search:t.search;if(e[e.length-1].route.index&&Le(r||""))return e[e.length-1];let n=N(e);return n[n.length-1]}function _e(e){let{formMethod:t,formAction:r,formEncType:n,text:a,formData:i,json:s}=e;if(t&&r&&n)return null!=a?{formMethod:t,formAction:r,formEncType:n,formData:void 0,json:void 0,text:a}:null!=i?{formMethod:t,formAction:r,formEncType:n,formData:i,json:void 0,text:void 0}:void 0!==s?{formMethod:t,formAction:r,formEncType:n,formData:void 0,json:s,text:void 0}:void 0}function Oe(e,t){return t?{state:"loading",location:e,formMethod:t.formMethod,formAction:t.formAction,formEncType:t.formEncType,formData:t.formData,json:t.json,text:t.text}:{state:"loading",location:e,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0}}function De(e,t){return e?{state:"loading",formMethod:e.formMethod,formAction:e.formAction,formEncType:e.formEncType,formData:e.formData,json:e.json,text:e.text,data:t}:{state:"loading",formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0,data:t}}function Ne(e){return{state:"idle",formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0,data:e}}function Ae(){return Ae=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},Ae.apply(this,arguments)}Symbol("deferred");const Ie=t.createContext(null),Re=t.createContext(null),je=t.createContext(null),$e=t.createContext(null),qe=t.createContext({outlet:null,matches:[],isDataRoute:!1}),Fe=t.createContext(null);function Be(){return null!=t.useContext($e)}function He(){return Be()||o(!1),t.useContext($e).location}function Ve(e){t.useContext(je).static||t.useLayoutEffect(e)}function Ue(){let{isDataRoute:e}=t.useContext(qe);return e?function(){let{router:e}=function(e){let r=t.useContext(Ie);return r||o(!1),r}(Ze.UseNavigateStable),r=tt(et.UseNavigateStable),n=t.useRef(!1);return Ve((()=>{n.current=!0})),t.useCallback((function(t,a){void 0===a&&(a={}),n.current&&("number"==typeof t?e.navigate(t):e.navigate(t,Ae({fromRouteId:r},a)))}),[e,r])}():function(){Be()||o(!1);let e=t.useContext(Ie),{basename:r,future:n,navigator:a}=t.useContext(je),{matches:i}=t.useContext(qe),{pathname:s}=He(),l=JSON.stringify(A(i,n.v7_relativeSplatPath)),u=t.useRef(!1);return Ve((()=>{u.current=!0})),t.useCallback((function(t,n){if(void 0===n&&(n={}),!u.current)return;if("number"==typeof t)return void a.go(t);let i=I(t,JSON.parse(l),s,"path"===n.relative);null==e&&"/"!==r&&(i.pathname="/"===i.pathname?r:R([r,i.pathname])),(n.replace?a.replace:a.push)(i,n.state,n)}),[r,a,l,s,e])}()}const We=t.createContext(null);function Ge(e,r){let{relative:n}=void 0===r?{}:r,{future:a}=t.useContext(je),{matches:i}=t.useContext(qe),{pathname:s}=He(),l=JSON.stringify(A(i,a.v7_relativeSplatPath));return t.useMemo((()=>I(e,JSON.parse(l),s,"path"===n)),[e,l,s,n])}function Ye(r,n,a,i){Be()||o(!1);let{navigator:s}=t.useContext(je),{matches:l}=t.useContext(qe),u=l[l.length-1],c=u?u.params:{},d=(u&&u.pathname,u?u.pathnameBase:"/");u&&u.route;let p,m=He();if(n){var h;let e="string"==typeof n?f(n):n;"/"===d||(null==(h=e.pathname)?void 0:h.startsWith(d))||o(!1),p=e}else p=m;let v=p.pathname||"/",g=v;if("/"!==d){let e=d.replace(/^\//,"").split("/");g="/"+v.replace(/^\//,"").split("/").slice(e.length).join("/")}let w=b(r,{pathname:g}),y=function(e,r,n,a){var i;if(void 0===r&&(r=[]),void 0===n&&(n=null),void 0===a&&(a=null),null==e){var s;if(null==(s=n)||!s.errors)return null;e=n.matches}let l=e,u=null==(i=n)?void 0:i.errors;if(null!=u){let e=l.findIndex((e=>e.route.id&&void 0!==(null==u?void 0:u[e.route.id])));e>=0||o(!1),l=l.slice(0,Math.min(l.length,e+1))}let c=!1,d=-1;if(n&&a&&a.v7_partialHydration)for(let e=0;e<l.length;e++){let t=l[e];if((t.route.HydrateFallback||t.route.hydrateFallbackElement)&&(d=e),t.route.id){let{loaderData:e,errors:r}=n,a=t.route.loader&&void 0===e[t.route.id]&&(!r||void 0===r[t.route.id]);if(t.route.lazy||a){c=!0,l=d>=0?l.slice(0,d+1):[l[0]];break}}}return l.reduceRight(((e,a,i)=>{let s,o=!1,p=null,f=null;var m;n&&(s=u&&a.route.id?u[a.route.id]:void 0,p=a.route.errorElement||Qe,c&&(d<0&&0===i?(rt[m="route-fallback"]||(rt[m]=!0),o=!0,f=null):d===i&&(o=!0,f=a.route.hydrateFallbackElement||null)));let h=r.concat(l.slice(0,i+1)),v=()=>{let r;return r=s?p:o?f:a.route.Component?t.createElement(a.route.Component,null):a.route.element?a.route.element:e,t.createElement(Je,{match:a,routeContext:{outlet:e,matches:h,isDataRoute:null!=n},children:r})};return n&&(a.route.ErrorBoundary||a.route.errorElement||0===i)?t.createElement(Ke,{location:n.location,revalidation:n.revalidation,component:p,error:s,children:v(),routeContext:{outlet:null,matches:h,isDataRoute:!0}}):v()}),null)}(w&&w.map((e=>Object.assign({},e,{params:Object.assign({},c,e.params),pathname:R([d,s.encodeLocation?s.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?d:R([d,s.encodeLocation?s.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])}))),l,a,i);return n&&y?t.createElement($e.Provider,{value:{location:Ae({pathname:"/",search:"",hash:"",state:null,key:"default"},p),navigationType:e.Pop}},y):y}function Xe(){let e=function(){var e;let r=t.useContext(Fe),n=function(e){let r=t.useContext(Re);return r||o(!1),r}(et.UseRouteError),a=tt(et.UseRouteError);return void 0!==r?r:null==(e=n.errors)?void 0:e[a]}(),r=B(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),n=e instanceof Error?e.stack:null,a={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"};return t.createElement(t.Fragment,null,t.createElement("h2",null,"Unexpected Application Error!"),t.createElement("h3",{style:{fontStyle:"italic"}},r),n?t.createElement("pre",{style:a},n):null,null)}const Qe=t.createElement(Xe,null);class Ke extends t.Component{constructor(e){super(e),this.state={location:e.location,revalidation:e.revalidation,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,t){return t.location!==e.location||"idle"!==t.revalidation&&"idle"===e.revalidation?{error:e.error,location:e.location,revalidation:e.revalidation}:{error:void 0!==e.error?e.error:t.error,location:t.location,revalidation:e.revalidation||t.revalidation}}componentDidCatch(e,t){console.error("React Router caught the following error during render",e,t)}render(){return void 0!==this.state.error?t.createElement(qe.Provider,{value:this.props.routeContext},t.createElement(Fe.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function Je(e){let{routeContext:r,match:n,children:a}=e,i=t.useContext(Ie);return i&&i.static&&i.staticContext&&(n.route.errorElement||n.route.ErrorBoundary)&&(i.staticContext._deepestRenderedBoundaryId=n.route.id),t.createElement(qe.Provider,{value:r},a)}var Ze=function(e){return e.UseBlocker="useBlocker",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e}(Ze||{}),et=function(e){return e.UseBlocker="useBlocker",e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e.UseRouteId="useRouteId",e}(et||{});function tt(e){let r=function(e){let r=t.useContext(qe);return r||o(!1),r}(),n=r.matches[r.matches.length-1];return n.route.id||o(!1),n.route.id}const rt={};function nt(e){return function(e){let r=t.useContext(qe).outlet;return r?t.createElement(We.Provider,{value:e},r):r}(e.context)}function at(r){let{basename:n="/",children:a=null,location:i,navigationType:s=e.Pop,navigator:l,static:u=!1,future:c}=r;Be()&&o(!1);let d=n.replace(/^\/*/,"/"),p=t.useMemo((()=>({basename:d,navigator:l,static:u,future:Ae({v7_relativeSplatPath:!1},c)})),[d,c,l,u]);"string"==typeof i&&(i=f(i));let{pathname:m="/",search:h="",hash:v="",state:g=null,key:b="default"}=i,w=t.useMemo((()=>{let e=O(m,d);return null==e?null:{location:{pathname:e,search:h,hash:v,state:g,key:b},navigationType:s}}),[d,m,h,v,g,b,s]);return null==w?null:t.createElement(je.Provider,{value:p},t.createElement($e.Provider,{children:a,value:w}))}function it(e){let r={hasErrorBoundary:null!=e.ErrorBoundary||null!=e.errorElement};return e.Component&&Object.assign(r,{element:t.createElement(e.Component),Component:void 0}),e.HydrateFallback&&Object.assign(r,{hydrateFallbackElement:t.createElement(e.HydrateFallback),HydrateFallback:void 0}),e.ErrorBoundary&&Object.assign(r,{errorElement:t.createElement(e.ErrorBoundary),ErrorBoundary:void 0}),r}function st(){return st=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},st.apply(this,arguments)}function lt(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}r.startTransition,new Promise((()=>{})),t.Component,new Set(["application/x-www-form-urlencoded","multipart/form-data","text/plain"]);const ot=["onClick","relative","reloadDocument","replace","state","target","to","preventScrollReset","unstable_viewTransition"],ut=["aria-current","caseSensitive","className","end","style","to","unstable_viewTransition","children"];try{window.__reactRouterVersion="6"}catch(e){}function ct(){var e;let t=null==(e=window)?void 0:e.__staticRouterHydrationData;return t&&t.errors&&(t=st({},t,{errors:dt(t.errors)})),t}function dt(e){if(!e)return null;let t=Object.entries(e),r={};for(let[e,n]of t)if(n&&"RouteErrorResponse"===n.__type)r[e]=new F(n.status,n.statusText,n.data,!0===n.internal);else if(n&&"Error"===n.__type){if(n.__subType){let t=window[n.__subType];if("function"==typeof t)try{let a=new t(n.message);a.stack="",r[e]=a}catch(e){}}if(null==r[e]){let t=new Error(n.message);t.stack="",r[e]=t}}else r[e]=n;return r}const pt=t.createContext({isTransitioning:!1}),ft=t.createContext(new Map),mt=r.startTransition,ht=i.flushSync;function vt(e){ht?ht(e):e()}r.useId;class gt{constructor(){this.status="pending",this.promise=new Promise(((e,t)=>{this.resolve=t=>{"pending"===this.status&&(this.status="resolved",e(t))},this.reject=e=>{"pending"===this.status&&(this.status="rejected",t(e))}}))}}function bt(e){let{fallbackElement:r,router:n,future:a}=e,[i,s]=t.useState(n.state),[l,o]=t.useState(),[u,c]=t.useState({isTransitioning:!1}),[d,p]=t.useState(),[f,m]=t.useState(),[h,v]=t.useState(),g=t.useRef(new Map),{v7_startTransition:b}=a||{},w=t.useCallback((e=>{b?function(e){mt?mt(e):e()}(e):e()}),[b]),y=t.useCallback(((e,t)=>{let{deletedFetchers:r,unstable_flushSync:a,unstable_viewTransitionOpts:i}=t;r.forEach((e=>g.current.delete(e))),e.fetchers.forEach(((e,t)=>{void 0!==e.data&&g.current.set(t,e.data)}));let l=null==n.window||"function"!=typeof n.window.document.startViewTransition;if(i&&!l){if(a){vt((()=>{f&&(d&&d.resolve(),f.skipTransition()),c({isTransitioning:!0,flushSync:!0,currentLocation:i.currentLocation,nextLocation:i.nextLocation})}));let t=n.window.document.startViewTransition((()=>{vt((()=>s(e)))}));return t.finished.finally((()=>{vt((()=>{p(void 0),m(void 0),o(void 0),c({isTransitioning:!1})}))})),void vt((()=>m(t)))}f?(d&&d.resolve(),f.skipTransition(),v({state:e,currentLocation:i.currentLocation,nextLocation:i.nextLocation})):(o(e),c({isTransitioning:!0,flushSync:!1,currentLocation:i.currentLocation,nextLocation:i.nextLocation}))}else a?vt((()=>s(e))):w((()=>s(e)))}),[n.window,f,d,g,w]);t.useLayoutEffect((()=>n.subscribe(y)),[n,y]),t.useEffect((()=>{u.isTransitioning&&!u.flushSync&&p(new gt)}),[u]),t.useEffect((()=>{if(d&&l&&n.window){let e=l,t=d.promise,r=n.window.document.startViewTransition((async()=>{w((()=>s(e))),await t}));r.finished.finally((()=>{p(void 0),m(void 0),o(void 0),c({isTransitioning:!1})})),m(r)}}),[w,l,d,n.window]),t.useEffect((()=>{d&&l&&i.location.key===l.location.key&&d.resolve()}),[d,f,i.location,l]),t.useEffect((()=>{!u.isTransitioning&&h&&(o(h.state),c({isTransitioning:!0,flushSync:!1,currentLocation:h.currentLocation,nextLocation:h.nextLocation}),v(void 0))}),[u.isTransitioning,h]),t.useEffect((()=>{}),[]);let x=t.useMemo((()=>({createHref:n.createHref,encodeLocation:n.encodeLocation,go:e=>n.navigate(e),push:(e,t,r)=>n.navigate(e,{state:t,preventScrollReset:null==r?void 0:r.preventScrollReset}),replace:(e,t,r)=>n.navigate(e,{replace:!0,state:t,preventScrollReset:null==r?void 0:r.preventScrollReset})})),[n]),S=n.basename||"/",E=t.useMemo((()=>({router:n,navigator:x,static:!1,basename:S})),[n,x,S]);return t.createElement(t.Fragment,null,t.createElement(Ie.Provider,{value:E},t.createElement(Re.Provider,{value:i},t.createElement(ft.Provider,{value:g.current},t.createElement(pt.Provider,{value:u},t.createElement(at,{basename:S,location:i.location,navigationType:i.historyAction,navigator:x,future:{v7_relativeSplatPath:n.future.v7_relativeSplatPath}},i.initialized||n.future.v7_partialHydration?t.createElement(wt,{routes:n.routes,future:n.future,state:i}):r))))),null)}function wt(e){let{routes:t,future:r,state:n}=e;return Ye(t,void 0,n,r)}const yt="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement,xt=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,St=t.forwardRef((function(e,r){let n,{onClick:a,relative:i,reloadDocument:s,replace:l,state:u,target:c,to:d,preventScrollReset:f,unstable_viewTransition:m}=e,h=lt(e,ot),{basename:v}=t.useContext(je),g=!1;if("string"==typeof d&&xt.test(d)&&(n=d,yt))try{let e=new URL(window.location.href),t=d.startsWith("//")?new URL(e.protocol+d):new URL(d),r=O(t.pathname,v);t.origin===e.origin&&null!=r?d=r+t.search+t.hash:g=!0}catch(e){}let b=function(e,r){let{relative:n}=void 0===r?{}:r;Be()||o(!1);let{basename:a,navigator:i}=t.useContext(je),{hash:s,pathname:l,search:u}=Ge(e,{relative:n}),c=l;return"/"!==a&&(c="/"===l?a:R([a,l])),i.createHref({pathname:c,search:u,hash:s})}(d,{relative:i}),w=function(e,r){let{target:n,replace:a,state:i,preventScrollReset:s,relative:l,unstable_viewTransition:o}=void 0===r?{}:r,u=Ue(),c=He(),d=Ge(e,{relative:l});return t.useCallback((t=>{if(function(e,t){return!(0!==e.button||t&&"_self"!==t||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e))}(t,n)){t.preventDefault();let r=void 0!==a?a:p(c)===p(d);u(e,{replace:r,state:i,preventScrollReset:s,relative:l,unstable_viewTransition:o})}}),[c,u,d,a,i,n,e,s,l,o])}(d,{replace:l,state:u,target:c,preventScrollReset:f,relative:i,unstable_viewTransition:m});return t.createElement("a",st({},h,{href:n||b,onClick:g||s?a:function(e){a&&a(e),e.defaultPrevented||w(e)},ref:r,target:c}))})),Et=t.forwardRef((function(e,r){let{"aria-current":n="page",caseSensitive:a=!1,className:i="",end:s=!1,style:l,to:u,unstable_viewTransition:c,children:d}=e,p=lt(e,ut),f=Ge(u,{relative:p.relative}),m=He(),h=t.useContext(Re),{navigator:v,basename:g}=t.useContext(je),b=null!=h&&function(e,r){void 0===r&&(r={});let n=t.useContext(pt);null==n&&o(!1);let{basename:a}=function(e){let r=t.useContext(Ie);return r||o(!1),r}(kt.useViewTransitionState),i=Ge(e,{relative:r.relative});if(!n.isTransitioning)return!1;let s=O(n.currentLocation.pathname,a)||n.currentLocation.pathname,l=O(n.nextLocation.pathname,a)||n.nextLocation.pathname;return null!=z(i.pathname,l)||null!=z(i.pathname,s)}(f)&&!0===c,w=v.encodeLocation?v.encodeLocation(f).pathname:f.pathname,y=m.pathname,x=h&&h.navigation&&h.navigation.location?h.navigation.location.pathname:null;a||(y=y.toLowerCase(),x=x?x.toLowerCase():null,w=w.toLowerCase()),x&&g&&(x=O(x,g)||x);const S="/"!==w&&w.endsWith("/")?w.length-1:w.length;let E,k=y===w||!s&&y.startsWith(w)&&"/"===y.charAt(S),C=null!=x&&(x===w||!s&&x.startsWith(w)&&"/"===x.charAt(w.length)),T={isActive:k,isPending:C,isTransitioning:b},M=k?n:void 0;E="function"==typeof i?i(T):[i,k?"active":null,C?"pending":null,b?"transitioning":null].filter(Boolean).join(" ");let P="function"==typeof l?l(T):l;return t.createElement(St,st({},p,{"aria-current":M,className:E,ref:r,style:P,to:u,unstable_viewTransition:c}),"function"==typeof d?d(T):d)}));var kt,Ct;(function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmit="useSubmit",e.UseSubmitFetcher="useSubmitFetcher",e.UseFetcher="useFetcher",e.useViewTransitionState="useViewTransitionState"})(kt||(kt={})),function(e){e.UseFetcher="useFetcher",e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"}(Ct||(Ct={}));var Tt,Mt,Pt,Lt=function(e){return e.MAIN_PAGE="/",e.INSURANCE_PAGE="/insurance",e.GASOLINE_PAGE="/gasoline",e.SERVICE_PAGE="/service",e.PARKING_PAGE="/parking",e}({});function zt(){return zt=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},zt.apply(this,arguments)}var _t,Ot;function Dt(){return Dt=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},Dt.apply(this,arguments)}var Nt;function At(){return At=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},At.apply(this,arguments)}var It=[{title:"Парковка",link:Lt.PARKING_PAGE},{title:"Страховка",link:Lt.INSURANCE_PAGE},{title:"Бензин",link:Lt.GASOLINE_PAGE},{title:"Обслуживание",link:Lt.SERVICE_PAGE}],Rt=[{link:"#",icon:function(e){return t.createElement("svg",At({xmlns:"http://www.w3.org/2000/svg",width:32,height:32,fill:"none"},e),Nt||(Nt=t.createElement("path",{fill:"#fff",fillRule:"evenodd",d:"M32 16c0 8.837-7.163 16-16 16S0 24.837 0 16 7.163 0 16 0s16 7.163 16 16m-21.286-1.466c-1.602.7-3.25 1.42-4.755 2.249-.787.575.259.983 1.239 1.365q.236.09.455.18l.368.116c1.09.348 2.306.735 3.365.152 1.739-.999 3.38-2.154 5.02-3.308q.805-.569 1.615-1.128l.085-.055c.46-.299 1.496-.97 1.113-.045-.906.99-1.876 1.867-2.851 2.749a62 62 0 0 0-1.961 1.825c-.561.455-1.144 1.372-.516 2.01 1.447 1.013 2.916 2 4.385 2.989l1.432.964c.808.645 2.071.124 2.249-.885l.237-1.391a392 392 0 0 0 1.265-7.699q.08-.604.172-1.21c.145-.978.29-1.957.335-2.94-.117-.982-1.307-.766-1.969-.545-3.404 1.295-6.773 2.686-10.13 4.101q-.57.253-1.153.506",clipRule:"evenodd"})))}},{link:"#",icon:function(e){return t.createElement("svg",Dt({xmlns:"http://www.w3.org/2000/svg",width:32,height:32,fill:"none"},e),_t||(_t=t.createElement("g",{clipPath:"url(#fb_svg__a)"},t.createElement("path",{fill:"#fff",d:"M32 16c0-8.837-7.163-16-16-16S0 7.163 0 16c0 7.988 5.85 14.606 13.5 15.806V20.625H9.438V16H13.5v-3.525c0-4.01 2.387-6.225 6.044-6.225 1.75 0 3.581.313 3.581.313V10.5h-2.019c-1.987 0-2.606 1.234-2.606 2.5v3h4.438l-.71 4.625H18.5v11.181C26.15 30.606 32 23.988 32 16"}))),Ot||(Ot=t.createElement("defs",null,t.createElement("clipPath",{id:"fb_svg__a"},t.createElement("path",{fill:"#fff",d:"M0 0h32v32H0z"})))))}},{link:"#",icon:function(e){return t.createElement("svg",zt({xmlns:"http://www.w3.org/2000/svg",width:32,height:32,fill:"none"},e),Tt||(Tt=t.createElement("path",{fill:"#fff",fillRule:"evenodd",d:"M16 0C7.163 0 0 7.163 0 16s7.163 16 16 16 16-7.163 16-16S24.837 0 16 0m-3.518 7.518c.91-.041 1.201-.051 3.519-.051h-.003c2.318 0 2.608.01 3.518.051.909.042 1.53.186 2.073.397a4.2 4.2 0 0 1 1.511.984c.475.474.767.95.985 1.511.21.543.354 1.163.397 2.072.04.91.051 1.2.051 3.518s-.01 2.608-.051 3.518c-.043.908-.187 1.528-.397 2.071a4.2 4.2 0 0 1-.985 1.512c-.474.474-.95.767-1.51.985-.543.21-1.164.354-2.072.396-.91.041-1.2.052-3.518.052s-2.608-.01-3.518-.052-1.53-.185-2.072-.396a4.2 4.2 0 0 1-1.511-.985 4.2 4.2 0 0 1-.984-1.512c-.211-.543-.355-1.163-.397-2.071-.041-.91-.051-1.2-.051-3.518s.01-2.608.051-3.519c.04-.908.185-1.528.396-2.07.22-.562.51-1.038.985-1.512.475-.475.95-.766 1.512-.984.543-.211 1.163-.355 2.071-.397",clipRule:"evenodd"})),Mt||(Mt=t.createElement("path",{fill:"#fff",fillRule:"evenodd",d:"M15.235 9.004h.766c2.278 0 2.548.009 3.448.05.832.038 1.284.177 1.584.293.399.155.682.34.981.639.299.298.484.583.639.981.116.3.256.752.294 1.584.04.9.05 1.17.05 3.447s-.01 2.548-.05 3.447c-.039.832-.178 1.284-.294 1.584-.155.398-.34.682-.639.98a2.64 2.64 0 0 1-.98.639c-.301.117-.753.256-1.585.294-.9.04-1.17.05-3.448.05s-2.549-.01-3.448-.05c-.832-.039-1.284-.178-1.585-.294a2.64 2.64 0 0 1-.981-.639 2.65 2.65 0 0 1-.639-.98c-.117-.3-.256-.752-.294-1.584-.04-.9-.049-1.17-.049-3.449s.008-2.548.05-3.447c.037-.832.176-1.284.293-1.585.155-.398.34-.682.639-.98.298-.3.583-.484.981-.64.3-.117.753-.255 1.585-.294.787-.035 1.092-.046 2.682-.048zm5.32 1.417a1.024 1.024 0 1 0 0 2.049 1.024 1.024 0 0 0 0-2.049m-8.936 5.58a4.382 4.382 0 1 1 8.764 0 4.382 4.382 0 0 1-8.764 0",clipRule:"evenodd"})),Pt||(Pt=t.createElement("path",{fill:"#fff",d:"M16 13.156a2.845 2.845 0 1 1 0 5.689 2.845 2.845 0 0 1 0-5.69"})))}}],jt=a(942),$t=a.n(jt),qt=a(848),Ft=function(e){var t=e.to,r=e.className,n=e.onClick,a=e.disabled,i=e.children,s={"darkgreen-to-green":"bg-gradient-to-r from-[#13493F] to-[#0C7B1B] transition-all hover:brightness-90 active:brightness-75","blue-to-ocean":"bg-gradient-to-r from-[#132949] to-[#0C7B67] transition-all hover:brightness-90 active:brightness-75","orange-to-red":"bg-gradient-to-r from-[#493013] to-[#7B0C3B] transition-all hover:brightness-90 active:brightness-75","darkpurple-to-purple":"bg-gradient-to-r from-[#281349] to-[#720C7B] transition-all hover:brightness-90 active:brightness-75","green-to-darkgreen":"bg-gradient-to-r from-[#0EC261] to-[#039F67] transition-all hover:brightness-90 active:brightness-75"}[e.variant];return t?(0,qt.jsx)("a",{href:t,className:$t()("button",s,r),children:i}):(0,qt.jsx)("button",{onClick:n,className:$t()("button",s,r),disabled:a,children:i})},Bt="PPVnXShLEZaQo7BaqqFz",Ht=function(e){var t=e.title,r=e.link,n=e.onClick;return(0,qt.jsx)(Et,{to:r,className:function(e){var t=e.isActive;return"".concat("ZmNXGkrNxeD833uJEUO2"," ").concat(t?"yODABYtkgYXYvtD2MxNv":"")},onClick:n,children:t})};const Vt=function(e){var t=e.handlerNavMenu;return(0,qt.jsx)("div",{className:"CJgQss7ShOnNKPNOLzko",onClick:function(e){e.target.closest(".".concat(Bt))||t()},children:(0,qt.jsxs)("div",{className:Bt,children:[(0,qt.jsx)("nav",{className:"_gNtOE9etFgFpID45trd",children:(0,qt.jsx)("ul",{className:"Nz1HV0_LJzBH7jkTvo8p",children:It.map((function(e){var r=e.title,n=e.link;return(0,qt.jsx)("li",{children:(0,qt.jsx)(Ht,{title:r,link:n,onClick:t})},r)}))})}),(0,qt.jsx)("div",{className:"bU8mElaQVB6y3wRMVWcC",children:Rt.map((function(e,t){var r=e.link,n=e.icon;return(0,qt.jsx)(Ft,{to:r,className:"W8LpUiBobZWCZsGO_SIM",children:(0,qt.jsx)(n,{})},t)}))}),(0,qt.jsx)(Ft,{className:"hidden p-0 mt-auto max-lg:block text-main",children:"Eng"})]})})},Ut=function(e){var t=e.className,r=e.children;return(0,qt.jsx)("div",{className:$t()("h-full w-full min-w-[320px] px-[64px] max-md:px-[16px] max-lg:px-[32px]",t),children:r})};var Wt;function Gt(){return Gt=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},Gt.apply(this,arguments)}const Yt=function(e){return t.createElement("svg",Gt({xmlns:"http://www.w3.org/2000/svg",width:190,height:24,fill:"none"},e),Wt||(Wt=t.createElement("path",{fill:"#0EC261",d:"M18.248 23h-4.395L5.3 8.967V23H.904V1.672H5.3l8.57 14.062V1.672h4.379zm10.854.293q-3.486 0-5.683-2.139-2.183-2.138-2.183-5.698v-.41q0-2.388.923-4.263.923-1.89 2.608-2.9 1.699-1.026 3.867-1.026 3.252 0 5.112 2.051 1.875 2.05 1.875 5.816v1.728H25.528q.206 1.553 1.23 2.49 1.04.938 2.623.938 2.445 0 3.823-1.773l2.08 2.33q-.952 1.347-2.578 2.109-1.626.747-3.604.747m-.483-13.008q-1.26 0-2.05.85-.777.85-.997 2.431h5.889v-.337q-.03-1.406-.762-2.167-.732-.777-2.08-.777m16.714 13.008q-3.486 0-5.684-2.139-2.182-2.138-2.182-5.698v-.41q0-2.388.923-4.263.922-1.89 2.607-2.9 1.7-1.026 3.867-1.026 3.252 0 5.113 2.051 1.875 2.05 1.875 5.816v1.728H41.759q.205 1.553 1.23 2.49 1.041.938 2.622.938 2.447 0 3.824-1.773l2.08 2.33q-.953 1.347-2.578 2.109-1.626.747-3.604.747m-.483-13.008q-1.26 0-2.051.85-.777.85-.996 2.431h5.888v-.337q-.03-1.406-.761-2.167-.733-.777-2.08-.777m8.76 4.673q0-3.705 1.655-5.903 1.67-2.198 4.555-2.198 2.315 0 3.824 1.729V.5h4.248V23h-3.824l-.205-1.685q-1.582 1.978-4.072 1.978-2.797 0-4.497-2.197-1.685-2.212-1.685-6.138m4.233.308q0 2.226.776 3.413.777 1.185 2.256 1.186 1.963 0 2.769-1.655v-6.255q-.791-1.655-2.74-1.655-3.06 0-3.061 4.966M79.8 23V10.256h-2.359V7.15h2.359V5.803q0-2.667 1.523-4.131 1.538-1.48 4.292-1.48.88 0 2.153.293l-.043 3.282q-.528-.132-1.29-.132-2.387 0-2.387 2.241V7.15h3.15v3.106h-3.15V23zm8.935-8.071q0-2.36.908-4.204.909-1.845 2.608-2.857 1.713-1.01 3.97-1.01 3.208 0 5.229 1.962 2.036 1.963 2.271 5.332l.029 1.084q0 3.648-2.036 5.86-2.037 2.197-5.464 2.197t-5.479-2.197q-2.036-2.197-2.036-5.977zm4.234.307q0 2.257.85 3.457.849 1.187 2.431 1.187 1.538 0 2.402-1.172.864-1.186.865-3.78 0-2.212-.865-3.427-.864-1.216-2.431-1.216-1.552 0-2.403 1.216-.85 1.2-.85 3.735m22.295-4.116a11.5 11.5 0 0 0-1.524-.117q-2.402 0-3.149 1.626V23h-4.234V7.15h3.999l.118 1.89q1.274-2.183 3.53-2.183.703 0 1.318.19zm8.862 3.838q0-3.705 1.655-5.903 1.67-2.198 4.556-2.198 2.314 0 3.823 1.729V.5h4.248V23h-3.823l-.205-1.685q-1.582 1.978-4.072 1.978-2.799 0-4.497-2.197-1.686-2.212-1.685-6.138m4.233.308q0 2.226.777 3.413.776 1.185 2.256 1.186 1.962 0 2.768-1.655v-6.255q-.79-1.655-2.739-1.655-3.062 0-3.062 4.966m22.237-4.146a11.5 11.5 0 0 0-1.524-.117q-2.402 0-3.149 1.626V23h-4.234V7.15h3.999l.118 1.89q1.274-2.183 3.53-2.183.703 0 1.318.19zM157.115 23h-4.248V7.15h4.248zm-4.497-19.951q0-.952.63-1.568.645-.615 1.743-.615 1.084 0 1.729.615.644.615.644 1.568 0 .967-.659 1.582-.645.615-1.714.615-1.07 0-1.728-.615-.645-.615-.645-1.582m13.931 14.78 2.944-10.679h4.424L168.57 23h-4.043l-5.346-15.85h4.423zm16.333 5.464q-3.486 0-5.684-2.139-2.182-2.138-2.182-5.698v-.41q0-2.388.922-4.263.924-1.89 2.608-2.9 1.7-1.026 3.867-1.026 3.252 0 5.112 2.051 1.875 2.05 1.875 5.816v1.728h-10.092q.204 1.553 1.23 2.49 1.04.938 2.622.938 2.446 0 3.823-1.773l2.08 2.33q-.951 1.347-2.578 2.109-1.626.747-3.603.747m-.484-13.008q-1.259 0-2.05.85-.777.85-.996 2.431h5.888v-.337q-.029-1.406-.761-2.167-.733-.777-2.081-.777"})))};var Xt,Qt;function Kt(){return Kt=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},Kt.apply(this,arguments)}const Jt=function(e){return t.createElement("svg",Kt({xmlns:"http://www.w3.org/2000/svg",width:18,height:20,fill:"none"},e),Xt||(Xt=t.createElement("path",{stroke:"#999",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:2,d:"M16.08 8.364C16.08 14.09 8.54 19 8.54 19S1 14.09 1 8.364c0-1.953.794-3.826 2.208-5.207A7.63 7.63 0 0 1 8.54 1c2 0 3.918.776 5.332 2.157a7.28 7.28 0 0 1 2.208 5.207"})),Qt||(Qt=t.createElement("path",{stroke:"#999",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:2,d:"M8.54 10.818c1.388 0 2.514-1.099 2.514-2.454S9.928 5.909 8.54 5.909 6.027 7.008 6.027 8.364c0 1.355 1.125 2.454 2.513 2.454"})))};function Zt(){return Zt=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},Zt.apply(this,arguments)}var er=function(e){var r=e.level,n=void 0===r?"p":r,a=e.children,i=e.className,s=function(e){var r=Zt({},(function(e){if(null==e)throw new TypeError("Cannot destructure "+e)}(e),e));return t.createElement(n,r,a)};return(0,qt.jsx)(s,{className:i,children:a})};const tr=function(e){var t=e.className;return(0,qt.jsxs)("div",{className:$t()("flex justify-between py-[32px] max-md:flex-col max-md:items-end",t),children:[(0,qt.jsx)(Yt,{}),(0,qt.jsxs)("div",{className:"flex items-center max-md:mt-2",children:[(0,qt.jsx)(Jt,{className:"mr-2"}),(0,qt.jsx)(er,{level:"p",children:" Ульяновск "})]})]})};var rr="uh88TQkQLezQSH9W8Nmq";function nr(e){return nr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},nr(e)}const ar=function(e){var t,r,n,a,i=e.handlerNavMenu,s=e.isOpen;return(0,qt.jsxs)("div",{className:$t()("QVnHeWJl_G9LJ7iBTK4y",(t={},r="hTWHEKyvQZ4aI6kXW5eE",n=s,a=function(e,t){if("object"!=nr(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!=nr(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(r),(r="symbol"==nr(a)?a:a+"")in t?Object.defineProperty(t,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[r]=n,t)),onClick:i,children:[(0,qt.jsx)("div",{className:rr}),(0,qt.jsx)("div",{className:rr}),(0,qt.jsx)("div",{className:rr})]})},ir=function(e){var t=e.handlerNavMenu,r=e.isBurgerOpen;return(0,qt.jsxs)("div",{className:"flex flex-col items-center w-sidebar bg-[#151B1F] py-[32px] max-md:bg-transparent max-md:absolute",children:[(0,qt.jsx)(ar,{handlerNavMenu:t,isOpen:r}),(0,qt.jsx)(Ft,{className:"p-[10px] mt-auto max-lg:hidden text-main border-white rounded-[50%] transition-colors hover:border-2 hover:text-white active:text-main",children:"Eng"})]})};function sr(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}const lr=function(){var e,r,n=He().pathname,a=(e=(0,t.useState)(!1),r=2,function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,a,i,s,l=[],o=!0,u=!1;try{if(i=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;o=!1}else for(;!(o=(n=i.call(r)).done)&&(l.push(n.value),l.length!==t);o=!0);}catch(e){u=!0,a=e}finally{try{if(!o&&null!=r.return&&(s=r.return(),Object(s)!==s))return}finally{if(u)throw a}}return l}}(e,r)||function(e,t){if(e){if("string"==typeof e)return sr(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?sr(e,t):void 0}}(e,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=a[0],s=a[1],l=function(){s((function(e){return!e}))};return(0,qt.jsxs)("main",{className:"min-h-[100vh] flex overflow-hidden m-auto",children:[(0,qt.jsx)(ir,{isBurgerOpen:i,handlerNavMenu:l}),i&&(0,qt.jsx)(Vt,{handlerNavMenu:l}),(0,qt.jsxs)("div",{className:"flex-grow w-wrapper",children:[n!=Lt.MAIN_PAGE&&(0,qt.jsxs)(Ut,{children:[(0,qt.jsx)(tr,{}),(0,qt.jsx)(nt,{})]}),(0,qt.jsx)(nt,{})]})]})};var or,ur=function(){return(0,qt.jsx)("div",{children:"Lorem ipsum dolor sit amet consectetur adipisicing elit. Assumenda expedita aliquid asperiores earum neque commodi, dolores cumque iste consectetur cupiditate reiciendis veritatis quaerat nihil tenetur consequuntur in nemo! Facere nam officiis necessitatibus laboriosam dignissimos voluptatem ratione incidunt nesciunt ducimus quo voluptas, perferendis cumque vitae sunt earum explicabo fuga corporis. Facere iure fuga quidem blanditiis? Pariatur explicabo suscipit voluptatibus ipsa nobis blanditiis recusandae aspernatur exercitationem molestias eaque consectetur, libero, earum eius tempore unde omnis delectus sapiente eligendi praesentium nulla. Dolore, magni incidunt. Facilis, necessitatibus. Facere quo, dolore atque in provident natus laboriosam culpa aut velit ducimus perferendis. Ex vel minus nisi tenetur excepturi pariatur eos atque vero fuga ipsam, alias itaque laudantium. Recusandae pariatur vero voluptatibus quidem enim hic id minus nulla inventore eaque facilis ad praesentium repellendus temporibus veritatis doloribus quod odit reprehenderit unde est dicta illo, laboriosam architecto neque. Enim, soluta accusamus. Accusamus alias ipsa nam nostrum eius pariatur, dolorem ea. Rem placeat, similique perferendis optio rerum nihil explicabo amet laboriosam odit mollitia laborum id minus aperiam ad eligendi asperiores. Eos incidunt iste quam, earum voluptatum veniam, fugiat omnis magni nobis dicta itaque quo minus perspiciatis reiciendis impedit, tenetur totam ullam nam rerum fugit! Aut modi dolorum officia, animi, totam minima incidunt eum similique voluptate explicabo laboriosam, velit repellendus placeat quidem itaque id ratione. Molestiae nulla sequi iste, nesciunt voluptate laboriosam est tenetur fugiat. Molestiae qui ea aliquam quos soluta adipisci fugit repellendus consectetur sed, aspernatur harum consequatur eum numquam ducimus. Earum vitae pariatur alias quaerat voluptatem neque soluta fuga quas ratione non dolorum amet voluptates nostrum, doloremque corrupti dolorem, ipsum iure animi ad debitis sint recusandae provident quasi! Ipsam molestias et itaque dolorem? Suscipit cumque, consequatur accusamus quae eligendi vitae explicabo impedit repellat, aperiam alias fuga, eum ab eius! Tempore veniam vitae, recusandae necessitatibus dolor, ad corporis quibusdam, voluptatum quo possimus qui adipisci nulla minima veritatis ut minus modi aliquid suscipit delectus. Quod aperiam eum fugiat repellat corrupti. Cumque qui illum, tempore molestiae corporis accusantium unde? Placeat eligendi eum quod autem magnam deleniti possimus accusantium delectus dolore! Minus error necessitatibus sint eveniet eius mollitia asperiores, ipsa sequi earum aspernatur a suscipit dignissimos molestias veritatis quia ratione, itaque cupiditate non magni laboriosam, quas culpa voluptates eaque. Nulla asperiores quos dolore recusandae placeat omnis quibusdam illum sed quam officiis ex totam optio quas, qui aspernatur, necessitatibus corrupti temporibus expedita fugit maiores. Dicta iure velit nulla sint? Asperiores delectus sit, vero tempora harum iure recusandae magni laudantium eaque porro non sed suscipit facilis nesciunt quos reiciendis laboriosam! Soluta, ipsum? Voluptates quibusdam modi debitis quis exercitationem quo dignissimos suscipit? Commodi odio praesentium vero ab, omnis dolor quas possimus excepturi ipsum debitis dolorum impedit pariatur est, eius ipsa natus corrupti similique quasi voluptatum quam libero asperiores aut sed. Maxime, deserunt sunt, dolorum a quia iure dicta praesentium tempora placeat expedita rem excepturi enim error cum accusantium voluptate corrupti, aperiam quas reiciendis. Quae quibusdam et magni at aut facere culpa soluta quod consequuntur est adipisci veritatis obcaecati incidunt consectetur enim, voluptatibus repellat sapiente nulla tempore explicabo officia. Rerum quaerat modi voluptatem, libero quod et neque excepturi mollitia reiciendis a quas assumenda eligendi repellendus consequuntur quidem harum nulla accusantium nisi saepe porro, commodi voluptates. Vitae odio explicabo neque temporibus dignissimos, facere animi quia? Possimus veritatis cupiditate soluta recusandae nemo. Quibusdam, error repellendus! Hic quam, architecto magni saepe libero, placeat dolores delectus molestias sint laboriosam dignissimos modi quaerat tempore sunt excepturi aut. Illo possimus fuga atque perspiciatis enim consequatur eos impedit, tempore dolore ducimus animi delectus laborum laboriosam dolorem, ipsum, error quis blanditiis excepturi perferendis velit! Aut qui laudantium excepturi. Exercitationem cumque quaerat vitae sapiente molestias iusto consequatur officia eaque laborum dicta in corrupti non, quae fugit illum! Id in qui itaque totam sunt magni alias quod nam iste, fugiat, corporis nulla, inventore hic! Quae sit in a exercitationem, error voluptatum laborum ipsum perferendis accusantium ducimus dicta ut doloribus molestias enim rem delectus aliquid nobis iure iusto reprehenderit quas deleniti est odit. Consequuntur, dolorem nihil beatae asperiores earum aliquam eligendi optio hic consequatur praesentium inventore? Repellendus molestiae nisi magnam et eum cum, impedit delectus laudantium dignissimos id odio voluptas corporis, illum voluptates debitis? Tenetur, accusamus perferendis veritatis molestias architecto maiores aliquam, non vitae iure veniam ducimus itaque quos excepturi ad, alias hic unde rerum accusantium nesciunt recusandae in eius. Voluptates dicta, amet natus vitae qui doloremque culpa tempore optio harum! Molestias tempore, mollitia rem expedita pariatur minus iusto consequatur ratione nostrum totam illum non ad explicabo quis voluptatem sint architecto eum ipsum deserunt atque animi facilis, ullam incidunt quo? Doloremque sit exercitationem praesentium corrupti est aliquid, deleniti consequatur at fuga, repellendus voluptas incidunt, sapiente cupiditate. Exercitationem odit repellat dicta voluptatem sunt iure est sapiente dolorem? Consequuntur nostrum porro, minus dolore, non consequatur minima veniam odio laboriosam illum saepe cumque aliquid quod magnam, at voluptates similique aliquam! Porro deleniti cumque, commodi aliquid labore animi. Sint, vero rerum! Aut necessitatibus molestias ex nulla et voluptas nam temporibus nostrum delectus facere voluptatem placeat reprehenderit voluptatum vel cupiditate, earum atque velit ipsa omnis dolorem. Atque incidunt totam beatae, placeat dolorum, iure, consequuntur fugit odit praesentium doloribus animi voluptatum! Doloremque placeat error soluta eius iure dolorem libero officiis, dicta voluptatibus voluptate, recusandae adipisci maiores nihil quidem. Soluta repudiandae mollitia in dolore ut odit ea. Quo dolore corporis neque obcaecati totam, error, repellat quidem voluptate tempora at laborum pariatur fugiat velit non? Dolorum natus cum nisi itaque sed recusandae impedit voluptas modi, perspiciatis voluptatem eum, expedita sequi doloribus tempore laboriosam, tenetur id minus quibusdam consectetur. Doloribus temporibus dolores odit corrupti neque quos iste fuga eligendi non, quibusdam sequi quam eius sit consequuntur at inventore. Praesentium aspernatur ipsam soluta consectetur molestias autem. Quae ut cupiditate, ex hic maiores voluptatibus doloribus laboriosam qui, iusto totam excepturi minima atque dolorum ipsam magni ducimus tenetur corporis voluptas quas quaerat ipsum. Veniam accusamus deserunt reprehenderit explicabo id inventore! Similique aspernatur ex dolorem animi, qui reprehenderit mollitia expedita fugiat veniam facere illo alias, suscipit unde asperiores officiis sapiente quibusdam beatae fugit rerum quis, voluptas totam labore quos facilis?"})};function cr(){return cr=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},cr.apply(this,arguments)}const dr=function(e){return t.createElement("svg",cr({xmlns:"http://www.w3.org/2000/svg",width:10,height:20,fill:"none"},e),or||(or=t.createElement("path",{stroke:"#EEE",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:2,d:"m1 1 8 9-8 9"})))};var pr;function fr(){return fr=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},fr.apply(this,arguments)}const mr=function(e){return t.createElement("svg",fr({xmlns:"http://www.w3.org/2000/svg",width:10,height:20,fill:"none"},e),pr||(pr=t.createElement("path",{stroke:"#EEE",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:2,d:"m9 1-8 9 8 9"})))},hr=a.p+"d145f940c93912ec30a9.png",vr=a.p+"9987b959667bd3e41cd4.png";var gr=[{title:"Бесплатный парковка",preview:"Оставляйте машину на платных городских парковках и разрешенных местах, не нарушая ПДД, а также в аэропортах.",variantButton:"darkgreen-to-green",imagePath:a.p+"5bab7fe98a593855a876.png"},{title:"Страховка",preview:"Полная страховка страховка автомобиля",variantButton:"blue-to-ocean",imagePath:vr},{title:"Бензин",preview:"Полный бак на любой заправке города за наш счёт",variantButton:"orange-to-red",imagePath:hr},{title:"Обслуживание",preview:"Автомобиль проходит еженедельное ТО",variantButton:"darkpurple-to-purple",imagePath:a.p+"6915a2b097f98ed5fea7.png"}];function br(e){return null!==e&&"object"==typeof e&&"constructor"in e&&e.constructor===Object}function wr(e,t){void 0===e&&(e={}),void 0===t&&(t={}),Object.keys(t).forEach((r=>{void 0===e[r]?e[r]=t[r]:br(t[r])&&br(e[r])&&Object.keys(t[r]).length>0&&wr(e[r],t[r])}))}const yr={body:{},addEventListener(){},removeEventListener(){},activeElement:{blur(){},nodeName:""},querySelector:()=>null,querySelectorAll:()=>[],getElementById:()=>null,createEvent:()=>({initEvent(){}}),createElement:()=>({children:[],childNodes:[],style:{},setAttribute(){},getElementsByTagName:()=>[]}),createElementNS:()=>({}),importNode:()=>null,location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function xr(){const e="undefined"!=typeof document?document:{};return wr(e,yr),e}const Sr={document:yr,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState(){},pushState(){},go(){},back(){}},CustomEvent:function(){return this},addEventListener(){},removeEventListener(){},getComputedStyle:()=>({getPropertyValue:()=>""}),Image(){},Date(){},screen:{},setTimeout(){},clearTimeout(){},matchMedia:()=>({}),requestAnimationFrame:e=>"undefined"==typeof setTimeout?(e(),null):setTimeout(e,0),cancelAnimationFrame(e){"undefined"!=typeof setTimeout&&clearTimeout(e)}};function Er(){const e="undefined"!=typeof window?window:{};return wr(e,Sr),e}function kr(e){return void 0===e&&(e=""),e.trim().split(" ").filter((e=>!!e.trim()))}function Cr(e,t){return void 0===t&&(t=0),setTimeout(e,t)}function Tr(){return Date.now()}function Mr(e,t){void 0===t&&(t="x");const r=Er();let n,a,i;const s=function(e){const t=Er();let r;return t.getComputedStyle&&(r=t.getComputedStyle(e,null)),!r&&e.currentStyle&&(r=e.currentStyle),r||(r=e.style),r}(e);return r.WebKitCSSMatrix?(a=s.transform||s.webkitTransform,a.split(",").length>6&&(a=a.split(", ").map((e=>e.replace(",","."))).join(", ")),i=new r.WebKitCSSMatrix("none"===a?"":a)):(i=s.MozTransform||s.OTransform||s.MsTransform||s.msTransform||s.transform||s.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,"),n=i.toString().split(",")),"x"===t&&(a=r.WebKitCSSMatrix?i.m41:16===n.length?parseFloat(n[12]):parseFloat(n[4])),"y"===t&&(a=r.WebKitCSSMatrix?i.m42:16===n.length?parseFloat(n[13]):parseFloat(n[5])),a||0}function Pr(e){return"object"==typeof e&&null!==e&&e.constructor&&"Object"===Object.prototype.toString.call(e).slice(8,-1)}function Lr(){const e=Object(arguments.length<=0?void 0:arguments[0]),t=["__proto__","constructor","prototype"];for(let n=1;n<arguments.length;n+=1){const a=n<0||arguments.length<=n?void 0:arguments[n];if(null!=a&&(r=a,!("undefined"!=typeof window&&void 0!==window.HTMLElement?r instanceof HTMLElement:r&&(1===r.nodeType||11===r.nodeType)))){const r=Object.keys(Object(a)).filter((e=>t.indexOf(e)<0));for(let t=0,n=r.length;t<n;t+=1){const n=r[t],i=Object.getOwnPropertyDescriptor(a,n);void 0!==i&&i.enumerable&&(Pr(e[n])&&Pr(a[n])?a[n].__swiper__?e[n]=a[n]:Lr(e[n],a[n]):!Pr(e[n])&&Pr(a[n])?(e[n]={},a[n].__swiper__?e[n]=a[n]:Lr(e[n],a[n])):e[n]=a[n])}}}var r;return e}function zr(e,t,r){e.style.setProperty(t,r)}function _r(e){let{swiper:t,targetPosition:r,side:n}=e;const a=Er(),i=-t.translate;let s,l=null;const o=t.params.speed;t.wrapperEl.style.scrollSnapType="none",a.cancelAnimationFrame(t.cssModeFrameID);const u=r>i?"next":"prev",c=(e,t)=>"next"===u&&e>=t||"prev"===u&&e<=t,d=()=>{s=(new Date).getTime(),null===l&&(l=s);const e=Math.max(Math.min((s-l)/o,1),0),u=.5-Math.cos(e*Math.PI)/2;let p=i+u*(r-i);if(c(p,r)&&(p=r),t.wrapperEl.scrollTo({[n]:p}),c(p,r))return t.wrapperEl.style.overflow="hidden",t.wrapperEl.style.scrollSnapType="",setTimeout((()=>{t.wrapperEl.style.overflow="",t.wrapperEl.scrollTo({[n]:p})})),void a.cancelAnimationFrame(t.cssModeFrameID);t.cssModeFrameID=a.requestAnimationFrame(d)};d()}function Or(e){return e.querySelector(".swiper-slide-transform")||e.shadowRoot&&e.shadowRoot.querySelector(".swiper-slide-transform")||e}function Dr(e,t){return void 0===t&&(t=""),[...e.children].filter((e=>e.matches(t)))}function Nr(e){try{return void console.warn(e)}catch(e){}}function Ar(e,t){void 0===t&&(t=[]);const r=document.createElement(e);return r.classList.add(...Array.isArray(t)?t:kr(t)),r}function Ir(e){const t=Er(),r=xr(),n=e.getBoundingClientRect(),a=r.body,i=e.clientTop||a.clientTop||0,s=e.clientLeft||a.clientLeft||0,l=e===t?t.scrollY:e.scrollTop,o=e===t?t.scrollX:e.scrollLeft;return{top:n.top+l-i,left:n.left+o-s}}function Rr(e,t){return Er().getComputedStyle(e,null).getPropertyValue(t)}function jr(e){let t,r=e;if(r){for(t=0;null!==(r=r.previousSibling);)1===r.nodeType&&(t+=1);return t}}function $r(e,t){const r=[];let n=e.parentElement;for(;n;)t?n.matches(t)&&r.push(n):r.push(n),n=n.parentElement;return r}function qr(e,t){t&&e.addEventListener("transitionend",(function r(n){n.target===e&&(t.call(e,n),e.removeEventListener("transitionend",r))}))}function Fr(e,t,r){const n=Er();return r?e["width"===t?"offsetWidth":"offsetHeight"]+parseFloat(n.getComputedStyle(e,null).getPropertyValue("width"===t?"margin-right":"margin-top"))+parseFloat(n.getComputedStyle(e,null).getPropertyValue("width"===t?"margin-left":"margin-bottom")):e.offsetWidth}function Br(e){return(Array.isArray(e)?e:[e]).filter((e=>!!e))}let Hr,Vr,Ur;function Wr(){return Hr||(Hr=function(){const e=Er(),t=xr();return{smoothScroll:t.documentElement&&t.documentElement.style&&"scrollBehavior"in t.documentElement.style,touch:!!("ontouchstart"in e||e.DocumentTouch&&t instanceof e.DocumentTouch)}}()),Hr}function Gr(e){return void 0===e&&(e={}),Vr||(Vr=function(e){let{userAgent:t}=void 0===e?{}:e;const r=Wr(),n=Er(),a=n.navigator.platform,i=t||n.navigator.userAgent,s={ios:!1,android:!1},l=n.screen.width,o=n.screen.height,u=i.match(/(Android);?[\s\/]+([\d.]+)?/);let c=i.match(/(iPad).*OS\s([\d_]+)/);const d=i.match(/(iPod)(.*OS\s([\d_]+))?/),p=!c&&i.match(/(iPhone\sOS|iOS)\s([\d_]+)/),f="Win32"===a;let m="MacIntel"===a;return!c&&m&&r.touch&&["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768","820x1180","1180x820","810x1080","1080x810"].indexOf(`${l}x${o}`)>=0&&(c=i.match(/(Version)\/([\d.]+)/),c||(c=[0,1,"13_0_0"]),m=!1),u&&!f&&(s.os="android",s.android=!0),(c||p||d)&&(s.os="ios",s.ios=!0),s}(e)),Vr}var Yr={on(e,t,r){const n=this;if(!n.eventsListeners||n.destroyed)return n;if("function"!=typeof t)return n;const a=r?"unshift":"push";return e.split(" ").forEach((e=>{n.eventsListeners[e]||(n.eventsListeners[e]=[]),n.eventsListeners[e][a](t)})),n},once(e,t,r){const n=this;if(!n.eventsListeners||n.destroyed)return n;if("function"!=typeof t)return n;function a(){n.off(e,a),a.__emitterProxy&&delete a.__emitterProxy;for(var r=arguments.length,i=new Array(r),s=0;s<r;s++)i[s]=arguments[s];t.apply(n,i)}return a.__emitterProxy=t,n.on(e,a,r)},onAny(e,t){const r=this;if(!r.eventsListeners||r.destroyed)return r;if("function"!=typeof e)return r;const n=t?"unshift":"push";return r.eventsAnyListeners.indexOf(e)<0&&r.eventsAnyListeners[n](e),r},offAny(e){const t=this;if(!t.eventsListeners||t.destroyed)return t;if(!t.eventsAnyListeners)return t;const r=t.eventsAnyListeners.indexOf(e);return r>=0&&t.eventsAnyListeners.splice(r,1),t},off(e,t){const r=this;return!r.eventsListeners||r.destroyed?r:r.eventsListeners?(e.split(" ").forEach((e=>{void 0===t?r.eventsListeners[e]=[]:r.eventsListeners[e]&&r.eventsListeners[e].forEach(((n,a)=>{(n===t||n.__emitterProxy&&n.__emitterProxy===t)&&r.eventsListeners[e].splice(a,1)}))})),r):r},emit(){const e=this;if(!e.eventsListeners||e.destroyed)return e;if(!e.eventsListeners)return e;let t,r,n;for(var a=arguments.length,i=new Array(a),s=0;s<a;s++)i[s]=arguments[s];return"string"==typeof i[0]||Array.isArray(i[0])?(t=i[0],r=i.slice(1,i.length),n=e):(t=i[0].events,r=i[0].data,n=i[0].context||e),r.unshift(n),(Array.isArray(t)?t:t.split(" ")).forEach((t=>{e.eventsAnyListeners&&e.eventsAnyListeners.length&&e.eventsAnyListeners.forEach((e=>{e.apply(n,[t,...r])})),e.eventsListeners&&e.eventsListeners[t]&&e.eventsListeners[t].forEach((e=>{e.apply(n,r)}))})),e}};const Xr=(e,t,r)=>{t&&!e.classList.contains(r)?e.classList.add(r):!t&&e.classList.contains(r)&&e.classList.remove(r)},Qr=(e,t)=>{if(!e||e.destroyed||!e.params)return;const r=t.closest(e.isElement?"swiper-slide":`.${e.params.slideClass}`);if(r){let t=r.querySelector(`.${e.params.lazyPreloaderClass}`);!t&&e.isElement&&(r.shadowRoot?t=r.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`):requestAnimationFrame((()=>{r.shadowRoot&&(t=r.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`),t&&t.remove())}))),t&&t.remove()}},Kr=(e,t)=>{if(!e.slides[t])return;const r=e.slides[t].querySelector('[loading="lazy"]');r&&r.removeAttribute("loading")},Jr=e=>{if(!e||e.destroyed||!e.params)return;let t=e.params.lazyPreloadPrevNext;const r=e.slides.length;if(!r||!t||t<0)return;t=Math.min(t,r);const n="auto"===e.params.slidesPerView?e.slidesPerViewDynamic():Math.ceil(e.params.slidesPerView),a=e.activeIndex;if(e.params.grid&&e.params.grid.rows>1){const r=a,i=[r-t];return i.push(...Array.from({length:t}).map(((e,t)=>r+n+t))),void e.slides.forEach(((t,r)=>{i.includes(t.column)&&Kr(e,r)}))}const i=a+n-1;if(e.params.rewind||e.params.loop)for(let n=a-t;n<=i+t;n+=1){const t=(n%r+r)%r;(t<a||t>i)&&Kr(e,t)}else for(let n=Math.max(a-t,0);n<=Math.min(i+t,r-1);n+=1)n!==a&&(n>i||n<a)&&Kr(e,n)};var Zr={updateSize:function(){const e=this;let t,r;const n=e.el;t=void 0!==e.params.width&&null!==e.params.width?e.params.width:n.clientWidth,r=void 0!==e.params.height&&null!==e.params.height?e.params.height:n.clientHeight,0===t&&e.isHorizontal()||0===r&&e.isVertical()||(t=t-parseInt(Rr(n,"padding-left")||0,10)-parseInt(Rr(n,"padding-right")||0,10),r=r-parseInt(Rr(n,"padding-top")||0,10)-parseInt(Rr(n,"padding-bottom")||0,10),Number.isNaN(t)&&(t=0),Number.isNaN(r)&&(r=0),Object.assign(e,{width:t,height:r,size:e.isHorizontal()?t:r}))},updateSlides:function(){const e=this;function t(t,r){return parseFloat(t.getPropertyValue(e.getDirectionLabel(r))||0)}const r=e.params,{wrapperEl:n,slidesEl:a,size:i,rtlTranslate:s,wrongRTL:l}=e,o=e.virtual&&r.virtual.enabled,u=o?e.virtual.slides.length:e.slides.length,c=Dr(a,`.${e.params.slideClass}, swiper-slide`),d=o?e.virtual.slides.length:c.length;let p=[];const f=[],m=[];let h=r.slidesOffsetBefore;"function"==typeof h&&(h=r.slidesOffsetBefore.call(e));let v=r.slidesOffsetAfter;"function"==typeof v&&(v=r.slidesOffsetAfter.call(e));const g=e.snapGrid.length,b=e.slidesGrid.length;let w=r.spaceBetween,y=-h,x=0,S=0;if(void 0===i)return;"string"==typeof w&&w.indexOf("%")>=0?w=parseFloat(w.replace("%",""))/100*i:"string"==typeof w&&(w=parseFloat(w)),e.virtualSize=-w,c.forEach((e=>{s?e.style.marginLeft="":e.style.marginRight="",e.style.marginBottom="",e.style.marginTop=""})),r.centeredSlides&&r.cssMode&&(zr(n,"--swiper-centered-offset-before",""),zr(n,"--swiper-centered-offset-after",""));const E=r.grid&&r.grid.rows>1&&e.grid;let k;E?e.grid.initSlides(c):e.grid&&e.grid.unsetSlides();const C="auto"===r.slidesPerView&&r.breakpoints&&Object.keys(r.breakpoints).filter((e=>void 0!==r.breakpoints[e].slidesPerView)).length>0;for(let n=0;n<d;n+=1){let a;if(k=0,c[n]&&(a=c[n]),E&&e.grid.updateSlide(n,a,c),!c[n]||"none"!==Rr(a,"display")){if("auto"===r.slidesPerView){C&&(c[n].style[e.getDirectionLabel("width")]="");const i=getComputedStyle(a),s=a.style.transform,l=a.style.webkitTransform;if(s&&(a.style.transform="none"),l&&(a.style.webkitTransform="none"),r.roundLengths)k=e.isHorizontal()?Fr(a,"width",!0):Fr(a,"height",!0);else{const e=t(i,"width"),r=t(i,"padding-left"),n=t(i,"padding-right"),s=t(i,"margin-left"),l=t(i,"margin-right"),o=i.getPropertyValue("box-sizing");if(o&&"border-box"===o)k=e+s+l;else{const{clientWidth:t,offsetWidth:i}=a;k=e+r+n+s+l+(i-t)}}s&&(a.style.transform=s),l&&(a.style.webkitTransform=l),r.roundLengths&&(k=Math.floor(k))}else k=(i-(r.slidesPerView-1)*w)/r.slidesPerView,r.roundLengths&&(k=Math.floor(k)),c[n]&&(c[n].style[e.getDirectionLabel("width")]=`${k}px`);c[n]&&(c[n].swiperSlideSize=k),m.push(k),r.centeredSlides?(y=y+k/2+x/2+w,0===x&&0!==n&&(y=y-i/2-w),0===n&&(y=y-i/2-w),Math.abs(y)<.001&&(y=0),r.roundLengths&&(y=Math.floor(y)),S%r.slidesPerGroup==0&&p.push(y),f.push(y)):(r.roundLengths&&(y=Math.floor(y)),(S-Math.min(e.params.slidesPerGroupSkip,S))%e.params.slidesPerGroup==0&&p.push(y),f.push(y),y=y+k+w),e.virtualSize+=k+w,x=k,S+=1}}if(e.virtualSize=Math.max(e.virtualSize,i)+v,s&&l&&("slide"===r.effect||"coverflow"===r.effect)&&(n.style.width=`${e.virtualSize+w}px`),r.setWrapperSize&&(n.style[e.getDirectionLabel("width")]=`${e.virtualSize+w}px`),E&&e.grid.updateWrapperSize(k,p),!r.centeredSlides){const t=[];for(let n=0;n<p.length;n+=1){let a=p[n];r.roundLengths&&(a=Math.floor(a)),p[n]<=e.virtualSize-i&&t.push(a)}p=t,Math.floor(e.virtualSize-i)-Math.floor(p[p.length-1])>1&&p.push(e.virtualSize-i)}if(o&&r.loop){const t=m[0]+w;if(r.slidesPerGroup>1){const n=Math.ceil((e.virtual.slidesBefore+e.virtual.slidesAfter)/r.slidesPerGroup),a=t*r.slidesPerGroup;for(let e=0;e<n;e+=1)p.push(p[p.length-1]+a)}for(let n=0;n<e.virtual.slidesBefore+e.virtual.slidesAfter;n+=1)1===r.slidesPerGroup&&p.push(p[p.length-1]+t),f.push(f[f.length-1]+t),e.virtualSize+=t}if(0===p.length&&(p=[0]),0!==w){const t=e.isHorizontal()&&s?"marginLeft":e.getDirectionLabel("marginRight");c.filter(((e,t)=>!(r.cssMode&&!r.loop)||t!==c.length-1)).forEach((e=>{e.style[t]=`${w}px`}))}if(r.centeredSlides&&r.centeredSlidesBounds){let e=0;m.forEach((t=>{e+=t+(w||0)})),e-=w;const t=e-i;p=p.map((e=>e<=0?-h:e>t?t+v:e))}if(r.centerInsufficientSlides){let e=0;if(m.forEach((t=>{e+=t+(w||0)})),e-=w,e<i){const t=(i-e)/2;p.forEach(((e,r)=>{p[r]=e-t})),f.forEach(((e,r)=>{f[r]=e+t}))}}if(Object.assign(e,{slides:c,snapGrid:p,slidesGrid:f,slidesSizesGrid:m}),r.centeredSlides&&r.cssMode&&!r.centeredSlidesBounds){zr(n,"--swiper-centered-offset-before",-p[0]+"px"),zr(n,"--swiper-centered-offset-after",e.size/2-m[m.length-1]/2+"px");const t=-e.snapGrid[0],r=-e.slidesGrid[0];e.snapGrid=e.snapGrid.map((e=>e+t)),e.slidesGrid=e.slidesGrid.map((e=>e+r))}if(d!==u&&e.emit("slidesLengthChange"),p.length!==g&&(e.params.watchOverflow&&e.checkOverflow(),e.emit("snapGridLengthChange")),f.length!==b&&e.emit("slidesGridLengthChange"),r.watchSlidesProgress&&e.updateSlidesOffset(),e.emit("slidesUpdated"),!(o||r.cssMode||"slide"!==r.effect&&"fade"!==r.effect)){const t=`${r.containerModifierClass}backface-hidden`,n=e.el.classList.contains(t);d<=r.maxBackfaceHiddenSlides?n||e.el.classList.add(t):n&&e.el.classList.remove(t)}},updateAutoHeight:function(e){const t=this,r=[],n=t.virtual&&t.params.virtual.enabled;let a,i=0;"number"==typeof e?t.setTransition(e):!0===e&&t.setTransition(t.params.speed);const s=e=>n?t.slides[t.getSlideIndexByData(e)]:t.slides[e];if("auto"!==t.params.slidesPerView&&t.params.slidesPerView>1)if(t.params.centeredSlides)(t.visibleSlides||[]).forEach((e=>{r.push(e)}));else for(a=0;a<Math.ceil(t.params.slidesPerView);a+=1){const e=t.activeIndex+a;if(e>t.slides.length&&!n)break;r.push(s(e))}else r.push(s(t.activeIndex));for(a=0;a<r.length;a+=1)if(void 0!==r[a]){const e=r[a].offsetHeight;i=e>i?e:i}(i||0===i)&&(t.wrapperEl.style.height=`${i}px`)},updateSlidesOffset:function(){const e=this,t=e.slides,r=e.isElement?e.isHorizontal()?e.wrapperEl.offsetLeft:e.wrapperEl.offsetTop:0;for(let n=0;n<t.length;n+=1)t[n].swiperSlideOffset=(e.isHorizontal()?t[n].offsetLeft:t[n].offsetTop)-r-e.cssOverflowAdjustment()},updateSlidesProgress:function(e){void 0===e&&(e=this&&this.translate||0);const t=this,r=t.params,{slides:n,rtlTranslate:a,snapGrid:i}=t;if(0===n.length)return;void 0===n[0].swiperSlideOffset&&t.updateSlidesOffset();let s=-e;a&&(s=e),n.forEach((e=>{e.classList.remove(r.slideVisibleClass,r.slideFullyVisibleClass)})),t.visibleSlidesIndexes=[],t.visibleSlides=[];let l=r.spaceBetween;"string"==typeof l&&l.indexOf("%")>=0?l=parseFloat(l.replace("%",""))/100*t.size:"string"==typeof l&&(l=parseFloat(l));for(let e=0;e<n.length;e+=1){const o=n[e];let u=o.swiperSlideOffset;r.cssMode&&r.centeredSlides&&(u-=n[0].swiperSlideOffset);const c=(s+(r.centeredSlides?t.minTranslate():0)-u)/(o.swiperSlideSize+l),d=(s-i[0]+(r.centeredSlides?t.minTranslate():0)-u)/(o.swiperSlideSize+l),p=-(s-u),f=p+t.slidesSizesGrid[e],m=p>=0&&p<=t.size-t.slidesSizesGrid[e];(p>=0&&p<t.size-1||f>1&&f<=t.size||p<=0&&f>=t.size)&&(t.visibleSlides.push(o),t.visibleSlidesIndexes.push(e),n[e].classList.add(r.slideVisibleClass)),m&&n[e].classList.add(r.slideFullyVisibleClass),o.progress=a?-c:c,o.originalProgress=a?-d:d}},updateProgress:function(e){const t=this;if(void 0===e){const r=t.rtlTranslate?-1:1;e=t&&t.translate&&t.translate*r||0}const r=t.params,n=t.maxTranslate()-t.minTranslate();let{progress:a,isBeginning:i,isEnd:s,progressLoop:l}=t;const o=i,u=s;if(0===n)a=0,i=!0,s=!0;else{a=(e-t.minTranslate())/n;const r=Math.abs(e-t.minTranslate())<1,l=Math.abs(e-t.maxTranslate())<1;i=r||a<=0,s=l||a>=1,r&&(a=0),l&&(a=1)}if(r.loop){const r=t.getSlideIndexByData(0),n=t.getSlideIndexByData(t.slides.length-1),a=t.slidesGrid[r],i=t.slidesGrid[n],s=t.slidesGrid[t.slidesGrid.length-1],o=Math.abs(e);l=o>=a?(o-a)/s:(o+s-i)/s,l>1&&(l-=1)}Object.assign(t,{progress:a,progressLoop:l,isBeginning:i,isEnd:s}),(r.watchSlidesProgress||r.centeredSlides&&r.autoHeight)&&t.updateSlidesProgress(e),i&&!o&&t.emit("reachBeginning toEdge"),s&&!u&&t.emit("reachEnd toEdge"),(o&&!i||u&&!s)&&t.emit("fromEdge"),t.emit("progress",a)},updateSlidesClasses:function(){const e=this,{slides:t,params:r,slidesEl:n,activeIndex:a}=e,i=e.virtual&&r.virtual.enabled,s=e.grid&&r.grid&&r.grid.rows>1,l=e=>Dr(n,`.${r.slideClass}${e}, swiper-slide${e}`)[0];let o,u,c;if(i)if(r.loop){let t=a-e.virtual.slidesBefore;t<0&&(t=e.virtual.slides.length+t),t>=e.virtual.slides.length&&(t-=e.virtual.slides.length),o=l(`[data-swiper-slide-index="${t}"]`)}else o=l(`[data-swiper-slide-index="${a}"]`);else s?(o=t.filter((e=>e.column===a))[0],c=t.filter((e=>e.column===a+1))[0],u=t.filter((e=>e.column===a-1))[0]):o=t[a];o&&(s||(c=function(e,t){const r=[];for(;e.nextElementSibling;){const n=e.nextElementSibling;t?n.matches(t)&&r.push(n):r.push(n),e=n}return r}(o,`.${r.slideClass}, swiper-slide`)[0],r.loop&&!c&&(c=t[0]),u=function(e,t){const r=[];for(;e.previousElementSibling;){const n=e.previousElementSibling;t?n.matches(t)&&r.push(n):r.push(n),e=n}return r}(o,`.${r.slideClass}, swiper-slide`)[0],r.loop&&0===!u&&(u=t[t.length-1]))),t.forEach((e=>{Xr(e,e===o,r.slideActiveClass),Xr(e,e===c,r.slideNextClass),Xr(e,e===u,r.slidePrevClass)})),e.emitSlidesClasses()},updateActiveIndex:function(e){const t=this,r=t.rtlTranslate?t.translate:-t.translate,{snapGrid:n,params:a,activeIndex:i,realIndex:s,snapIndex:l}=t;let o,u=e;const c=e=>{let r=e-t.virtual.slidesBefore;return r<0&&(r=t.virtual.slides.length+r),r>=t.virtual.slides.length&&(r-=t.virtual.slides.length),r};if(void 0===u&&(u=function(e){const{slidesGrid:t,params:r}=e,n=e.rtlTranslate?e.translate:-e.translate;let a;for(let e=0;e<t.length;e+=1)void 0!==t[e+1]?n>=t[e]&&n<t[e+1]-(t[e+1]-t[e])/2?a=e:n>=t[e]&&n<t[e+1]&&(a=e+1):n>=t[e]&&(a=e);return r.normalizeSlideIndex&&(a<0||void 0===a)&&(a=0),a}(t)),n.indexOf(r)>=0)o=n.indexOf(r);else{const e=Math.min(a.slidesPerGroupSkip,u);o=e+Math.floor((u-e)/a.slidesPerGroup)}if(o>=n.length&&(o=n.length-1),u===i&&!t.params.loop)return void(o!==l&&(t.snapIndex=o,t.emit("snapIndexChange")));if(u===i&&t.params.loop&&t.virtual&&t.params.virtual.enabled)return void(t.realIndex=c(u));const d=t.grid&&a.grid&&a.grid.rows>1;let p;if(t.virtual&&a.virtual.enabled&&a.loop)p=c(u);else if(d){const e=t.slides.filter((e=>e.column===u))[0];let r=parseInt(e.getAttribute("data-swiper-slide-index"),10);Number.isNaN(r)&&(r=Math.max(t.slides.indexOf(e),0)),p=Math.floor(r/a.grid.rows)}else if(t.slides[u]){const e=t.slides[u].getAttribute("data-swiper-slide-index");p=e?parseInt(e,10):u}else p=u;Object.assign(t,{previousSnapIndex:l,snapIndex:o,previousRealIndex:s,realIndex:p,previousIndex:i,activeIndex:u}),t.initialized&&Jr(t),t.emit("activeIndexChange"),t.emit("snapIndexChange"),(t.initialized||t.params.runCallbacksOnInit)&&(s!==p&&t.emit("realIndexChange"),t.emit("slideChange"))},updateClickedSlide:function(e,t){const r=this,n=r.params;let a=e.closest(`.${n.slideClass}, swiper-slide`);!a&&r.isElement&&t&&t.length>1&&t.includes(e)&&[...t.slice(t.indexOf(e)+1,t.length)].forEach((e=>{!a&&e.matches&&e.matches(`.${n.slideClass}, swiper-slide`)&&(a=e)}));let i,s=!1;if(a)for(let e=0;e<r.slides.length;e+=1)if(r.slides[e]===a){s=!0,i=e;break}if(!a||!s)return r.clickedSlide=void 0,void(r.clickedIndex=void 0);r.clickedSlide=a,r.virtual&&r.params.virtual.enabled?r.clickedIndex=parseInt(a.getAttribute("data-swiper-slide-index"),10):r.clickedIndex=i,n.slideToClickedSlide&&void 0!==r.clickedIndex&&r.clickedIndex!==r.activeIndex&&r.slideToClickedSlide()}};function en(e){let{swiper:t,runCallbacks:r,direction:n,step:a}=e;const{activeIndex:i,previousIndex:s}=t;let l=n;if(l||(l=i>s?"next":i<s?"prev":"reset"),t.emit(`transition${a}`),r&&i!==s){if("reset"===l)return void t.emit(`slideResetTransition${a}`);t.emit(`slideChangeTransition${a}`),"next"===l?t.emit(`slideNextTransition${a}`):t.emit(`slidePrevTransition${a}`)}}var tn={slideTo:function(e,t,r,n,a){void 0===e&&(e=0),void 0===r&&(r=!0),"string"==typeof e&&(e=parseInt(e,10));const i=this;let s=e;s<0&&(s=0);const{params:l,snapGrid:o,slidesGrid:u,previousIndex:c,activeIndex:d,rtlTranslate:p,wrapperEl:f,enabled:m}=i;if(!m&&!n&&!a||i.destroyed||i.animating&&l.preventInteractionOnTransition)return!1;void 0===t&&(t=i.params.speed);const h=Math.min(i.params.slidesPerGroupSkip,s);let v=h+Math.floor((s-h)/i.params.slidesPerGroup);v>=o.length&&(v=o.length-1);const g=-o[v];if(l.normalizeSlideIndex)for(let e=0;e<u.length;e+=1){const t=-Math.floor(100*g),r=Math.floor(100*u[e]),n=Math.floor(100*u[e+1]);void 0!==u[e+1]?t>=r&&t<n-(n-r)/2?s=e:t>=r&&t<n&&(s=e+1):t>=r&&(s=e)}if(i.initialized&&s!==d){if(!i.allowSlideNext&&(p?g>i.translate&&g>i.minTranslate():g<i.translate&&g<i.minTranslate()))return!1;if(!i.allowSlidePrev&&g>i.translate&&g>i.maxTranslate()&&(d||0)!==s)return!1}let b;if(s!==(c||0)&&r&&i.emit("beforeSlideChangeStart"),i.updateProgress(g),b=s>d?"next":s<d?"prev":"reset",p&&-g===i.translate||!p&&g===i.translate)return i.updateActiveIndex(s),l.autoHeight&&i.updateAutoHeight(),i.updateSlidesClasses(),"slide"!==l.effect&&i.setTranslate(g),"reset"!==b&&(i.transitionStart(r,b),i.transitionEnd(r,b)),!1;if(l.cssMode){const e=i.isHorizontal(),r=p?g:-g;if(0===t){const t=i.virtual&&i.params.virtual.enabled;t&&(i.wrapperEl.style.scrollSnapType="none",i._immediateVirtual=!0),t&&!i._cssModeVirtualInitialSet&&i.params.initialSlide>0?(i._cssModeVirtualInitialSet=!0,requestAnimationFrame((()=>{f[e?"scrollLeft":"scrollTop"]=r}))):f[e?"scrollLeft":"scrollTop"]=r,t&&requestAnimationFrame((()=>{i.wrapperEl.style.scrollSnapType="",i._immediateVirtual=!1}))}else{if(!i.support.smoothScroll)return _r({swiper:i,targetPosition:r,side:e?"left":"top"}),!0;f.scrollTo({[e?"left":"top"]:r,behavior:"smooth"})}return!0}return i.setTransition(t),i.setTranslate(g),i.updateActiveIndex(s),i.updateSlidesClasses(),i.emit("beforeTransitionStart",t,n),i.transitionStart(r,b),0===t?i.transitionEnd(r,b):i.animating||(i.animating=!0,i.onSlideToWrapperTransitionEnd||(i.onSlideToWrapperTransitionEnd=function(e){i&&!i.destroyed&&e.target===this&&(i.wrapperEl.removeEventListener("transitionend",i.onSlideToWrapperTransitionEnd),i.onSlideToWrapperTransitionEnd=null,delete i.onSlideToWrapperTransitionEnd,i.transitionEnd(r,b))}),i.wrapperEl.addEventListener("transitionend",i.onSlideToWrapperTransitionEnd)),!0},slideToLoop:function(e,t,r,n){void 0===e&&(e=0),void 0===r&&(r=!0),"string"==typeof e&&(e=parseInt(e,10));const a=this;if(a.destroyed)return;void 0===t&&(t=a.params.speed);const i=a.grid&&a.params.grid&&a.params.grid.rows>1;let s=e;if(a.params.loop)if(a.virtual&&a.params.virtual.enabled)s+=a.virtual.slidesBefore;else{let e;if(i){const t=s*a.params.grid.rows;e=a.slides.filter((e=>1*e.getAttribute("data-swiper-slide-index")===t))[0].column}else e=a.getSlideIndexByData(s);const t=i?Math.ceil(a.slides.length/a.params.grid.rows):a.slides.length,{centeredSlides:r}=a.params;let l=a.params.slidesPerView;"auto"===l?l=a.slidesPerViewDynamic():(l=Math.ceil(parseFloat(a.params.slidesPerView,10)),r&&l%2==0&&(l+=1));let o=t-e<l;if(r&&(o=o||e<Math.ceil(l/2)),n&&r&&"auto"!==a.params.slidesPerView&&!i&&(o=!1),o){const n=r?e<a.activeIndex?"prev":"next":e-a.activeIndex-1<a.params.slidesPerView?"next":"prev";a.loopFix({direction:n,slideTo:!0,activeSlideIndex:"next"===n?e+1:e-t+1,slideRealIndex:"next"===n?a.realIndex:void 0})}if(i){const e=s*a.params.grid.rows;s=a.slides.filter((t=>1*t.getAttribute("data-swiper-slide-index")===e))[0].column}else s=a.getSlideIndexByData(s)}return requestAnimationFrame((()=>{a.slideTo(s,t,r,n)})),a},slideNext:function(e,t,r){void 0===t&&(t=!0);const n=this,{enabled:a,params:i,animating:s}=n;if(!a||n.destroyed)return n;void 0===e&&(e=n.params.speed);let l=i.slidesPerGroup;"auto"===i.slidesPerView&&1===i.slidesPerGroup&&i.slidesPerGroupAuto&&(l=Math.max(n.slidesPerViewDynamic("current",!0),1));const o=n.activeIndex<i.slidesPerGroupSkip?1:l,u=n.virtual&&i.virtual.enabled;if(i.loop){if(s&&!u&&i.loopPreventsSliding)return!1;if(n.loopFix({direction:"next"}),n._clientLeft=n.wrapperEl.clientLeft,n.activeIndex===n.slides.length-1&&i.cssMode)return requestAnimationFrame((()=>{n.slideTo(n.activeIndex+o,e,t,r)})),!0}return i.rewind&&n.isEnd?n.slideTo(0,e,t,r):n.slideTo(n.activeIndex+o,e,t,r)},slidePrev:function(e,t,r){void 0===t&&(t=!0);const n=this,{params:a,snapGrid:i,slidesGrid:s,rtlTranslate:l,enabled:o,animating:u}=n;if(!o||n.destroyed)return n;void 0===e&&(e=n.params.speed);const c=n.virtual&&a.virtual.enabled;if(a.loop){if(u&&!c&&a.loopPreventsSliding)return!1;n.loopFix({direction:"prev"}),n._clientLeft=n.wrapperEl.clientLeft}function d(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}const p=d(l?n.translate:-n.translate),f=i.map((e=>d(e)));let m=i[f.indexOf(p)-1];if(void 0===m&&a.cssMode){let e;i.forEach(((t,r)=>{p>=t&&(e=r)})),void 0!==e&&(m=i[e>0?e-1:e])}let h=0;if(void 0!==m&&(h=s.indexOf(m),h<0&&(h=n.activeIndex-1),"auto"===a.slidesPerView&&1===a.slidesPerGroup&&a.slidesPerGroupAuto&&(h=h-n.slidesPerViewDynamic("previous",!0)+1,h=Math.max(h,0))),a.rewind&&n.isBeginning){const a=n.params.virtual&&n.params.virtual.enabled&&n.virtual?n.virtual.slides.length-1:n.slides.length-1;return n.slideTo(a,e,t,r)}return a.loop&&0===n.activeIndex&&a.cssMode?(requestAnimationFrame((()=>{n.slideTo(h,e,t,r)})),!0):n.slideTo(h,e,t,r)},slideReset:function(e,t,r){void 0===t&&(t=!0);const n=this;if(!n.destroyed)return void 0===e&&(e=n.params.speed),n.slideTo(n.activeIndex,e,t,r)},slideToClosest:function(e,t,r,n){void 0===t&&(t=!0),void 0===n&&(n=.5);const a=this;if(a.destroyed)return;void 0===e&&(e=a.params.speed);let i=a.activeIndex;const s=Math.min(a.params.slidesPerGroupSkip,i),l=s+Math.floor((i-s)/a.params.slidesPerGroup),o=a.rtlTranslate?a.translate:-a.translate;if(o>=a.snapGrid[l]){const e=a.snapGrid[l];o-e>(a.snapGrid[l+1]-e)*n&&(i+=a.params.slidesPerGroup)}else{const e=a.snapGrid[l-1];o-e<=(a.snapGrid[l]-e)*n&&(i-=a.params.slidesPerGroup)}return i=Math.max(i,0),i=Math.min(i,a.slidesGrid.length-1),a.slideTo(i,e,t,r)},slideToClickedSlide:function(){const e=this;if(e.destroyed)return;const{params:t,slidesEl:r}=e,n="auto"===t.slidesPerView?e.slidesPerViewDynamic():t.slidesPerView;let a,i=e.clickedIndex;const s=e.isElement?"swiper-slide":`.${t.slideClass}`;if(t.loop){if(e.animating)return;a=parseInt(e.clickedSlide.getAttribute("data-swiper-slide-index"),10),t.centeredSlides?i<e.loopedSlides-n/2||i>e.slides.length-e.loopedSlides+n/2?(e.loopFix(),i=e.getSlideIndex(Dr(r,`${s}[data-swiper-slide-index="${a}"]`)[0]),Cr((()=>{e.slideTo(i)}))):e.slideTo(i):i>e.slides.length-n?(e.loopFix(),i=e.getSlideIndex(Dr(r,`${s}[data-swiper-slide-index="${a}"]`)[0]),Cr((()=>{e.slideTo(i)}))):e.slideTo(i)}else e.slideTo(i)}},rn={loopCreate:function(e){const t=this,{params:r,slidesEl:n}=t;if(!r.loop||t.virtual&&t.params.virtual.enabled)return;const a=()=>{Dr(n,`.${r.slideClass}, swiper-slide`).forEach(((e,t)=>{e.setAttribute("data-swiper-slide-index",t)}))},i=t.grid&&r.grid&&r.grid.rows>1,s=r.slidesPerGroup*(i?r.grid.rows:1),l=t.slides.length%s!=0,o=i&&t.slides.length%r.grid.rows!=0,u=e=>{for(let n=0;n<e;n+=1){const e=t.isElement?Ar("swiper-slide",[r.slideBlankClass]):Ar("div",[r.slideClass,r.slideBlankClass]);t.slidesEl.append(e)}};l?(r.loopAddBlankSlides?(u(s-t.slides.length%s),t.recalcSlides(),t.updateSlides()):Nr("Swiper Loop Warning: The number of slides is not even to slidesPerGroup, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)"),a()):o?(r.loopAddBlankSlides?(u(r.grid.rows-t.slides.length%r.grid.rows),t.recalcSlides(),t.updateSlides()):Nr("Swiper Loop Warning: The number of slides is not even to grid.rows, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)"),a()):a(),t.loopFix({slideRealIndex:e,direction:r.centeredSlides?void 0:"next"})},loopFix:function(e){let{slideRealIndex:t,slideTo:r=!0,direction:n,setTranslate:a,activeSlideIndex:i,byController:s,byMousewheel:l}=void 0===e?{}:e;const o=this;if(!o.params.loop)return;o.emit("beforeLoopFix");const{slides:u,allowSlidePrev:c,allowSlideNext:d,slidesEl:p,params:f}=o,{centeredSlides:m}=f;if(o.allowSlidePrev=!0,o.allowSlideNext=!0,o.virtual&&f.virtual.enabled)return r&&(f.centeredSlides||0!==o.snapIndex?f.centeredSlides&&o.snapIndex<f.slidesPerView?o.slideTo(o.virtual.slides.length+o.snapIndex,0,!1,!0):o.snapIndex===o.snapGrid.length-1&&o.slideTo(o.virtual.slidesBefore,0,!1,!0):o.slideTo(o.virtual.slides.length,0,!1,!0)),o.allowSlidePrev=c,o.allowSlideNext=d,void o.emit("loopFix");let h=f.slidesPerView;"auto"===h?h=o.slidesPerViewDynamic():(h=Math.ceil(parseFloat(f.slidesPerView,10)),m&&h%2==0&&(h+=1));const v=f.slidesPerGroupAuto?h:f.slidesPerGroup;let g=v;g%v!=0&&(g+=v-g%v),g+=f.loopAdditionalSlides,o.loopedSlides=g;const b=o.grid&&f.grid&&f.grid.rows>1;u.length<h+g?Nr("Swiper Loop Warning: The number of slides is not enough for loop mode, it will be disabled and not function properly. You need to add more slides (or make duplicates) or lower the values of slidesPerView and slidesPerGroup parameters"):b&&"row"===f.grid.fill&&Nr("Swiper Loop Warning: Loop mode is not compatible with grid.fill = `row`");const w=[],y=[];let x=o.activeIndex;void 0===i?i=o.getSlideIndex(u.filter((e=>e.classList.contains(f.slideActiveClass)))[0]):x=i;const S="next"===n||!n,E="prev"===n||!n;let k=0,C=0;const T=b?Math.ceil(u.length/f.grid.rows):u.length,M=(b?u[i].column:i)+(m&&void 0===a?-h/2+.5:0);if(M<g){k=Math.max(g-M,v);for(let e=0;e<g-M;e+=1){const t=e-Math.floor(e/T)*T;if(b){const e=T-t-1;for(let t=u.length-1;t>=0;t-=1)u[t].column===e&&w.push(t)}else w.push(T-t-1)}}else if(M+h>T-g){C=Math.max(M-(T-2*g),v);for(let e=0;e<C;e+=1){const t=e-Math.floor(e/T)*T;b?u.forEach(((e,r)=>{e.column===t&&y.push(r)})):y.push(t)}}if(o.__preventObserver__=!0,requestAnimationFrame((()=>{o.__preventObserver__=!1})),E&&w.forEach((e=>{u[e].swiperLoopMoveDOM=!0,p.prepend(u[e]),u[e].swiperLoopMoveDOM=!1})),S&&y.forEach((e=>{u[e].swiperLoopMoveDOM=!0,p.append(u[e]),u[e].swiperLoopMoveDOM=!1})),o.recalcSlides(),"auto"===f.slidesPerView?o.updateSlides():b&&(w.length>0&&E||y.length>0&&S)&&o.slides.forEach(((e,t)=>{o.grid.updateSlide(t,e,o.slides)})),f.watchSlidesProgress&&o.updateSlidesOffset(),r)if(w.length>0&&E){if(void 0===t){const e=o.slidesGrid[x],t=o.slidesGrid[x+k]-e;l?o.setTranslate(o.translate-t):(o.slideTo(x+Math.ceil(k),0,!1,!0),a&&(o.touchEventsData.startTranslate=o.touchEventsData.startTranslate-t,o.touchEventsData.currentTranslate=o.touchEventsData.currentTranslate-t))}else if(a){const e=b?w.length/f.grid.rows:w.length;o.slideTo(o.activeIndex+e,0,!1,!0),o.touchEventsData.currentTranslate=o.translate}}else if(y.length>0&&S)if(void 0===t){const e=o.slidesGrid[x],t=o.slidesGrid[x-C]-e;l?o.setTranslate(o.translate-t):(o.slideTo(x-C,0,!1,!0),a&&(o.touchEventsData.startTranslate=o.touchEventsData.startTranslate-t,o.touchEventsData.currentTranslate=o.touchEventsData.currentTranslate-t))}else{const e=b?y.length/f.grid.rows:y.length;o.slideTo(o.activeIndex-e,0,!1,!0)}if(o.allowSlidePrev=c,o.allowSlideNext=d,o.controller&&o.controller.control&&!s){const e={slideRealIndex:t,direction:n,setTranslate:a,activeSlideIndex:i,byController:!0};Array.isArray(o.controller.control)?o.controller.control.forEach((t=>{!t.destroyed&&t.params.loop&&t.loopFix({...e,slideTo:t.params.slidesPerView===f.slidesPerView&&r})})):o.controller.control instanceof o.constructor&&o.controller.control.params.loop&&o.controller.control.loopFix({...e,slideTo:o.controller.control.params.slidesPerView===f.slidesPerView&&r})}o.emit("loopFix")},loopDestroy:function(){const e=this,{params:t,slidesEl:r}=e;if(!t.loop||e.virtual&&e.params.virtual.enabled)return;e.recalcSlides();const n=[];e.slides.forEach((e=>{const t=void 0===e.swiperSlideIndex?1*e.getAttribute("data-swiper-slide-index"):e.swiperSlideIndex;n[t]=e})),e.slides.forEach((e=>{e.removeAttribute("data-swiper-slide-index")})),n.forEach((e=>{r.append(e)})),e.recalcSlides(),e.slideTo(e.realIndex,0)}};function nn(e,t,r){const n=Er(),{params:a}=e,i=a.edgeSwipeDetection,s=a.edgeSwipeThreshold;return!i||!(r<=s||r>=n.innerWidth-s)||"prevent"===i&&(t.preventDefault(),!0)}function an(e){const t=this,r=xr();let n=e;n.originalEvent&&(n=n.originalEvent);const a=t.touchEventsData;if("pointerdown"===n.type){if(null!==a.pointerId&&a.pointerId!==n.pointerId)return;a.pointerId=n.pointerId}else"touchstart"===n.type&&1===n.targetTouches.length&&(a.touchId=n.targetTouches[0].identifier);if("touchstart"===n.type)return void nn(t,n,n.targetTouches[0].pageX);const{params:i,touches:s,enabled:l}=t;if(!l)return;if(!i.simulateTouch&&"mouse"===n.pointerType)return;if(t.animating&&i.preventInteractionOnTransition)return;!t.animating&&i.cssMode&&i.loop&&t.loopFix();let o=n.target;if("wrapper"===i.touchEventsTarget&&!t.wrapperEl.contains(o))return;if("which"in n&&3===n.which)return;if("button"in n&&n.button>0)return;if(a.isTouched&&a.isMoved)return;const u=!!i.noSwipingClass&&""!==i.noSwipingClass,c=n.composedPath?n.composedPath():n.path;u&&n.target&&n.target.shadowRoot&&c&&(o=c[0]);const d=i.noSwipingSelector?i.noSwipingSelector:`.${i.noSwipingClass}`,p=!(!n.target||!n.target.shadowRoot);if(i.noSwiping&&(p?function(e,t){return void 0===t&&(t=this),function t(r){if(!r||r===xr()||r===Er())return null;r.assignedSlot&&(r=r.assignedSlot);const n=r.closest(e);return n||r.getRootNode?n||t(r.getRootNode().host):null}(t)}(d,o):o.closest(d)))return void(t.allowClick=!0);if(i.swipeHandler&&!o.closest(i.swipeHandler))return;s.currentX=n.pageX,s.currentY=n.pageY;const f=s.currentX,m=s.currentY;if(!nn(t,n,f))return;Object.assign(a,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),s.startX=f,s.startY=m,a.touchStartTime=Tr(),t.allowClick=!0,t.updateSize(),t.swipeDirection=void 0,i.threshold>0&&(a.allowThresholdMove=!1);let h=!0;o.matches(a.focusableElements)&&(h=!1,"SELECT"===o.nodeName&&(a.isTouched=!1)),r.activeElement&&r.activeElement.matches(a.focusableElements)&&r.activeElement!==o&&r.activeElement.blur();const v=h&&t.allowTouchMove&&i.touchStartPreventDefault;!i.touchStartForcePreventDefault&&!v||o.isContentEditable||n.preventDefault(),i.freeMode&&i.freeMode.enabled&&t.freeMode&&t.animating&&!i.cssMode&&t.freeMode.onTouchStart(),t.emit("touchStart",n)}function sn(e){const t=xr(),r=this,n=r.touchEventsData,{params:a,touches:i,rtlTranslate:s,enabled:l}=r;if(!l)return;if(!a.simulateTouch&&"mouse"===e.pointerType)return;let o,u=e;if(u.originalEvent&&(u=u.originalEvent),"pointermove"===u.type){if(null!==n.touchId)return;if(u.pointerId!==n.pointerId)return}if("touchmove"===u.type){if(o=[...u.changedTouches].filter((e=>e.identifier===n.touchId))[0],!o||o.identifier!==n.touchId)return}else o=u;if(!n.isTouched)return void(n.startMoving&&n.isScrolling&&r.emit("touchMoveOpposite",u));const c=o.pageX,d=o.pageY;if(u.preventedByNestedSwiper)return i.startX=c,void(i.startY=d);if(!r.allowTouchMove)return u.target.matches(n.focusableElements)||(r.allowClick=!1),void(n.isTouched&&(Object.assign(i,{startX:c,startY:d,currentX:c,currentY:d}),n.touchStartTime=Tr()));if(a.touchReleaseOnEdges&&!a.loop)if(r.isVertical()){if(d<i.startY&&r.translate<=r.maxTranslate()||d>i.startY&&r.translate>=r.minTranslate())return n.isTouched=!1,void(n.isMoved=!1)}else if(c<i.startX&&r.translate<=r.maxTranslate()||c>i.startX&&r.translate>=r.minTranslate())return;if(t.activeElement&&u.target===t.activeElement&&u.target.matches(n.focusableElements))return n.isMoved=!0,void(r.allowClick=!1);n.allowTouchCallbacks&&r.emit("touchMove",u),i.previousX=i.currentX,i.previousY=i.currentY,i.currentX=c,i.currentY=d;const p=i.currentX-i.startX,f=i.currentY-i.startY;if(r.params.threshold&&Math.sqrt(p**2+f**2)<r.params.threshold)return;if(void 0===n.isScrolling){let e;r.isHorizontal()&&i.currentY===i.startY||r.isVertical()&&i.currentX===i.startX?n.isScrolling=!1:p*p+f*f>=25&&(e=180*Math.atan2(Math.abs(f),Math.abs(p))/Math.PI,n.isScrolling=r.isHorizontal()?e>a.touchAngle:90-e>a.touchAngle)}if(n.isScrolling&&r.emit("touchMoveOpposite",u),void 0===n.startMoving&&(i.currentX===i.startX&&i.currentY===i.startY||(n.startMoving=!0)),n.isScrolling||"touchmove"===u.type&&n.preventTouchMoveFromPointerMove)return void(n.isTouched=!1);if(!n.startMoving)return;r.allowClick=!1,!a.cssMode&&u.cancelable&&u.preventDefault(),a.touchMoveStopPropagation&&!a.nested&&u.stopPropagation();let m=r.isHorizontal()?p:f,h=r.isHorizontal()?i.currentX-i.previousX:i.currentY-i.previousY;a.oneWayMovement&&(m=Math.abs(m)*(s?1:-1),h=Math.abs(h)*(s?1:-1)),i.diff=m,m*=a.touchRatio,s&&(m=-m,h=-h);const v=r.touchesDirection;r.swipeDirection=m>0?"prev":"next",r.touchesDirection=h>0?"prev":"next";const g=r.params.loop&&!a.cssMode,b="next"===r.touchesDirection&&r.allowSlideNext||"prev"===r.touchesDirection&&r.allowSlidePrev;if(!n.isMoved){if(g&&b&&r.loopFix({direction:r.swipeDirection}),n.startTranslate=r.getTranslate(),r.setTransition(0),r.animating){const e=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0});r.wrapperEl.dispatchEvent(e)}n.allowMomentumBounce=!1,!a.grabCursor||!0!==r.allowSlideNext&&!0!==r.allowSlidePrev||r.setGrabCursor(!0),r.emit("sliderFirstMove",u)}if((new Date).getTime(),n.isMoved&&n.allowThresholdMove&&v!==r.touchesDirection&&g&&b&&Math.abs(m)>=1)return Object.assign(i,{startX:c,startY:d,currentX:c,currentY:d,startTranslate:n.currentTranslate}),n.loopSwapReset=!0,void(n.startTranslate=n.currentTranslate);r.emit("sliderMove",u),n.isMoved=!0,n.currentTranslate=m+n.startTranslate;let w=!0,y=a.resistanceRatio;if(a.touchReleaseOnEdges&&(y=0),m>0?(g&&b&&n.allowThresholdMove&&n.currentTranslate>(a.centeredSlides?r.minTranslate()-r.slidesSizesGrid[r.activeIndex+1]:r.minTranslate())&&r.loopFix({direction:"prev",setTranslate:!0,activeSlideIndex:0}),n.currentTranslate>r.minTranslate()&&(w=!1,a.resistance&&(n.currentTranslate=r.minTranslate()-1+(-r.minTranslate()+n.startTranslate+m)**y))):m<0&&(g&&b&&n.allowThresholdMove&&n.currentTranslate<(a.centeredSlides?r.maxTranslate()+r.slidesSizesGrid[r.slidesSizesGrid.length-1]:r.maxTranslate())&&r.loopFix({direction:"next",setTranslate:!0,activeSlideIndex:r.slides.length-("auto"===a.slidesPerView?r.slidesPerViewDynamic():Math.ceil(parseFloat(a.slidesPerView,10)))}),n.currentTranslate<r.maxTranslate()&&(w=!1,a.resistance&&(n.currentTranslate=r.maxTranslate()+1-(r.maxTranslate()-n.startTranslate-m)**y))),w&&(u.preventedByNestedSwiper=!0),!r.allowSlideNext&&"next"===r.swipeDirection&&n.currentTranslate<n.startTranslate&&(n.currentTranslate=n.startTranslate),!r.allowSlidePrev&&"prev"===r.swipeDirection&&n.currentTranslate>n.startTranslate&&(n.currentTranslate=n.startTranslate),r.allowSlidePrev||r.allowSlideNext||(n.currentTranslate=n.startTranslate),a.threshold>0){if(!(Math.abs(m)>a.threshold||n.allowThresholdMove))return void(n.currentTranslate=n.startTranslate);if(!n.allowThresholdMove)return n.allowThresholdMove=!0,i.startX=i.currentX,i.startY=i.currentY,n.currentTranslate=n.startTranslate,void(i.diff=r.isHorizontal()?i.currentX-i.startX:i.currentY-i.startY)}a.followFinger&&!a.cssMode&&((a.freeMode&&a.freeMode.enabled&&r.freeMode||a.watchSlidesProgress)&&(r.updateActiveIndex(),r.updateSlidesClasses()),a.freeMode&&a.freeMode.enabled&&r.freeMode&&r.freeMode.onTouchMove(),r.updateProgress(n.currentTranslate),r.setTranslate(n.currentTranslate))}function ln(e){const t=this,r=t.touchEventsData;let n,a=e;if(a.originalEvent&&(a=a.originalEvent),"touchend"===a.type||"touchcancel"===a.type){if(n=[...a.changedTouches].filter((e=>e.identifier===r.touchId))[0],!n||n.identifier!==r.touchId)return}else{if(null!==r.touchId)return;if(a.pointerId!==r.pointerId)return;n=a}if(["pointercancel","pointerout","pointerleave","contextmenu"].includes(a.type)&&(!["pointercancel","contextmenu"].includes(a.type)||!t.browser.isSafari&&!t.browser.isWebView))return;r.pointerId=null,r.touchId=null;const{params:i,touches:s,rtlTranslate:l,slidesGrid:o,enabled:u}=t;if(!u)return;if(!i.simulateTouch&&"mouse"===a.pointerType)return;if(r.allowTouchCallbacks&&t.emit("touchEnd",a),r.allowTouchCallbacks=!1,!r.isTouched)return r.isMoved&&i.grabCursor&&t.setGrabCursor(!1),r.isMoved=!1,void(r.startMoving=!1);i.grabCursor&&r.isMoved&&r.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);const c=Tr(),d=c-r.touchStartTime;if(t.allowClick){const e=a.path||a.composedPath&&a.composedPath();t.updateClickedSlide(e&&e[0]||a.target,e),t.emit("tap click",a),d<300&&c-r.lastClickTime<300&&t.emit("doubleTap doubleClick",a)}if(r.lastClickTime=Tr(),Cr((()=>{t.destroyed||(t.allowClick=!0)})),!r.isTouched||!r.isMoved||!t.swipeDirection||0===s.diff&&!r.loopSwapReset||r.currentTranslate===r.startTranslate&&!r.loopSwapReset)return r.isTouched=!1,r.isMoved=!1,void(r.startMoving=!1);let p;if(r.isTouched=!1,r.isMoved=!1,r.startMoving=!1,p=i.followFinger?l?t.translate:-t.translate:-r.currentTranslate,i.cssMode)return;if(i.freeMode&&i.freeMode.enabled)return void t.freeMode.onTouchEnd({currentPos:p});const f=p>=-t.maxTranslate()&&!t.params.loop;let m=0,h=t.slidesSizesGrid[0];for(let e=0;e<o.length;e+=e<i.slidesPerGroupSkip?1:i.slidesPerGroup){const t=e<i.slidesPerGroupSkip-1?1:i.slidesPerGroup;void 0!==o[e+t]?(f||p>=o[e]&&p<o[e+t])&&(m=e,h=o[e+t]-o[e]):(f||p>=o[e])&&(m=e,h=o[o.length-1]-o[o.length-2])}let v=null,g=null;i.rewind&&(t.isBeginning?g=i.virtual&&i.virtual.enabled&&t.virtual?t.virtual.slides.length-1:t.slides.length-1:t.isEnd&&(v=0));const b=(p-o[m])/h,w=m<i.slidesPerGroupSkip-1?1:i.slidesPerGroup;if(d>i.longSwipesMs){if(!i.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&(b>=i.longSwipesRatio?t.slideTo(i.rewind&&t.isEnd?v:m+w):t.slideTo(m)),"prev"===t.swipeDirection&&(b>1-i.longSwipesRatio?t.slideTo(m+w):null!==g&&b<0&&Math.abs(b)>i.longSwipesRatio?t.slideTo(g):t.slideTo(m))}else{if(!i.shortSwipes)return void t.slideTo(t.activeIndex);!t.navigation||a.target!==t.navigation.nextEl&&a.target!==t.navigation.prevEl?("next"===t.swipeDirection&&t.slideTo(null!==v?v:m+w),"prev"===t.swipeDirection&&t.slideTo(null!==g?g:m)):a.target===t.navigation.nextEl?t.slideTo(m+w):t.slideTo(m)}}function on(){const e=this,{params:t,el:r}=e;if(r&&0===r.offsetWidth)return;t.breakpoints&&e.setBreakpoint();const{allowSlideNext:n,allowSlidePrev:a,snapGrid:i}=e,s=e.virtual&&e.params.virtual.enabled;e.allowSlideNext=!0,e.allowSlidePrev=!0,e.updateSize(),e.updateSlides(),e.updateSlidesClasses();const l=s&&t.loop;!("auto"===t.slidesPerView||t.slidesPerView>1)||!e.isEnd||e.isBeginning||e.params.centeredSlides||l?e.params.loop&&!s?e.slideToLoop(e.realIndex,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0):e.slideTo(e.slides.length-1,0,!1,!0),e.autoplay&&e.autoplay.running&&e.autoplay.paused&&(clearTimeout(e.autoplay.resizeTimeout),e.autoplay.resizeTimeout=setTimeout((()=>{e.autoplay&&e.autoplay.running&&e.autoplay.paused&&e.autoplay.resume()}),500)),e.allowSlidePrev=a,e.allowSlideNext=n,e.params.watchOverflow&&i!==e.snapGrid&&e.checkOverflow()}function un(e){const t=this;t.enabled&&(t.allowClick||(t.params.preventClicks&&e.preventDefault(),t.params.preventClicksPropagation&&t.animating&&(e.stopPropagation(),e.stopImmediatePropagation())))}function cn(){const e=this,{wrapperEl:t,rtlTranslate:r,enabled:n}=e;if(!n)return;let a;e.previousTranslate=e.translate,e.isHorizontal()?e.translate=-t.scrollLeft:e.translate=-t.scrollTop,0===e.translate&&(e.translate=0),e.updateActiveIndex(),e.updateSlidesClasses();const i=e.maxTranslate()-e.minTranslate();a=0===i?0:(e.translate-e.minTranslate())/i,a!==e.progress&&e.updateProgress(r?-e.translate:e.translate),e.emit("setTranslate",e.translate,!1)}function dn(e){const t=this;Qr(t,e.target),t.params.cssMode||"auto"!==t.params.slidesPerView&&!t.params.autoHeight||t.update()}function pn(){const e=this;e.documentTouchHandlerProceeded||(e.documentTouchHandlerProceeded=!0,e.params.touchReleaseOnEdges&&(e.el.style.touchAction="auto"))}const fn=(e,t)=>{const r=xr(),{params:n,el:a,wrapperEl:i,device:s}=e,l=!!n.nested,o="on"===t?"addEventListener":"removeEventListener",u=t;r[o]("touchstart",e.onDocumentTouchStart,{passive:!1,capture:l}),a[o]("touchstart",e.onTouchStart,{passive:!1}),a[o]("pointerdown",e.onTouchStart,{passive:!1}),r[o]("touchmove",e.onTouchMove,{passive:!1,capture:l}),r[o]("pointermove",e.onTouchMove,{passive:!1,capture:l}),r[o]("touchend",e.onTouchEnd,{passive:!0}),r[o]("pointerup",e.onTouchEnd,{passive:!0}),r[o]("pointercancel",e.onTouchEnd,{passive:!0}),r[o]("touchcancel",e.onTouchEnd,{passive:!0}),r[o]("pointerout",e.onTouchEnd,{passive:!0}),r[o]("pointerleave",e.onTouchEnd,{passive:!0}),r[o]("contextmenu",e.onTouchEnd,{passive:!0}),(n.preventClicks||n.preventClicksPropagation)&&a[o]("click",e.onClick,!0),n.cssMode&&i[o]("scroll",e.onScroll),n.updateOnWindowResize?e[u](s.ios||s.android?"resize orientationchange observerUpdate":"resize observerUpdate",on,!0):e[u]("observerUpdate",on,!0),a[o]("load",e.onLoad,{capture:!0})},mn=(e,t)=>e.grid&&t.grid&&t.grid.rows>1;var hn={setBreakpoint:function(){const e=this,{realIndex:t,initialized:r,params:n,el:a}=e,i=n.breakpoints;if(!i||i&&0===Object.keys(i).length)return;const s=e.getBreakpoint(i,e.params.breakpointsBase,e.el);if(!s||e.currentBreakpoint===s)return;const l=(s in i?i[s]:void 0)||e.originalParams,o=mn(e,n),u=mn(e,l),c=e.params.grabCursor,d=l.grabCursor,p=n.enabled;o&&!u?(a.classList.remove(`${n.containerModifierClass}grid`,`${n.containerModifierClass}grid-column`),e.emitContainerClasses()):!o&&u&&(a.classList.add(`${n.containerModifierClass}grid`),(l.grid.fill&&"column"===l.grid.fill||!l.grid.fill&&"column"===n.grid.fill)&&a.classList.add(`${n.containerModifierClass}grid-column`),e.emitContainerClasses()),c&&!d?e.unsetGrabCursor():!c&&d&&e.setGrabCursor(),["navigation","pagination","scrollbar"].forEach((t=>{if(void 0===l[t])return;const r=n[t]&&n[t].enabled,a=l[t]&&l[t].enabled;r&&!a&&e[t].disable(),!r&&a&&e[t].enable()}));const f=l.direction&&l.direction!==n.direction,m=n.loop&&(l.slidesPerView!==n.slidesPerView||f),h=n.loop;f&&r&&e.changeDirection(),Lr(e.params,l);const v=e.params.enabled,g=e.params.loop;Object.assign(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),p&&!v?e.disable():!p&&v&&e.enable(),e.currentBreakpoint=s,e.emit("_beforeBreakpoint",l),r&&(m?(e.loopDestroy(),e.loopCreate(t),e.updateSlides()):!h&&g?(e.loopCreate(t),e.updateSlides()):h&&!g&&e.loopDestroy()),e.emit("breakpoint",l)},getBreakpoint:function(e,t,r){if(void 0===t&&(t="window"),!e||"container"===t&&!r)return;let n=!1;const a=Er(),i="window"===t?a.innerHeight:r.clientHeight,s=Object.keys(e).map((e=>{if("string"==typeof e&&0===e.indexOf("@")){const t=parseFloat(e.substr(1));return{value:i*t,point:e}}return{value:e,point:e}}));s.sort(((e,t)=>parseInt(e.value,10)-parseInt(t.value,10)));for(let e=0;e<s.length;e+=1){const{point:i,value:l}=s[e];"window"===t?a.matchMedia(`(min-width: ${l}px)`).matches&&(n=i):l<=r.clientWidth&&(n=i)}return n||"max"}},vn={init:!0,direction:"horizontal",oneWayMovement:!1,swiperElementNodeName:"SWIPER-CONTAINER",touchEventsTarget:"wrapper",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,resizeObserver:!0,nested:!1,createElements:!1,eventsPrefix:"swiper",enabled:!0,focusableElements:"input, select, option, textarea, button, video, label",width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,breakpointsBase:"window",spaceBetween:0,slidesPerView:1,slidesPerGroup:1,slidesPerGroupSkip:0,slidesPerGroupAuto:!1,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:5,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,loop:!1,loopAddBlankSlides:!0,loopAdditionalSlides:0,loopPreventsSliding:!0,rewind:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,maxBackfaceHiddenSlides:10,containerModifierClass:"swiper-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-blank",slideActiveClass:"swiper-slide-active",slideVisibleClass:"swiper-slide-visible",slideFullyVisibleClass:"swiper-slide-fully-visible",slideNextClass:"swiper-slide-next",slidePrevClass:"swiper-slide-prev",wrapperClass:"swiper-wrapper",lazyPreloaderClass:"swiper-lazy-preloader",lazyPreloadPrevNext:0,runCallbacksOnInit:!0,_emitClasses:!1};function gn(e,t){return function(r){void 0===r&&(r={});const n=Object.keys(r)[0],a=r[n];"object"==typeof a&&null!==a?(!0===e[n]&&(e[n]={enabled:!0}),"navigation"===n&&e[n]&&e[n].enabled&&!e[n].prevEl&&!e[n].nextEl&&(e[n].auto=!0),["pagination","scrollbar"].indexOf(n)>=0&&e[n]&&e[n].enabled&&!e[n].el&&(e[n].auto=!0),n in e&&"enabled"in a?("object"!=typeof e[n]||"enabled"in e[n]||(e[n].enabled=!0),e[n]||(e[n]={enabled:!1}),Lr(t,r)):Lr(t,r)):Lr(t,r)}}const bn={eventsEmitter:Yr,update:Zr,translate:{getTranslate:function(e){void 0===e&&(e=this.isHorizontal()?"x":"y");const{params:t,rtlTranslate:r,translate:n,wrapperEl:a}=this;if(t.virtualTranslate)return r?-n:n;if(t.cssMode)return n;let i=Mr(a,e);return i+=this.cssOverflowAdjustment(),r&&(i=-i),i||0},setTranslate:function(e,t){const r=this,{rtlTranslate:n,params:a,wrapperEl:i,progress:s}=r;let l,o=0,u=0;r.isHorizontal()?o=n?-e:e:u=e,a.roundLengths&&(o=Math.floor(o),u=Math.floor(u)),r.previousTranslate=r.translate,r.translate=r.isHorizontal()?o:u,a.cssMode?i[r.isHorizontal()?"scrollLeft":"scrollTop"]=r.isHorizontal()?-o:-u:a.virtualTranslate||(r.isHorizontal()?o-=r.cssOverflowAdjustment():u-=r.cssOverflowAdjustment(),i.style.transform=`translate3d(${o}px, ${u}px, 0px)`);const c=r.maxTranslate()-r.minTranslate();l=0===c?0:(e-r.minTranslate())/c,l!==s&&r.updateProgress(e),r.emit("setTranslate",r.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(e,t,r,n,a){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===r&&(r=!0),void 0===n&&(n=!0);const i=this,{params:s,wrapperEl:l}=i;if(i.animating&&s.preventInteractionOnTransition)return!1;const o=i.minTranslate(),u=i.maxTranslate();let c;if(c=n&&e>o?o:n&&e<u?u:e,i.updateProgress(c),s.cssMode){const e=i.isHorizontal();if(0===t)l[e?"scrollLeft":"scrollTop"]=-c;else{if(!i.support.smoothScroll)return _r({swiper:i,targetPosition:-c,side:e?"left":"top"}),!0;l.scrollTo({[e?"left":"top"]:-c,behavior:"smooth"})}return!0}return 0===t?(i.setTransition(0),i.setTranslate(c),r&&(i.emit("beforeTransitionStart",t,a),i.emit("transitionEnd"))):(i.setTransition(t),i.setTranslate(c),r&&(i.emit("beforeTransitionStart",t,a),i.emit("transitionStart")),i.animating||(i.animating=!0,i.onTranslateToWrapperTransitionEnd||(i.onTranslateToWrapperTransitionEnd=function(e){i&&!i.destroyed&&e.target===this&&(i.wrapperEl.removeEventListener("transitionend",i.onTranslateToWrapperTransitionEnd),i.onTranslateToWrapperTransitionEnd=null,delete i.onTranslateToWrapperTransitionEnd,i.animating=!1,r&&i.emit("transitionEnd"))}),i.wrapperEl.addEventListener("transitionend",i.onTranslateToWrapperTransitionEnd))),!0}},transition:{setTransition:function(e,t){const r=this;r.params.cssMode||(r.wrapperEl.style.transitionDuration=`${e}ms`,r.wrapperEl.style.transitionDelay=0===e?"0ms":""),r.emit("setTransition",e,t)},transitionStart:function(e,t){void 0===e&&(e=!0);const r=this,{params:n}=r;n.cssMode||(n.autoHeight&&r.updateAutoHeight(),en({swiper:r,runCallbacks:e,direction:t,step:"Start"}))},transitionEnd:function(e,t){void 0===e&&(e=!0);const r=this,{params:n}=r;r.animating=!1,n.cssMode||(r.setTransition(0),en({swiper:r,runCallbacks:e,direction:t,step:"End"}))}},slide:tn,loop:rn,grabCursor:{setGrabCursor:function(e){const t=this;if(!t.params.simulateTouch||t.params.watchOverflow&&t.isLocked||t.params.cssMode)return;const r="container"===t.params.touchEventsTarget?t.el:t.wrapperEl;t.isElement&&(t.__preventObserver__=!0),r.style.cursor="move",r.style.cursor=e?"grabbing":"grab",t.isElement&&requestAnimationFrame((()=>{t.__preventObserver__=!1}))},unsetGrabCursor:function(){const e=this;e.params.watchOverflow&&e.isLocked||e.params.cssMode||(e.isElement&&(e.__preventObserver__=!0),e["container"===e.params.touchEventsTarget?"el":"wrapperEl"].style.cursor="",e.isElement&&requestAnimationFrame((()=>{e.__preventObserver__=!1})))}},events:{attachEvents:function(){const e=this,{params:t}=e;e.onTouchStart=an.bind(e),e.onTouchMove=sn.bind(e),e.onTouchEnd=ln.bind(e),e.onDocumentTouchStart=pn.bind(e),t.cssMode&&(e.onScroll=cn.bind(e)),e.onClick=un.bind(e),e.onLoad=dn.bind(e),fn(e,"on")},detachEvents:function(){fn(this,"off")}},breakpoints:hn,checkOverflow:{checkOverflow:function(){const e=this,{isLocked:t,params:r}=e,{slidesOffsetBefore:n}=r;if(n){const t=e.slides.length-1,r=e.slidesGrid[t]+e.slidesSizesGrid[t]+2*n;e.isLocked=e.size>r}else e.isLocked=1===e.snapGrid.length;!0===r.allowSlideNext&&(e.allowSlideNext=!e.isLocked),!0===r.allowSlidePrev&&(e.allowSlidePrev=!e.isLocked),t&&t!==e.isLocked&&(e.isEnd=!1),t!==e.isLocked&&e.emit(e.isLocked?"lock":"unlock")}},classes:{addClasses:function(){const e=this,{classNames:t,params:r,rtl:n,el:a,device:i}=e,s=function(e,t){const r=[];return e.forEach((e=>{"object"==typeof e?Object.keys(e).forEach((n=>{e[n]&&r.push(t+n)})):"string"==typeof e&&r.push(t+e)})),r}(["initialized",r.direction,{"free-mode":e.params.freeMode&&r.freeMode.enabled},{autoheight:r.autoHeight},{rtl:n},{grid:r.grid&&r.grid.rows>1},{"grid-column":r.grid&&r.grid.rows>1&&"column"===r.grid.fill},{android:i.android},{ios:i.ios},{"css-mode":r.cssMode},{centered:r.cssMode&&r.centeredSlides},{"watch-progress":r.watchSlidesProgress}],r.containerModifierClass);t.push(...s),a.classList.add(...t),e.emitContainerClasses()},removeClasses:function(){const{el:e,classNames:t}=this;e.classList.remove(...t),this.emitContainerClasses()}}},wn={};class yn{constructor(){let e,t;for(var r=arguments.length,n=new Array(r),a=0;a<r;a++)n[a]=arguments[a];1===n.length&&n[0].constructor&&"Object"===Object.prototype.toString.call(n[0]).slice(8,-1)?t=n[0]:[e,t]=n,t||(t={}),t=Lr({},t),e&&!t.el&&(t.el=e);const i=xr();if(t.el&&"string"==typeof t.el&&i.querySelectorAll(t.el).length>1){const e=[];return i.querySelectorAll(t.el).forEach((r=>{const n=Lr({},t,{el:r});e.push(new yn(n))})),e}const s=this;s.__swiper__=!0,s.support=Wr(),s.device=Gr({userAgent:t.userAgent}),s.browser=(Ur||(Ur=function(){const e=Er(),t=Gr();let r=!1;function n(){const t=e.navigator.userAgent.toLowerCase();return t.indexOf("safari")>=0&&t.indexOf("chrome")<0&&t.indexOf("android")<0}if(n()){const t=String(e.navigator.userAgent);if(t.includes("Version/")){const[e,n]=t.split("Version/")[1].split(" ")[0].split(".").map((e=>Number(e)));r=e<16||16===e&&n<2}}const a=/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(e.navigator.userAgent),i=n();return{isSafari:r||i,needPerspectiveFix:r,need3dFix:i||a&&t.ios,isWebView:a}}()),Ur),s.eventsListeners={},s.eventsAnyListeners=[],s.modules=[...s.__modules__],t.modules&&Array.isArray(t.modules)&&s.modules.push(...t.modules);const l={};s.modules.forEach((e=>{e({params:t,swiper:s,extendParams:gn(t,l),on:s.on.bind(s),once:s.once.bind(s),off:s.off.bind(s),emit:s.emit.bind(s)})}));const o=Lr({},vn,l);return s.params=Lr({},o,wn,t),s.originalParams=Lr({},s.params),s.passedParams=Lr({},t),s.params&&s.params.on&&Object.keys(s.params.on).forEach((e=>{s.on(e,s.params.on[e])})),s.params&&s.params.onAny&&s.onAny(s.params.onAny),Object.assign(s,{enabled:s.params.enabled,el:e,classNames:[],slides:[],slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:()=>"horizontal"===s.params.direction,isVertical:()=>"vertical"===s.params.direction,activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,cssOverflowAdjustment(){return Math.trunc(this.translate/2**23)*2**23},allowSlideNext:s.params.allowSlideNext,allowSlidePrev:s.params.allowSlidePrev,touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,focusableElements:s.params.focusableElements,lastClickTime:0,clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,startMoving:void 0,pointerId:null,touchId:null},allowClick:!0,allowTouchMove:s.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),s.emit("_swiper"),s.params.init&&s.init(),s}getDirectionLabel(e){return this.isHorizontal()?e:{width:"height","margin-top":"margin-left","margin-bottom ":"margin-right","margin-left":"margin-top","margin-right":"margin-bottom","padding-left":"padding-top","padding-right":"padding-bottom",marginRight:"marginBottom"}[e]}getSlideIndex(e){const{slidesEl:t,params:r}=this,n=jr(Dr(t,`.${r.slideClass}, swiper-slide`)[0]);return jr(e)-n}getSlideIndexByData(e){return this.getSlideIndex(this.slides.filter((t=>1*t.getAttribute("data-swiper-slide-index")===e))[0])}recalcSlides(){const{slidesEl:e,params:t}=this;this.slides=Dr(e,`.${t.slideClass}, swiper-slide`)}enable(){const e=this;e.enabled||(e.enabled=!0,e.params.grabCursor&&e.setGrabCursor(),e.emit("enable"))}disable(){const e=this;e.enabled&&(e.enabled=!1,e.params.grabCursor&&e.unsetGrabCursor(),e.emit("disable"))}setProgress(e,t){const r=this;e=Math.min(Math.max(e,0),1);const n=r.minTranslate(),a=(r.maxTranslate()-n)*e+n;r.translateTo(a,void 0===t?0:t),r.updateActiveIndex(),r.updateSlidesClasses()}emitContainerClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=e.el.className.split(" ").filter((t=>0===t.indexOf("swiper")||0===t.indexOf(e.params.containerModifierClass)));e.emit("_containerClasses",t.join(" "))}getSlideClasses(e){const t=this;return t.destroyed?"":e.className.split(" ").filter((e=>0===e.indexOf("swiper-slide")||0===e.indexOf(t.params.slideClass))).join(" ")}emitSlidesClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=[];e.slides.forEach((r=>{const n=e.getSlideClasses(r);t.push({slideEl:r,classNames:n}),e.emit("_slideClass",r,n)})),e.emit("_slideClasses",t)}slidesPerViewDynamic(e,t){void 0===e&&(e="current"),void 0===t&&(t=!1);const{params:r,slides:n,slidesGrid:a,slidesSizesGrid:i,size:s,activeIndex:l}=this;let o=1;if("number"==typeof r.slidesPerView)return r.slidesPerView;if(r.centeredSlides){let e,t=n[l]?Math.ceil(n[l].swiperSlideSize):0;for(let r=l+1;r<n.length;r+=1)n[r]&&!e&&(t+=Math.ceil(n[r].swiperSlideSize),o+=1,t>s&&(e=!0));for(let r=l-1;r>=0;r-=1)n[r]&&!e&&(t+=n[r].swiperSlideSize,o+=1,t>s&&(e=!0))}else if("current"===e)for(let e=l+1;e<n.length;e+=1)(t?a[e]+i[e]-a[l]<s:a[e]-a[l]<s)&&(o+=1);else for(let e=l-1;e>=0;e-=1)a[l]-a[e]<s&&(o+=1);return o}update(){const e=this;if(!e||e.destroyed)return;const{snapGrid:t,params:r}=e;function n(){const t=e.rtlTranslate?-1*e.translate:e.translate,r=Math.min(Math.max(t,e.maxTranslate()),e.minTranslate());e.setTranslate(r),e.updateActiveIndex(),e.updateSlidesClasses()}let a;if(r.breakpoints&&e.setBreakpoint(),[...e.el.querySelectorAll('[loading="lazy"]')].forEach((t=>{t.complete&&Qr(e,t)})),e.updateSize(),e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),r.freeMode&&r.freeMode.enabled&&!r.cssMode)n(),r.autoHeight&&e.updateAutoHeight();else{if(("auto"===r.slidesPerView||r.slidesPerView>1)&&e.isEnd&&!r.centeredSlides){const t=e.virtual&&r.virtual.enabled?e.virtual.slides:e.slides;a=e.slideTo(t.length-1,0,!1,!0)}else a=e.slideTo(e.activeIndex,0,!1,!0);a||n()}r.watchOverflow&&t!==e.snapGrid&&e.checkOverflow(),e.emit("update")}changeDirection(e,t){void 0===t&&(t=!0);const r=this,n=r.params.direction;return e||(e="horizontal"===n?"vertical":"horizontal"),e===n||"horizontal"!==e&&"vertical"!==e||(r.el.classList.remove(`${r.params.containerModifierClass}${n}`),r.el.classList.add(`${r.params.containerModifierClass}${e}`),r.emitContainerClasses(),r.params.direction=e,r.slides.forEach((t=>{"vertical"===e?t.style.width="":t.style.height=""})),r.emit("changeDirection"),t&&r.update()),r}changeLanguageDirection(e){const t=this;t.rtl&&"rtl"===e||!t.rtl&&"ltr"===e||(t.rtl="rtl"===e,t.rtlTranslate="horizontal"===t.params.direction&&t.rtl,t.rtl?(t.el.classList.add(`${t.params.containerModifierClass}rtl`),t.el.dir="rtl"):(t.el.classList.remove(`${t.params.containerModifierClass}rtl`),t.el.dir="ltr"),t.update())}mount(e){const t=this;if(t.mounted)return!0;let r=e||t.params.el;if("string"==typeof r&&(r=document.querySelector(r)),!r)return!1;r.swiper=t,r.parentNode&&r.parentNode.host&&r.parentNode.host.nodeName===t.params.swiperElementNodeName.toUpperCase()&&(t.isElement=!0);const n=()=>`.${(t.params.wrapperClass||"").trim().split(" ").join(".")}`;let a=r&&r.shadowRoot&&r.shadowRoot.querySelector?r.shadowRoot.querySelector(n()):Dr(r,n())[0];return!a&&t.params.createElements&&(a=Ar("div",t.params.wrapperClass),r.append(a),Dr(r,`.${t.params.slideClass}`).forEach((e=>{a.append(e)}))),Object.assign(t,{el:r,wrapperEl:a,slidesEl:t.isElement&&!r.parentNode.host.slideSlots?r.parentNode.host:a,hostEl:t.isElement?r.parentNode.host:r,mounted:!0,rtl:"rtl"===r.dir.toLowerCase()||"rtl"===Rr(r,"direction"),rtlTranslate:"horizontal"===t.params.direction&&("rtl"===r.dir.toLowerCase()||"rtl"===Rr(r,"direction")),wrongRTL:"-webkit-box"===Rr(a,"display")}),!0}init(e){const t=this;if(t.initialized)return t;if(!1===t.mount(e))return t;t.emit("beforeInit"),t.params.breakpoints&&t.setBreakpoint(),t.addClasses(),t.updateSize(),t.updateSlides(),t.params.watchOverflow&&t.checkOverflow(),t.params.grabCursor&&t.enabled&&t.setGrabCursor(),t.params.loop&&t.virtual&&t.params.virtual.enabled?t.slideTo(t.params.initialSlide+t.virtual.slidesBefore,0,t.params.runCallbacksOnInit,!1,!0):t.slideTo(t.params.initialSlide,0,t.params.runCallbacksOnInit,!1,!0),t.params.loop&&t.loopCreate(),t.attachEvents();const r=[...t.el.querySelectorAll('[loading="lazy"]')];return t.isElement&&r.push(...t.hostEl.querySelectorAll('[loading="lazy"]')),r.forEach((e=>{e.complete?Qr(t,e):e.addEventListener("load",(e=>{Qr(t,e.target)}))})),Jr(t),t.initialized=!0,Jr(t),t.emit("init"),t.emit("afterInit"),t}destroy(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0);const r=this,{params:n,el:a,wrapperEl:i,slides:s}=r;return void 0===r.params||r.destroyed||(r.emit("beforeDestroy"),r.initialized=!1,r.detachEvents(),n.loop&&r.loopDestroy(),t&&(r.removeClasses(),a.removeAttribute("style"),i.removeAttribute("style"),s&&s.length&&s.forEach((e=>{e.classList.remove(n.slideVisibleClass,n.slideFullyVisibleClass,n.slideActiveClass,n.slideNextClass,n.slidePrevClass),e.removeAttribute("style"),e.removeAttribute("data-swiper-slide-index")}))),r.emit("destroy"),Object.keys(r.eventsListeners).forEach((e=>{r.off(e)})),!1!==e&&(r.el.swiper=null,function(e){const t=e;Object.keys(t).forEach((e=>{try{t[e]=null}catch(e){}try{delete t[e]}catch(e){}}))}(r)),r.destroyed=!0),null}static extendDefaults(e){Lr(wn,e)}static get extendedDefaults(){return wn}static get defaults(){return vn}static installModule(e){yn.prototype.__modules__||(yn.prototype.__modules__=[]);const t=yn.prototype.__modules__;"function"==typeof e&&t.indexOf(e)<0&&t.push(e)}static use(e){return Array.isArray(e)?(e.forEach((e=>yn.installModule(e))),yn):(yn.installModule(e),yn)}}function xn(e,t,r,n){return e.params.createElements&&Object.keys(n).forEach((a=>{if(!r[a]&&!0===r.auto){let i=Dr(e.el,`.${n[a]}`)[0];i||(i=Ar("div",n[a]),i.className=n[a],e.el.append(i)),r[a]=i,t[a]=i}})),r}function Sn(e){return void 0===e&&(e=""),`.${e.trim().replace(/([\.:!+\/])/g,"\\$1").replace(/ /g,".")}`}function En(e){const t=this,{params:r,slidesEl:n}=t;r.loop&&t.loopDestroy();const a=e=>{if("string"==typeof e){const t=document.createElement("div");t.innerHTML=e,n.append(t.children[0]),t.innerHTML=""}else n.append(e)};if("object"==typeof e&&"length"in e)for(let t=0;t<e.length;t+=1)e[t]&&a(e[t]);else a(e);t.recalcSlides(),r.loop&&t.loopCreate(),r.observer&&!t.isElement||t.update()}function kn(e){const t=this,{params:r,activeIndex:n,slidesEl:a}=t;r.loop&&t.loopDestroy();let i=n+1;const s=e=>{if("string"==typeof e){const t=document.createElement("div");t.innerHTML=e,a.prepend(t.children[0]),t.innerHTML=""}else a.prepend(e)};if("object"==typeof e&&"length"in e){for(let t=0;t<e.length;t+=1)e[t]&&s(e[t]);i=n+e.length}else s(e);t.recalcSlides(),r.loop&&t.loopCreate(),r.observer&&!t.isElement||t.update(),t.slideTo(i,0,!1)}function Cn(e,t){const r=this,{params:n,activeIndex:a,slidesEl:i}=r;let s=a;n.loop&&(s-=r.loopedSlides,r.loopDestroy(),r.recalcSlides());const l=r.slides.length;if(e<=0)return void r.prependSlide(t);if(e>=l)return void r.appendSlide(t);let o=s>e?s+1:s;const u=[];for(let t=l-1;t>=e;t-=1){const e=r.slides[t];e.remove(),u.unshift(e)}if("object"==typeof t&&"length"in t){for(let e=0;e<t.length;e+=1)t[e]&&i.append(t[e]);o=s>e?s+t.length:s}else i.append(t);for(let e=0;e<u.length;e+=1)i.append(u[e]);r.recalcSlides(),n.loop&&r.loopCreate(),n.observer&&!r.isElement||r.update(),n.loop?r.slideTo(o+r.loopedSlides,0,!1):r.slideTo(o,0,!1)}function Tn(e){const t=this,{params:r,activeIndex:n}=t;let a=n;r.loop&&(a-=t.loopedSlides,t.loopDestroy());let i,s=a;if("object"==typeof e&&"length"in e){for(let r=0;r<e.length;r+=1)i=e[r],t.slides[i]&&t.slides[i].remove(),i<s&&(s-=1);s=Math.max(s,0)}else i=e,t.slides[i]&&t.slides[i].remove(),i<s&&(s-=1),s=Math.max(s,0);t.recalcSlides(),r.loop&&t.loopCreate(),r.observer&&!t.isElement||t.update(),r.loop?t.slideTo(s+t.loopedSlides,0,!1):t.slideTo(s,0,!1)}function Mn(){const e=this,t=[];for(let r=0;r<e.slides.length;r+=1)t.push(r);e.removeSlide(t)}function Pn(e){const{effect:t,swiper:r,on:n,setTranslate:a,setTransition:i,overwriteParams:s,perspective:l,recreateShadows:o,getEffectParams:u}=e;let c;n("beforeInit",(()=>{if(r.params.effect!==t)return;r.classNames.push(`${r.params.containerModifierClass}${t}`),l&&l()&&r.classNames.push(`${r.params.containerModifierClass}3d`);const e=s?s():{};Object.assign(r.params,e),Object.assign(r.originalParams,e)})),n("setTranslate",(()=>{r.params.effect===t&&a()})),n("setTransition",((e,n)=>{r.params.effect===t&&i(n)})),n("transitionEnd",(()=>{if(r.params.effect===t&&o){if(!u||!u().slideShadows)return;r.slides.forEach((e=>{e.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach((e=>e.remove()))})),o()}})),n("virtualUpdate",(()=>{r.params.effect===t&&(r.slides.length||(c=!0),requestAnimationFrame((()=>{c&&r.slides&&r.slides.length&&(a(),c=!1)})))}))}function Ln(e,t){const r=Or(t);return r!==t&&(r.style.backfaceVisibility="hidden",r.style["-webkit-backface-visibility"]="hidden"),r}function zn(e){let{swiper:t,duration:r,transformElements:n,allSlides:a}=e;const{activeIndex:i}=t;if(t.params.virtualTranslate&&0!==r){let e,r=!1;e=a?n:n.filter((e=>{const r=e.classList.contains("swiper-slide-transform")?(e=>e.parentElement?e.parentElement:t.slides.filter((t=>t.shadowRoot&&t.shadowRoot===e.parentNode))[0])(e):e;return t.getSlideIndex(r)===i})),e.forEach((e=>{qr(e,(()=>{if(r)return;if(!t||t.destroyed)return;r=!0,t.animating=!1;const e=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0});t.wrapperEl.dispatchEvent(e)}))}))}}function _n(e,t,r){const n=`swiper-slide-shadow${r?`-${r}`:""}${e?` swiper-slide-shadow-${e}`:""}`,a=Or(t);let i=a.querySelector(`.${n.split(" ").join(".")}`);return i||(i=Ar("div",n.split(" ")),a.append(i)),i}Object.keys(bn).forEach((e=>{Object.keys(bn[e]).forEach((t=>{yn.prototype[t]=bn[e][t]}))})),yn.use([function(e){let{swiper:t,on:r,emit:n}=e;const a=Er();let i=null,s=null;const l=()=>{t&&!t.destroyed&&t.initialized&&(n("beforeResize"),n("resize"))},o=()=>{t&&!t.destroyed&&t.initialized&&n("orientationchange")};r("init",(()=>{t.params.resizeObserver&&void 0!==a.ResizeObserver?t&&!t.destroyed&&t.initialized&&(i=new ResizeObserver((e=>{s=a.requestAnimationFrame((()=>{const{width:r,height:n}=t;let a=r,i=n;e.forEach((e=>{let{contentBoxSize:r,contentRect:n,target:s}=e;s&&s!==t.el||(a=n?n.width:(r[0]||r).inlineSize,i=n?n.height:(r[0]||r).blockSize)})),a===r&&i===n||l()}))})),i.observe(t.el)):(a.addEventListener("resize",l),a.addEventListener("orientationchange",o))})),r("destroy",(()=>{s&&a.cancelAnimationFrame(s),i&&i.unobserve&&t.el&&(i.unobserve(t.el),i=null),a.removeEventListener("resize",l),a.removeEventListener("orientationchange",o)}))},function(e){let{swiper:t,extendParams:r,on:n,emit:a}=e;const i=[],s=Er(),l=function(e,r){void 0===r&&(r={});const n=new(s.MutationObserver||s.WebkitMutationObserver)((e=>{if(t.__preventObserver__)return;if(1===e.length)return void a("observerUpdate",e[0]);const r=function(){a("observerUpdate",e[0])};s.requestAnimationFrame?s.requestAnimationFrame(r):s.setTimeout(r,0)}));n.observe(e,{attributes:void 0===r.attributes||r.attributes,childList:void 0===r.childList||r.childList,characterData:void 0===r.characterData||r.characterData}),i.push(n)};r({observer:!1,observeParents:!1,observeSlideChildren:!1}),n("init",(()=>{if(t.params.observer){if(t.params.observeParents){const e=$r(t.hostEl);for(let t=0;t<e.length;t+=1)l(e[t])}l(t.hostEl,{childList:t.params.observeSlideChildren}),l(t.wrapperEl,{attributes:!1})}})),n("destroy",(()=>{i.forEach((e=>{e.disconnect()})),i.splice(0,i.length)}))}]);const On=[function(e){let t,{swiper:r,extendParams:n,on:a,emit:i}=e;n({virtual:{enabled:!1,slides:[],cache:!0,renderSlide:null,renderExternal:null,renderExternalUpdate:!0,addSlidesBefore:0,addSlidesAfter:0}});const s=xr();r.virtual={cache:{},from:void 0,to:void 0,slides:[],offset:0,slidesGrid:[]};const l=s.createElement("div");function o(e,t){const n=r.params.virtual;if(n.cache&&r.virtual.cache[t])return r.virtual.cache[t];let a;return n.renderSlide?(a=n.renderSlide.call(r,e,t),"string"==typeof a&&(l.innerHTML=a,a=l.children[0])):a=r.isElement?Ar("swiper-slide"):Ar("div",r.params.slideClass),a.setAttribute("data-swiper-slide-index",t),n.renderSlide||(a.innerHTML=e),n.cache&&(r.virtual.cache[t]=a),a}function u(e,t){const{slidesPerView:n,slidesPerGroup:a,centeredSlides:s,loop:l,initialSlide:u}=r.params;if(t&&!l&&u>0)return;const{addSlidesBefore:c,addSlidesAfter:d}=r.params.virtual,{from:p,to:f,slides:m,slidesGrid:h,offset:v}=r.virtual;r.params.cssMode||r.updateActiveIndex();const g=r.activeIndex||0;let b,w,y;b=r.rtlTranslate?"right":r.isHorizontal()?"left":"top",s?(w=Math.floor(n/2)+a+d,y=Math.floor(n/2)+a+c):(w=n+(a-1)+d,y=(l?n:a)+c);let x=g-y,S=g+w;l||(x=Math.max(x,0),S=Math.min(S,m.length-1));let E=(r.slidesGrid[x]||0)-(r.slidesGrid[0]||0);function k(){r.updateSlides(),r.updateProgress(),r.updateSlidesClasses(),i("virtualUpdate")}if(l&&g>=y?(x-=y,s||(E+=r.slidesGrid[0])):l&&g<y&&(x=-y,s&&(E+=r.slidesGrid[0])),Object.assign(r.virtual,{from:x,to:S,offset:E,slidesGrid:r.slidesGrid,slidesBefore:y,slidesAfter:w}),p===x&&f===S&&!e)return r.slidesGrid!==h&&E!==v&&r.slides.forEach((e=>{e.style[b]=E-Math.abs(r.cssOverflowAdjustment())+"px"})),r.updateProgress(),void i("virtualUpdate");if(r.params.virtual.renderExternal)return r.params.virtual.renderExternal.call(r,{offset:E,from:x,to:S,slides:function(){const e=[];for(let t=x;t<=S;t+=1)e.push(m[t]);return e}()}),void(r.params.virtual.renderExternalUpdate?k():i("virtualUpdate"));const C=[],T=[],M=e=>{let t=e;return e<0?t=m.length+e:t>=m.length&&(t-=m.length),t};if(e)r.slides.filter((e=>e.matches(`.${r.params.slideClass}, swiper-slide`))).forEach((e=>{e.remove()}));else for(let e=p;e<=f;e+=1)if(e<x||e>S){const t=M(e);r.slides.filter((e=>e.matches(`.${r.params.slideClass}[data-swiper-slide-index="${t}"], swiper-slide[data-swiper-slide-index="${t}"]`))).forEach((e=>{e.remove()}))}const P=l?-m.length:0,L=l?2*m.length:m.length;for(let t=P;t<L;t+=1)if(t>=x&&t<=S){const r=M(t);void 0===f||e?T.push(r):(t>f&&T.push(r),t<p&&C.push(r))}if(T.forEach((e=>{r.slidesEl.append(o(m[e],e))})),l)for(let e=C.length-1;e>=0;e-=1){const t=C[e];r.slidesEl.prepend(o(m[t],t))}else C.sort(((e,t)=>t-e)),C.forEach((e=>{r.slidesEl.prepend(o(m[e],e))}));Dr(r.slidesEl,".swiper-slide, swiper-slide").forEach((e=>{e.style[b]=E-Math.abs(r.cssOverflowAdjustment())+"px"})),k()}a("beforeInit",(()=>{if(!r.params.virtual.enabled)return;let e;if(void 0===r.passedParams.virtual.slides){const t=[...r.slidesEl.children].filter((e=>e.matches(`.${r.params.slideClass}, swiper-slide`)));t&&t.length&&(r.virtual.slides=[...t],e=!0,t.forEach(((e,t)=>{e.setAttribute("data-swiper-slide-index",t),r.virtual.cache[t]=e,e.remove()})))}e||(r.virtual.slides=r.params.virtual.slides),r.classNames.push(`${r.params.containerModifierClass}virtual`),r.params.watchSlidesProgress=!0,r.originalParams.watchSlidesProgress=!0,u(!1,!0)})),a("setTranslate",(()=>{r.params.virtual.enabled&&(r.params.cssMode&&!r._immediateVirtual?(clearTimeout(t),t=setTimeout((()=>{u()}),100)):u())})),a("init update resize",(()=>{r.params.virtual.enabled&&r.params.cssMode&&zr(r.wrapperEl,"--swiper-virtual-size",`${r.virtualSize}px`)})),Object.assign(r.virtual,{appendSlide:function(e){if("object"==typeof e&&"length"in e)for(let t=0;t<e.length;t+=1)e[t]&&r.virtual.slides.push(e[t]);else r.virtual.slides.push(e);u(!0)},prependSlide:function(e){const t=r.activeIndex;let n=t+1,a=1;if(Array.isArray(e)){for(let t=0;t<e.length;t+=1)e[t]&&r.virtual.slides.unshift(e[t]);n=t+e.length,a=e.length}else r.virtual.slides.unshift(e);if(r.params.virtual.cache){const e=r.virtual.cache,t={};Object.keys(e).forEach((r=>{const n=e[r],i=n.getAttribute("data-swiper-slide-index");i&&n.setAttribute("data-swiper-slide-index",parseInt(i,10)+a),t[parseInt(r,10)+a]=n})),r.virtual.cache=t}u(!0),r.slideTo(n,0)},removeSlide:function(e){if(null==e)return;let t=r.activeIndex;if(Array.isArray(e))for(let n=e.length-1;n>=0;n-=1)r.params.virtual.cache&&(delete r.virtual.cache[e[n]],Object.keys(r.virtual.cache).forEach((t=>{t>e&&(r.virtual.cache[t-1]=r.virtual.cache[t],r.virtual.cache[t-1].setAttribute("data-swiper-slide-index",t-1),delete r.virtual.cache[t])}))),r.virtual.slides.splice(e[n],1),e[n]<t&&(t-=1),t=Math.max(t,0);else r.params.virtual.cache&&(delete r.virtual.cache[e],Object.keys(r.virtual.cache).forEach((t=>{t>e&&(r.virtual.cache[t-1]=r.virtual.cache[t],r.virtual.cache[t-1].setAttribute("data-swiper-slide-index",t-1),delete r.virtual.cache[t])}))),r.virtual.slides.splice(e,1),e<t&&(t-=1),t=Math.max(t,0);u(!0),r.slideTo(t,0)},removeAllSlides:function(){r.virtual.slides=[],r.params.virtual.cache&&(r.virtual.cache={}),u(!0),r.slideTo(0,0)},update:u})},function(e){let{swiper:t,extendParams:r,on:n,emit:a}=e;const i=xr(),s=Er();function l(e){if(!t.enabled)return;const{rtlTranslate:r}=t;let n=e;n.originalEvent&&(n=n.originalEvent);const l=n.keyCode||n.charCode,o=t.params.keyboard.pageUpDown,u=o&&33===l,c=o&&34===l,d=37===l,p=39===l,f=38===l,m=40===l;if(!t.allowSlideNext&&(t.isHorizontal()&&p||t.isVertical()&&m||c))return!1;if(!t.allowSlidePrev&&(t.isHorizontal()&&d||t.isVertical()&&f||u))return!1;if(!(n.shiftKey||n.altKey||n.ctrlKey||n.metaKey||i.activeElement&&i.activeElement.nodeName&&("input"===i.activeElement.nodeName.toLowerCase()||"textarea"===i.activeElement.nodeName.toLowerCase()))){if(t.params.keyboard.onlyInViewport&&(u||c||d||p||f||m)){let e=!1;if($r(t.el,`.${t.params.slideClass}, swiper-slide`).length>0&&0===$r(t.el,`.${t.params.slideActiveClass}`).length)return;const n=t.el,a=n.clientWidth,i=n.clientHeight,l=s.innerWidth,o=s.innerHeight,u=Ir(n);r&&(u.left-=n.scrollLeft);const c=[[u.left,u.top],[u.left+a,u.top],[u.left,u.top+i],[u.left+a,u.top+i]];for(let t=0;t<c.length;t+=1){const r=c[t];if(r[0]>=0&&r[0]<=l&&r[1]>=0&&r[1]<=o){if(0===r[0]&&0===r[1])continue;e=!0}}if(!e)return}t.isHorizontal()?((u||c||d||p)&&(n.preventDefault?n.preventDefault():n.returnValue=!1),((c||p)&&!r||(u||d)&&r)&&t.slideNext(),((u||d)&&!r||(c||p)&&r)&&t.slidePrev()):((u||c||f||m)&&(n.preventDefault?n.preventDefault():n.returnValue=!1),(c||m)&&t.slideNext(),(u||f)&&t.slidePrev()),a("keyPress",l)}}function o(){t.keyboard.enabled||(i.addEventListener("keydown",l),t.keyboard.enabled=!0)}function u(){t.keyboard.enabled&&(i.removeEventListener("keydown",l),t.keyboard.enabled=!1)}t.keyboard={enabled:!1},r({keyboard:{enabled:!1,onlyInViewport:!0,pageUpDown:!0}}),n("init",(()=>{t.params.keyboard.enabled&&o()})),n("destroy",(()=>{t.keyboard.enabled&&u()})),Object.assign(t.keyboard,{enable:o,disable:u})},function(e){let{swiper:t,extendParams:r,on:n,emit:a}=e;const i=Er();let s;r({mousewheel:{enabled:!1,releaseOnEdges:!1,invert:!1,forceToAxis:!1,sensitivity:1,eventsTarget:"container",thresholdDelta:null,thresholdTime:null,noMousewheelClass:"swiper-no-mousewheel"}}),t.mousewheel={enabled:!1};let l,o=Tr();const u=[];function c(){t.enabled&&(t.mouseEntered=!0)}function d(){t.enabled&&(t.mouseEntered=!1)}function p(e){return!(t.params.mousewheel.thresholdDelta&&e.delta<t.params.mousewheel.thresholdDelta||t.params.mousewheel.thresholdTime&&Tr()-o<t.params.mousewheel.thresholdTime||!(e.delta>=6&&Tr()-o<60)&&(e.direction<0?t.isEnd&&!t.params.loop||t.animating||(t.slideNext(),a("scroll",e.raw)):t.isBeginning&&!t.params.loop||t.animating||(t.slidePrev(),a("scroll",e.raw)),o=(new i.Date).getTime(),1))}function f(e){let r=e,n=!0;if(!t.enabled)return;if(e.target.closest(`.${t.params.mousewheel.noMousewheelClass}`))return;const i=t.params.mousewheel;t.params.cssMode&&r.preventDefault();let o=t.el;"container"!==t.params.mousewheel.eventsTarget&&(o=document.querySelector(t.params.mousewheel.eventsTarget));const c=o&&o.contains(r.target);if(!t.mouseEntered&&!c&&!i.releaseOnEdges)return!0;r.originalEvent&&(r=r.originalEvent);let d=0;const f=t.rtlTranslate?-1:1,m=function(e){let t=0,r=0,n=0,a=0;return"detail"in e&&(r=e.detail),"wheelDelta"in e&&(r=-e.wheelDelta/120),"wheelDeltaY"in e&&(r=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(t=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=r,r=0),n=10*t,a=10*r,"deltaY"in e&&(a=e.deltaY),"deltaX"in e&&(n=e.deltaX),e.shiftKey&&!n&&(n=a,a=0),(n||a)&&e.deltaMode&&(1===e.deltaMode?(n*=40,a*=40):(n*=800,a*=800)),n&&!t&&(t=n<1?-1:1),a&&!r&&(r=a<1?-1:1),{spinX:t,spinY:r,pixelX:n,pixelY:a}}(r);if(i.forceToAxis)if(t.isHorizontal()){if(!(Math.abs(m.pixelX)>Math.abs(m.pixelY)))return!0;d=-m.pixelX*f}else{if(!(Math.abs(m.pixelY)>Math.abs(m.pixelX)))return!0;d=-m.pixelY}else d=Math.abs(m.pixelX)>Math.abs(m.pixelY)?-m.pixelX*f:-m.pixelY;if(0===d)return!0;i.invert&&(d=-d);let h=t.getTranslate()+d*i.sensitivity;if(h>=t.minTranslate()&&(h=t.minTranslate()),h<=t.maxTranslate()&&(h=t.maxTranslate()),n=!!t.params.loop||!(h===t.minTranslate()||h===t.maxTranslate()),n&&t.params.nested&&r.stopPropagation(),t.params.freeMode&&t.params.freeMode.enabled){const e={time:Tr(),delta:Math.abs(d),direction:Math.sign(d)},n=l&&e.time<l.time+500&&e.delta<=l.delta&&e.direction===l.direction;if(!n){l=void 0;let o=t.getTranslate()+d*i.sensitivity;const c=t.isBeginning,p=t.isEnd;if(o>=t.minTranslate()&&(o=t.minTranslate()),o<=t.maxTranslate()&&(o=t.maxTranslate()),t.setTransition(0),t.setTranslate(o),t.updateProgress(),t.updateActiveIndex(),t.updateSlidesClasses(),(!c&&t.isBeginning||!p&&t.isEnd)&&t.updateSlidesClasses(),t.params.loop&&t.loopFix({direction:e.direction<0?"next":"prev",byMousewheel:!0}),t.params.freeMode.sticky){clearTimeout(s),s=void 0,u.length>=15&&u.shift();const r=u.length?u[u.length-1]:void 0,n=u[0];if(u.push(e),r&&(e.delta>r.delta||e.direction!==r.direction))u.splice(0);else if(u.length>=15&&e.time-n.time<500&&n.delta-e.delta>=1&&e.delta<=6){const r=d>0?.8:.2;l=e,u.splice(0),s=Cr((()=>{t.slideToClosest(t.params.speed,!0,void 0,r)}),0)}s||(s=Cr((()=>{l=e,u.splice(0),t.slideToClosest(t.params.speed,!0,void 0,.5)}),500))}if(n||a("scroll",r),t.params.autoplay&&t.params.autoplayDisableOnInteraction&&t.autoplay.stop(),i.releaseOnEdges&&(o===t.minTranslate()||o===t.maxTranslate()))return!0}}else{const r={time:Tr(),delta:Math.abs(d),direction:Math.sign(d),raw:e};u.length>=2&&u.shift();const n=u.length?u[u.length-1]:void 0;if(u.push(r),n?(r.direction!==n.direction||r.delta>n.delta||r.time>n.time+150)&&p(r):p(r),function(e){const r=t.params.mousewheel;if(e.direction<0){if(t.isEnd&&!t.params.loop&&r.releaseOnEdges)return!0}else if(t.isBeginning&&!t.params.loop&&r.releaseOnEdges)return!0;return!1}(r))return!0}return r.preventDefault?r.preventDefault():r.returnValue=!1,!1}function m(e){let r=t.el;"container"!==t.params.mousewheel.eventsTarget&&(r=document.querySelector(t.params.mousewheel.eventsTarget)),r[e]("mouseenter",c),r[e]("mouseleave",d),r[e]("wheel",f)}function h(){return t.params.cssMode?(t.wrapperEl.removeEventListener("wheel",f),!0):!t.mousewheel.enabled&&(m("addEventListener"),t.mousewheel.enabled=!0,!0)}function v(){return t.params.cssMode?(t.wrapperEl.addEventListener(event,f),!0):!!t.mousewheel.enabled&&(m("removeEventListener"),t.mousewheel.enabled=!1,!0)}n("init",(()=>{!t.params.mousewheel.enabled&&t.params.cssMode&&v(),t.params.mousewheel.enabled&&h()})),n("destroy",(()=>{t.params.cssMode&&h(),t.mousewheel.enabled&&v()})),Object.assign(t.mousewheel,{enable:h,disable:v})},function(e){let{swiper:t,extendParams:r,on:n,emit:a}=e;function i(e){let r;return e&&"string"==typeof e&&t.isElement&&(r=t.el.querySelector(e),r)?r:(e&&("string"==typeof e&&(r=[...document.querySelectorAll(e)]),t.params.uniqueNavElements&&"string"==typeof e&&r&&r.length>1&&1===t.el.querySelectorAll(e).length?r=t.el.querySelector(e):r&&1===r.length&&(r=r[0])),e&&!r?e:r)}function s(e,r){const n=t.params.navigation;(e=Br(e)).forEach((e=>{e&&(e.classList[r?"add":"remove"](...n.disabledClass.split(" ")),"BUTTON"===e.tagName&&(e.disabled=r),t.params.watchOverflow&&t.enabled&&e.classList[t.isLocked?"add":"remove"](n.lockClass))}))}function l(){const{nextEl:e,prevEl:r}=t.navigation;if(t.params.loop)return s(r,!1),void s(e,!1);s(r,t.isBeginning&&!t.params.rewind),s(e,t.isEnd&&!t.params.rewind)}function o(e){e.preventDefault(),(!t.isBeginning||t.params.loop||t.params.rewind)&&(t.slidePrev(),a("navigationPrev"))}function u(e){e.preventDefault(),(!t.isEnd||t.params.loop||t.params.rewind)&&(t.slideNext(),a("navigationNext"))}function c(){const e=t.params.navigation;if(t.params.navigation=xn(t,t.originalParams.navigation,t.params.navigation,{nextEl:"swiper-button-next",prevEl:"swiper-button-prev"}),!e.nextEl&&!e.prevEl)return;let r=i(e.nextEl),n=i(e.prevEl);Object.assign(t.navigation,{nextEl:r,prevEl:n}),r=Br(r),n=Br(n);const a=(r,n)=>{r&&r.addEventListener("click","next"===n?u:o),!t.enabled&&r&&r.classList.add(...e.lockClass.split(" "))};r.forEach((e=>a(e,"next"))),n.forEach((e=>a(e,"prev")))}function d(){let{nextEl:e,prevEl:r}=t.navigation;e=Br(e),r=Br(r);const n=(e,r)=>{e.removeEventListener("click","next"===r?u:o),e.classList.remove(...t.params.navigation.disabledClass.split(" "))};e.forEach((e=>n(e,"next"))),r.forEach((e=>n(e,"prev")))}r({navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock",navigationDisabledClass:"swiper-navigation-disabled"}}),t.navigation={nextEl:null,prevEl:null},n("init",(()=>{!1===t.params.navigation.enabled?p():(c(),l())})),n("toEdge fromEdge lock unlock",(()=>{l()})),n("destroy",(()=>{d()})),n("enable disable",(()=>{let{nextEl:e,prevEl:r}=t.navigation;e=Br(e),r=Br(r),t.enabled?l():[...e,...r].filter((e=>!!e)).forEach((e=>e.classList.add(t.params.navigation.lockClass)))})),n("click",((e,r)=>{let{nextEl:n,prevEl:i}=t.navigation;n=Br(n),i=Br(i);const s=r.target;if(t.params.navigation.hideOnClick&&!i.includes(s)&&!n.includes(s)){if(t.pagination&&t.params.pagination&&t.params.pagination.clickable&&(t.pagination.el===s||t.pagination.el.contains(s)))return;let e;n.length?e=n[0].classList.contains(t.params.navigation.hiddenClass):i.length&&(e=i[0].classList.contains(t.params.navigation.hiddenClass)),a(!0===e?"navigationShow":"navigationHide"),[...n,...i].filter((e=>!!e)).forEach((e=>e.classList.toggle(t.params.navigation.hiddenClass)))}}));const p=()=>{t.el.classList.add(...t.params.navigation.navigationDisabledClass.split(" ")),d()};Object.assign(t.navigation,{enable:()=>{t.el.classList.remove(...t.params.navigation.navigationDisabledClass.split(" ")),c(),l()},disable:p,update:l,init:c,destroy:d})},function(e){let{swiper:t,extendParams:r,on:n,emit:a}=e;const i="swiper-pagination";let s;r({pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:e=>e,formatFractionTotal:e=>e,bulletClass:`${i}-bullet`,bulletActiveClass:`${i}-bullet-active`,modifierClass:`${i}-`,currentClass:`${i}-current`,totalClass:`${i}-total`,hiddenClass:`${i}-hidden`,progressbarFillClass:`${i}-progressbar-fill`,progressbarOppositeClass:`${i}-progressbar-opposite`,clickableClass:`${i}-clickable`,lockClass:`${i}-lock`,horizontalClass:`${i}-horizontal`,verticalClass:`${i}-vertical`,paginationDisabledClass:`${i}-disabled`}}),t.pagination={el:null,bullets:[]};let l=0;function o(){return!t.params.pagination.el||!t.pagination.el||Array.isArray(t.pagination.el)&&0===t.pagination.el.length}function u(e,r){const{bulletActiveClass:n}=t.params.pagination;e&&(e=e[("prev"===r?"previous":"next")+"ElementSibling"])&&(e.classList.add(`${n}-${r}`),(e=e[("prev"===r?"previous":"next")+"ElementSibling"])&&e.classList.add(`${n}-${r}-${r}`))}function c(e){const r=e.target.closest(Sn(t.params.pagination.bulletClass));if(!r)return;e.preventDefault();const n=jr(r)*t.params.slidesPerGroup;if(t.params.loop){if(t.realIndex===n)return;t.slideToLoop(n)}else t.slideTo(n)}function d(){const e=t.rtl,r=t.params.pagination;if(o())return;let n,i,c=t.pagination.el;c=Br(c);const d=t.virtual&&t.params.virtual.enabled?t.virtual.slides.length:t.slides.length,p=t.params.loop?Math.ceil(d/t.params.slidesPerGroup):t.snapGrid.length;if(t.params.loop?(i=t.previousRealIndex||0,n=t.params.slidesPerGroup>1?Math.floor(t.realIndex/t.params.slidesPerGroup):t.realIndex):void 0!==t.snapIndex?(n=t.snapIndex,i=t.previousSnapIndex):(i=t.previousIndex||0,n=t.activeIndex||0),"bullets"===r.type&&t.pagination.bullets&&t.pagination.bullets.length>0){const a=t.pagination.bullets;let o,d,p;if(r.dynamicBullets&&(s=Fr(a[0],t.isHorizontal()?"width":"height",!0),c.forEach((e=>{e.style[t.isHorizontal()?"width":"height"]=s*(r.dynamicMainBullets+4)+"px"})),r.dynamicMainBullets>1&&void 0!==i&&(l+=n-(i||0),l>r.dynamicMainBullets-1?l=r.dynamicMainBullets-1:l<0&&(l=0)),o=Math.max(n-l,0),d=o+(Math.min(a.length,r.dynamicMainBullets)-1),p=(d+o)/2),a.forEach((e=>{const t=[...["","-next","-next-next","-prev","-prev-prev","-main"].map((e=>`${r.bulletActiveClass}${e}`))].map((e=>"string"==typeof e&&e.includes(" ")?e.split(" "):e)).flat();e.classList.remove(...t)})),c.length>1)a.forEach((e=>{const a=jr(e);a===n?e.classList.add(...r.bulletActiveClass.split(" ")):t.isElement&&e.setAttribute("part","bullet"),r.dynamicBullets&&(a>=o&&a<=d&&e.classList.add(...`${r.bulletActiveClass}-main`.split(" ")),a===o&&u(e,"prev"),a===d&&u(e,"next"))}));else{const e=a[n];if(e&&e.classList.add(...r.bulletActiveClass.split(" ")),t.isElement&&a.forEach(((e,t)=>{e.setAttribute("part",t===n?"bullet-active":"bullet")})),r.dynamicBullets){const e=a[o],t=a[d];for(let e=o;e<=d;e+=1)a[e]&&a[e].classList.add(...`${r.bulletActiveClass}-main`.split(" "));u(e,"prev"),u(t,"next")}}if(r.dynamicBullets){const n=Math.min(a.length,r.dynamicMainBullets+4),i=(s*n-s)/2-p*s,l=e?"right":"left";a.forEach((e=>{e.style[t.isHorizontal()?l:"top"]=`${i}px`}))}}c.forEach(((e,i)=>{if("fraction"===r.type&&(e.querySelectorAll(Sn(r.currentClass)).forEach((e=>{e.textContent=r.formatFractionCurrent(n+1)})),e.querySelectorAll(Sn(r.totalClass)).forEach((e=>{e.textContent=r.formatFractionTotal(p)}))),"progressbar"===r.type){let a;a=r.progressbarOpposite?t.isHorizontal()?"vertical":"horizontal":t.isHorizontal()?"horizontal":"vertical";const i=(n+1)/p;let s=1,l=1;"horizontal"===a?s=i:l=i,e.querySelectorAll(Sn(r.progressbarFillClass)).forEach((e=>{e.style.transform=`translate3d(0,0,0) scaleX(${s}) scaleY(${l})`,e.style.transitionDuration=`${t.params.speed}ms`}))}"custom"===r.type&&r.renderCustom?(e.innerHTML=r.renderCustom(t,n+1,p),0===i&&a("paginationRender",e)):(0===i&&a("paginationRender",e),a("paginationUpdate",e)),t.params.watchOverflow&&t.enabled&&e.classList[t.isLocked?"add":"remove"](r.lockClass)}))}function p(){const e=t.params.pagination;if(o())return;const r=t.virtual&&t.params.virtual.enabled?t.virtual.slides.length:t.grid&&t.params.grid.rows>1?t.slides.length/Math.ceil(t.params.grid.rows):t.slides.length;let n=t.pagination.el;n=Br(n);let i="";if("bullets"===e.type){let n=t.params.loop?Math.ceil(r/t.params.slidesPerGroup):t.snapGrid.length;t.params.freeMode&&t.params.freeMode.enabled&&n>r&&(n=r);for(let r=0;r<n;r+=1)e.renderBullet?i+=e.renderBullet.call(t,r,e.bulletClass):i+=`<${e.bulletElement} ${t.isElement?'part="bullet"':""} class="${e.bulletClass}"></${e.bulletElement}>`}"fraction"===e.type&&(i=e.renderFraction?e.renderFraction.call(t,e.currentClass,e.totalClass):`<span class="${e.currentClass}"></span> / <span class="${e.totalClass}"></span>`),"progressbar"===e.type&&(i=e.renderProgressbar?e.renderProgressbar.call(t,e.progressbarFillClass):`<span class="${e.progressbarFillClass}"></span>`),t.pagination.bullets=[],n.forEach((r=>{"custom"!==e.type&&(r.innerHTML=i||""),"bullets"===e.type&&t.pagination.bullets.push(...r.querySelectorAll(Sn(e.bulletClass)))})),"custom"!==e.type&&a("paginationRender",n[0])}function f(){t.params.pagination=xn(t,t.originalParams.pagination,t.params.pagination,{el:"swiper-pagination"});const e=t.params.pagination;if(!e.el)return;let r;"string"==typeof e.el&&t.isElement&&(r=t.el.querySelector(e.el)),r||"string"!=typeof e.el||(r=[...document.querySelectorAll(e.el)]),r||(r=e.el),r&&0!==r.length&&(t.params.uniqueNavElements&&"string"==typeof e.el&&Array.isArray(r)&&r.length>1&&(r=[...t.el.querySelectorAll(e.el)],r.length>1&&(r=r.filter((e=>$r(e,".swiper")[0]===t.el))[0])),Array.isArray(r)&&1===r.length&&(r=r[0]),Object.assign(t.pagination,{el:r}),r=Br(r),r.forEach((r=>{"bullets"===e.type&&e.clickable&&r.classList.add(...(e.clickableClass||"").split(" ")),r.classList.add(e.modifierClass+e.type),r.classList.add(t.isHorizontal()?e.horizontalClass:e.verticalClass),"bullets"===e.type&&e.dynamicBullets&&(r.classList.add(`${e.modifierClass}${e.type}-dynamic`),l=0,e.dynamicMainBullets<1&&(e.dynamicMainBullets=1)),"progressbar"===e.type&&e.progressbarOpposite&&r.classList.add(e.progressbarOppositeClass),e.clickable&&r.addEventListener("click",c),t.enabled||r.classList.add(e.lockClass)})))}function m(){const e=t.params.pagination;if(o())return;let r=t.pagination.el;r&&(r=Br(r),r.forEach((r=>{r.classList.remove(e.hiddenClass),r.classList.remove(e.modifierClass+e.type),r.classList.remove(t.isHorizontal()?e.horizontalClass:e.verticalClass),e.clickable&&(r.classList.remove(...(e.clickableClass||"").split(" ")),r.removeEventListener("click",c))}))),t.pagination.bullets&&t.pagination.bullets.forEach((t=>t.classList.remove(...e.bulletActiveClass.split(" "))))}n("changeDirection",(()=>{if(!t.pagination||!t.pagination.el)return;const e=t.params.pagination;let{el:r}=t.pagination;r=Br(r),r.forEach((r=>{r.classList.remove(e.horizontalClass,e.verticalClass),r.classList.add(t.isHorizontal()?e.horizontalClass:e.verticalClass)}))})),n("init",(()=>{!1===t.params.pagination.enabled?h():(f(),p(),d())})),n("activeIndexChange",(()=>{void 0===t.snapIndex&&d()})),n("snapIndexChange",(()=>{d()})),n("snapGridLengthChange",(()=>{p(),d()})),n("destroy",(()=>{m()})),n("enable disable",(()=>{let{el:e}=t.pagination;e&&(e=Br(e),e.forEach((e=>e.classList[t.enabled?"remove":"add"](t.params.pagination.lockClass))))})),n("lock unlock",(()=>{d()})),n("click",((e,r)=>{const n=r.target,i=Br(t.pagination.el);if(t.params.pagination.el&&t.params.pagination.hideOnClick&&i&&i.length>0&&!n.classList.contains(t.params.pagination.bulletClass)){if(t.navigation&&(t.navigation.nextEl&&n===t.navigation.nextEl||t.navigation.prevEl&&n===t.navigation.prevEl))return;const e=i[0].classList.contains(t.params.pagination.hiddenClass);a(!0===e?"paginationShow":"paginationHide"),i.forEach((e=>e.classList.toggle(t.params.pagination.hiddenClass)))}}));const h=()=>{t.el.classList.add(t.params.pagination.paginationDisabledClass);let{el:e}=t.pagination;e&&(e=Br(e),e.forEach((e=>e.classList.add(t.params.pagination.paginationDisabledClass)))),m()};Object.assign(t.pagination,{enable:()=>{t.el.classList.remove(t.params.pagination.paginationDisabledClass);let{el:e}=t.pagination;e&&(e=Br(e),e.forEach((e=>e.classList.remove(t.params.pagination.paginationDisabledClass)))),f(),p(),d()},disable:h,render:p,update:d,init:f,destroy:m})},function(e){let{swiper:t,extendParams:r,on:n,emit:a}=e;const i=xr();let s,l,o,u,c=!1,d=null,p=null;function f(){if(!t.params.scrollbar.el||!t.scrollbar.el)return;const{scrollbar:e,rtlTranslate:r}=t,{dragEl:n,el:a}=e,i=t.params.scrollbar,s=t.params.loop?t.progressLoop:t.progress;let u=l,c=(o-l)*s;r?(c=-c,c>0?(u=l-c,c=0):-c+l>o&&(u=o+c)):c<0?(u=l+c,c=0):c+l>o&&(u=o-c),t.isHorizontal()?(n.style.transform=`translate3d(${c}px, 0, 0)`,n.style.width=`${u}px`):(n.style.transform=`translate3d(0px, ${c}px, 0)`,n.style.height=`${u}px`),i.hide&&(clearTimeout(d),a.style.opacity=1,d=setTimeout((()=>{a.style.opacity=0,a.style.transitionDuration="400ms"}),1e3))}function m(){if(!t.params.scrollbar.el||!t.scrollbar.el)return;const{scrollbar:e}=t,{dragEl:r,el:n}=e;r.style.width="",r.style.height="",o=t.isHorizontal()?n.offsetWidth:n.offsetHeight,u=t.size/(t.virtualSize+t.params.slidesOffsetBefore-(t.params.centeredSlides?t.snapGrid[0]:0)),l="auto"===t.params.scrollbar.dragSize?o*u:parseInt(t.params.scrollbar.dragSize,10),t.isHorizontal()?r.style.width=`${l}px`:r.style.height=`${l}px`,n.style.display=u>=1?"none":"",t.params.scrollbar.hide&&(n.style.opacity=0),t.params.watchOverflow&&t.enabled&&e.el.classList[t.isLocked?"add":"remove"](t.params.scrollbar.lockClass)}function h(e){return t.isHorizontal()?e.clientX:e.clientY}function v(e){const{scrollbar:r,rtlTranslate:n}=t,{el:a}=r;let i;i=(h(e)-Ir(a)[t.isHorizontal()?"left":"top"]-(null!==s?s:l/2))/(o-l),i=Math.max(Math.min(i,1),0),n&&(i=1-i);const u=t.minTranslate()+(t.maxTranslate()-t.minTranslate())*i;t.updateProgress(u),t.setTranslate(u),t.updateActiveIndex(),t.updateSlidesClasses()}function g(e){const r=t.params.scrollbar,{scrollbar:n,wrapperEl:i}=t,{el:l,dragEl:o}=n;c=!0,s=e.target===o?h(e)-e.target.getBoundingClientRect()[t.isHorizontal()?"left":"top"]:null,e.preventDefault(),e.stopPropagation(),i.style.transitionDuration="100ms",o.style.transitionDuration="100ms",v(e),clearTimeout(p),l.style.transitionDuration="0ms",r.hide&&(l.style.opacity=1),t.params.cssMode&&(t.wrapperEl.style["scroll-snap-type"]="none"),a("scrollbarDragStart",e)}function b(e){const{scrollbar:r,wrapperEl:n}=t,{el:i,dragEl:s}=r;c&&(e.preventDefault&&e.cancelable?e.preventDefault():e.returnValue=!1,v(e),n.style.transitionDuration="0ms",i.style.transitionDuration="0ms",s.style.transitionDuration="0ms",a("scrollbarDragMove",e))}function w(e){const r=t.params.scrollbar,{scrollbar:n,wrapperEl:i}=t,{el:s}=n;c&&(c=!1,t.params.cssMode&&(t.wrapperEl.style["scroll-snap-type"]="",i.style.transitionDuration=""),r.hide&&(clearTimeout(p),p=Cr((()=>{s.style.opacity=0,s.style.transitionDuration="400ms"}),1e3)),a("scrollbarDragEnd",e),r.snapOnRelease&&t.slideToClosest())}function y(e){const{scrollbar:r,params:n}=t,a=r.el;if(!a)return;const s=a,l=!!n.passiveListeners&&{passive:!1,capture:!1},o=!!n.passiveListeners&&{passive:!0,capture:!1};if(!s)return;const u="on"===e?"addEventListener":"removeEventListener";s[u]("pointerdown",g,l),i[u]("pointermove",b,l),i[u]("pointerup",w,o)}function x(){const{scrollbar:e,el:r}=t;t.params.scrollbar=xn(t,t.originalParams.scrollbar,t.params.scrollbar,{el:"swiper-scrollbar"});const n=t.params.scrollbar;if(!n.el)return;let a,s;if("string"==typeof n.el&&t.isElement&&(a=t.el.querySelector(n.el)),a||"string"!=typeof n.el)a||(a=n.el);else if(a=i.querySelectorAll(n.el),!a.length)return;t.params.uniqueNavElements&&"string"==typeof n.el&&a.length>1&&1===r.querySelectorAll(n.el).length&&(a=r.querySelector(n.el)),a.length>0&&(a=a[0]),a.classList.add(t.isHorizontal()?n.horizontalClass:n.verticalClass),a&&(s=a.querySelector(Sn(t.params.scrollbar.dragClass)),s||(s=Ar("div",t.params.scrollbar.dragClass),a.append(s))),Object.assign(e,{el:a,dragEl:s}),n.draggable&&t.params.scrollbar.el&&t.scrollbar.el&&y("on"),a&&a.classList[t.enabled?"remove":"add"](...kr(t.params.scrollbar.lockClass))}function S(){const e=t.params.scrollbar,r=t.scrollbar.el;r&&r.classList.remove(...kr(t.isHorizontal()?e.horizontalClass:e.verticalClass)),t.params.scrollbar.el&&t.scrollbar.el&&y("off")}r({scrollbar:{el:null,dragSize:"auto",hide:!1,draggable:!1,snapOnRelease:!0,lockClass:"swiper-scrollbar-lock",dragClass:"swiper-scrollbar-drag",scrollbarDisabledClass:"swiper-scrollbar-disabled",horizontalClass:"swiper-scrollbar-horizontal",verticalClass:"swiper-scrollbar-vertical"}}),t.scrollbar={el:null,dragEl:null},n("changeDirection",(()=>{if(!t.scrollbar||!t.scrollbar.el)return;const e=t.params.scrollbar;let{el:r}=t.scrollbar;r=Br(r),r.forEach((r=>{r.classList.remove(e.horizontalClass,e.verticalClass),r.classList.add(t.isHorizontal()?e.horizontalClass:e.verticalClass)}))})),n("init",(()=>{!1===t.params.scrollbar.enabled?E():(x(),m(),f())})),n("update resize observerUpdate lock unlock changeDirection",(()=>{m()})),n("setTranslate",(()=>{f()})),n("setTransition",((e,r)=>{!function(e){t.params.scrollbar.el&&t.scrollbar.el&&(t.scrollbar.dragEl.style.transitionDuration=`${e}ms`)}(r)})),n("enable disable",(()=>{const{el:e}=t.scrollbar;e&&e.classList[t.enabled?"remove":"add"](...kr(t.params.scrollbar.lockClass))})),n("destroy",(()=>{S()}));const E=()=>{t.el.classList.add(...kr(t.params.scrollbar.scrollbarDisabledClass)),t.scrollbar.el&&t.scrollbar.el.classList.add(...kr(t.params.scrollbar.scrollbarDisabledClass)),S()};Object.assign(t.scrollbar,{enable:()=>{t.el.classList.remove(...kr(t.params.scrollbar.scrollbarDisabledClass)),t.scrollbar.el&&t.scrollbar.el.classList.remove(...kr(t.params.scrollbar.scrollbarDisabledClass)),x(),m(),f()},disable:E,updateSize:m,setTranslate:f,init:x,destroy:S})},function(e){let{swiper:t,extendParams:r,on:n}=e;r({parallax:{enabled:!1}});const a="[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]",i=(e,r)=>{const{rtl:n}=t,a=n?-1:1,i=e.getAttribute("data-swiper-parallax")||"0";let s=e.getAttribute("data-swiper-parallax-x"),l=e.getAttribute("data-swiper-parallax-y");const o=e.getAttribute("data-swiper-parallax-scale"),u=e.getAttribute("data-swiper-parallax-opacity"),c=e.getAttribute("data-swiper-parallax-rotate");if(s||l?(s=s||"0",l=l||"0"):t.isHorizontal()?(s=i,l="0"):(l=i,s="0"),s=s.indexOf("%")>=0?parseInt(s,10)*r*a+"%":s*r*a+"px",l=l.indexOf("%")>=0?parseInt(l,10)*r+"%":l*r+"px",null!=u){const t=u-(u-1)*(1-Math.abs(r));e.style.opacity=t}let d=`translate3d(${s}, ${l}, 0px)`;null!=o&&(d+=` scale(${o-(o-1)*(1-Math.abs(r))})`),c&&null!=c&&(d+=` rotate(${c*r*-1}deg)`),e.style.transform=d},s=()=>{const{el:e,slides:r,progress:n,snapGrid:s,isElement:l}=t,o=Dr(e,a);t.isElement&&o.push(...Dr(t.hostEl,a)),o.forEach((e=>{i(e,n)})),r.forEach(((e,r)=>{let l=e.progress;t.params.slidesPerGroup>1&&"auto"!==t.params.slidesPerView&&(l+=Math.ceil(r/2)-n*(s.length-1)),l=Math.min(Math.max(l,-1),1),e.querySelectorAll(`${a}, [data-swiper-parallax-rotate]`).forEach((e=>{i(e,l)}))}))};n("beforeInit",(()=>{t.params.parallax.enabled&&(t.params.watchSlidesProgress=!0,t.originalParams.watchSlidesProgress=!0)})),n("init",(()=>{t.params.parallax.enabled&&s()})),n("setTranslate",(()=>{t.params.parallax.enabled&&s()})),n("setTransition",((e,r)=>{t.params.parallax.enabled&&function(e){void 0===e&&(e=t.params.speed);const{el:r,hostEl:n}=t,i=[...r.querySelectorAll(a)];t.isElement&&i.push(...n.querySelectorAll(a)),i.forEach((t=>{let r=parseInt(t.getAttribute("data-swiper-parallax-duration"),10)||e;0===e&&(r=0),t.style.transitionDuration=`${r}ms`}))}(r)}))},function(e){let{swiper:t,extendParams:r,on:n,emit:a}=e;const i=Er();r({zoom:{enabled:!1,limitToOriginalSize:!1,maxRatio:3,minRatio:1,toggle:!0,containerClass:"swiper-zoom-container",zoomedSlideClass:"swiper-slide-zoomed"}}),t.zoom={enabled:!1};let s,l,o=1,u=!1;const c=[],d={originX:0,originY:0,slideEl:void 0,slideWidth:void 0,slideHeight:void 0,imageEl:void 0,imageWrapEl:void 0,maxRatio:3},p={isTouched:void 0,isMoved:void 0,currentX:void 0,currentY:void 0,minX:void 0,minY:void 0,maxX:void 0,maxY:void 0,width:void 0,height:void 0,startX:void 0,startY:void 0,touchesStart:{},touchesCurrent:{}},f={x:void 0,y:void 0,prevPositionX:void 0,prevPositionY:void 0,prevTime:void 0};let m,h=1;function v(){if(c.length<2)return 1;const e=c[0].pageX,t=c[0].pageY,r=c[1].pageX,n=c[1].pageY;return Math.sqrt((r-e)**2+(n-t)**2)}function g(){const e=t.params.zoom,r=d.imageWrapEl.getAttribute("data-swiper-zoom")||e.maxRatio;if(e.limitToOriginalSize&&d.imageEl&&d.imageEl.naturalWidth){const e=d.imageEl.naturalWidth/d.imageEl.offsetWidth;return Math.min(e,r)}return r}function b(e){const r=t.isElement?"swiper-slide":`.${t.params.slideClass}`;return!!e.target.matches(r)||t.slides.filter((t=>t.contains(e.target))).length>0}function w(e){if("mouse"===e.pointerType&&c.splice(0,c.length),!b(e))return;const r=t.params.zoom;if(s=!1,l=!1,c.push(e),!(c.length<2)){if(s=!0,d.scaleStart=v(),!d.slideEl){d.slideEl=e.target.closest(`.${t.params.slideClass}, swiper-slide`),d.slideEl||(d.slideEl=t.slides[t.activeIndex]);let n=d.slideEl.querySelector(`.${r.containerClass}`);if(n&&(n=n.querySelectorAll("picture, img, svg, canvas, .swiper-zoom-target")[0]),d.imageEl=n,d.imageWrapEl=n?$r(d.imageEl,`.${r.containerClass}`)[0]:void 0,!d.imageWrapEl)return void(d.imageEl=void 0);d.maxRatio=g()}if(d.imageEl){const[e,t]=function(){if(c.length<2)return{x:null,y:null};const e=d.imageEl.getBoundingClientRect();return[(c[0].pageX+(c[1].pageX-c[0].pageX)/2-e.x-i.scrollX)/o,(c[0].pageY+(c[1].pageY-c[0].pageY)/2-e.y-i.scrollY)/o]}();d.originX=e,d.originY=t,d.imageEl.style.transitionDuration="0ms"}u=!0}}function y(e){if(!b(e))return;const r=t.params.zoom,n=t.zoom,a=c.findIndex((t=>t.pointerId===e.pointerId));a>=0&&(c[a]=e),c.length<2||(l=!0,d.scaleMove=v(),d.imageEl&&(n.scale=d.scaleMove/d.scaleStart*o,n.scale>d.maxRatio&&(n.scale=d.maxRatio-1+(n.scale-d.maxRatio+1)**.5),n.scale<r.minRatio&&(n.scale=r.minRatio+1-(r.minRatio-n.scale+1)**.5),d.imageEl.style.transform=`translate3d(0,0,0) scale(${n.scale})`))}function x(e){if(!b(e))return;if("mouse"===e.pointerType&&"pointerout"===e.type)return;const r=t.params.zoom,n=t.zoom,a=c.findIndex((t=>t.pointerId===e.pointerId));a>=0&&c.splice(a,1),s&&l&&(s=!1,l=!1,d.imageEl&&(n.scale=Math.max(Math.min(n.scale,d.maxRatio),r.minRatio),d.imageEl.style.transitionDuration=`${t.params.speed}ms`,d.imageEl.style.transform=`translate3d(0,0,0) scale(${n.scale})`,o=n.scale,u=!1,n.scale>1&&d.slideEl?d.slideEl.classList.add(`${r.zoomedSlideClass}`):n.scale<=1&&d.slideEl&&d.slideEl.classList.remove(`${r.zoomedSlideClass}`),1===n.scale&&(d.originX=0,d.originY=0,d.slideEl=void 0)))}function S(){t.touchEventsData.preventTouchMoveFromPointerMove=!1}function E(e){if(!b(e)||!function(e){const r=`.${t.params.zoom.containerClass}`;return!!e.target.matches(r)||[...t.hostEl.querySelectorAll(r)].filter((t=>t.contains(e.target))).length>0}(e))return;const r=t.zoom;if(!d.imageEl)return;if(!p.isTouched||!d.slideEl)return;p.isMoved||(p.width=d.imageEl.offsetWidth||d.imageEl.clientWidth,p.height=d.imageEl.offsetHeight||d.imageEl.clientHeight,p.startX=Mr(d.imageWrapEl,"x")||0,p.startY=Mr(d.imageWrapEl,"y")||0,d.slideWidth=d.slideEl.offsetWidth,d.slideHeight=d.slideEl.offsetHeight,d.imageWrapEl.style.transitionDuration="0ms");const n=p.width*r.scale,a=p.height*r.scale;if(n<d.slideWidth&&a<d.slideHeight)return void S();if(p.minX=Math.min(d.slideWidth/2-n/2,0),p.maxX=-p.minX,p.minY=Math.min(d.slideHeight/2-a/2,0),p.maxY=-p.minY,p.touchesCurrent.x=c.length>0?c[0].pageX:e.pageX,p.touchesCurrent.y=c.length>0?c[0].pageY:e.pageY,Math.max(Math.abs(p.touchesCurrent.x-p.touchesStart.x),Math.abs(p.touchesCurrent.y-p.touchesStart.y))>5&&(t.allowClick=!1),!p.isMoved&&!u){if(t.isHorizontal()&&(Math.floor(p.minX)===Math.floor(p.startX)&&p.touchesCurrent.x<p.touchesStart.x||Math.floor(p.maxX)===Math.floor(p.startX)&&p.touchesCurrent.x>p.touchesStart.x))return p.isTouched=!1,void S();if(!t.isHorizontal()&&(Math.floor(p.minY)===Math.floor(p.startY)&&p.touchesCurrent.y<p.touchesStart.y||Math.floor(p.maxY)===Math.floor(p.startY)&&p.touchesCurrent.y>p.touchesStart.y))return p.isTouched=!1,void S()}e.cancelable&&e.preventDefault(),e.stopPropagation(),clearTimeout(m),t.touchEventsData.preventTouchMoveFromPointerMove=!0,m=setTimeout((()=>{S()})),p.isMoved=!0;const i=(r.scale-o)/(d.maxRatio-t.params.zoom.minRatio),{originX:s,originY:l}=d;p.currentX=p.touchesCurrent.x-p.touchesStart.x+p.startX+i*(p.width-2*s),p.currentY=p.touchesCurrent.y-p.touchesStart.y+p.startY+i*(p.height-2*l),p.currentX<p.minX&&(p.currentX=p.minX+1-(p.minX-p.currentX+1)**.8),p.currentX>p.maxX&&(p.currentX=p.maxX-1+(p.currentX-p.maxX+1)**.8),p.currentY<p.minY&&(p.currentY=p.minY+1-(p.minY-p.currentY+1)**.8),p.currentY>p.maxY&&(p.currentY=p.maxY-1+(p.currentY-p.maxY+1)**.8),f.prevPositionX||(f.prevPositionX=p.touchesCurrent.x),f.prevPositionY||(f.prevPositionY=p.touchesCurrent.y),f.prevTime||(f.prevTime=Date.now()),f.x=(p.touchesCurrent.x-f.prevPositionX)/(Date.now()-f.prevTime)/2,f.y=(p.touchesCurrent.y-f.prevPositionY)/(Date.now()-f.prevTime)/2,Math.abs(p.touchesCurrent.x-f.prevPositionX)<2&&(f.x=0),Math.abs(p.touchesCurrent.y-f.prevPositionY)<2&&(f.y=0),f.prevPositionX=p.touchesCurrent.x,f.prevPositionY=p.touchesCurrent.y,f.prevTime=Date.now(),d.imageWrapEl.style.transform=`translate3d(${p.currentX}px, ${p.currentY}px,0)`}function k(){const e=t.zoom;d.slideEl&&t.activeIndex!==t.slides.indexOf(d.slideEl)&&(d.imageEl&&(d.imageEl.style.transform="translate3d(0,0,0) scale(1)"),d.imageWrapEl&&(d.imageWrapEl.style.transform="translate3d(0,0,0)"),d.slideEl.classList.remove(`${t.params.zoom.zoomedSlideClass}`),e.scale=1,o=1,d.slideEl=void 0,d.imageEl=void 0,d.imageWrapEl=void 0,d.originX=0,d.originY=0)}function C(e){const r=t.zoom,n=t.params.zoom;if(!d.slideEl){e&&e.target&&(d.slideEl=e.target.closest(`.${t.params.slideClass}, swiper-slide`)),d.slideEl||(t.params.virtual&&t.params.virtual.enabled&&t.virtual?d.slideEl=Dr(t.slidesEl,`.${t.params.slideActiveClass}`)[0]:d.slideEl=t.slides[t.activeIndex]);let r=d.slideEl.querySelector(`.${n.containerClass}`);r&&(r=r.querySelectorAll("picture, img, svg, canvas, .swiper-zoom-target")[0]),d.imageEl=r,d.imageWrapEl=r?$r(d.imageEl,`.${n.containerClass}`)[0]:void 0}if(!d.imageEl||!d.imageWrapEl)return;let a,s,l,u,c,f,m,h,v,b,w,y,x,S,E,k,C,T;t.params.cssMode&&(t.wrapperEl.style.overflow="hidden",t.wrapperEl.style.touchAction="none"),d.slideEl.classList.add(`${n.zoomedSlideClass}`),void 0===p.touchesStart.x&&e?(a=e.pageX,s=e.pageY):(a=p.touchesStart.x,s=p.touchesStart.y);const M="number"==typeof e?e:null;1===o&&M&&(a=void 0,s=void 0);const P=g();r.scale=M||P,o=M||P,!e||1===o&&M?(m=0,h=0):(C=d.slideEl.offsetWidth,T=d.slideEl.offsetHeight,l=Ir(d.slideEl).left+i.scrollX,u=Ir(d.slideEl).top+i.scrollY,c=l+C/2-a,f=u+T/2-s,v=d.imageEl.offsetWidth||d.imageEl.clientWidth,b=d.imageEl.offsetHeight||d.imageEl.clientHeight,w=v*r.scale,y=b*r.scale,x=Math.min(C/2-w/2,0),S=Math.min(T/2-y/2,0),E=-x,k=-S,m=c*r.scale,h=f*r.scale,m<x&&(m=x),m>E&&(m=E),h<S&&(h=S),h>k&&(h=k)),M&&1===r.scale&&(d.originX=0,d.originY=0),d.imageWrapEl.style.transitionDuration="300ms",d.imageWrapEl.style.transform=`translate3d(${m}px, ${h}px,0)`,d.imageEl.style.transitionDuration="300ms",d.imageEl.style.transform=`translate3d(0,0,0) scale(${r.scale})`}function T(){const e=t.zoom,r=t.params.zoom;if(!d.slideEl){t.params.virtual&&t.params.virtual.enabled&&t.virtual?d.slideEl=Dr(t.slidesEl,`.${t.params.slideActiveClass}`)[0]:d.slideEl=t.slides[t.activeIndex];let e=d.slideEl.querySelector(`.${r.containerClass}`);e&&(e=e.querySelectorAll("picture, img, svg, canvas, .swiper-zoom-target")[0]),d.imageEl=e,d.imageWrapEl=e?$r(d.imageEl,`.${r.containerClass}`)[0]:void 0}d.imageEl&&d.imageWrapEl&&(t.params.cssMode&&(t.wrapperEl.style.overflow="",t.wrapperEl.style.touchAction=""),e.scale=1,o=1,d.imageWrapEl.style.transitionDuration="300ms",d.imageWrapEl.style.transform="translate3d(0,0,0)",d.imageEl.style.transitionDuration="300ms",d.imageEl.style.transform="translate3d(0,0,0) scale(1)",d.slideEl.classList.remove(`${r.zoomedSlideClass}`),d.slideEl=void 0,d.originX=0,d.originY=0)}function M(e){const r=t.zoom;r.scale&&1!==r.scale?T():C(e)}function P(){return{passiveListener:!!t.params.passiveListeners&&{passive:!0,capture:!1},activeListenerWithCapture:!t.params.passiveListeners||{passive:!1,capture:!0}}}function L(){const e=t.zoom;if(e.enabled)return;e.enabled=!0;const{passiveListener:r,activeListenerWithCapture:n}=P();t.wrapperEl.addEventListener("pointerdown",w,r),t.wrapperEl.addEventListener("pointermove",y,n),["pointerup","pointercancel","pointerout"].forEach((e=>{t.wrapperEl.addEventListener(e,x,r)})),t.wrapperEl.addEventListener("pointermove",E,n)}function z(){const e=t.zoom;if(!e.enabled)return;e.enabled=!1;const{passiveListener:r,activeListenerWithCapture:n}=P();t.wrapperEl.removeEventListener("pointerdown",w,r),t.wrapperEl.removeEventListener("pointermove",y,n),["pointerup","pointercancel","pointerout"].forEach((e=>{t.wrapperEl.removeEventListener(e,x,r)})),t.wrapperEl.removeEventListener("pointermove",E,n)}Object.defineProperty(t.zoom,"scale",{get:()=>h,set(e){if(h!==e){const t=d.imageEl,r=d.slideEl;a("zoomChange",e,t,r)}h=e}}),n("init",(()=>{t.params.zoom.enabled&&L()})),n("destroy",(()=>{z()})),n("touchStart",((e,r)=>{t.zoom.enabled&&function(e){const r=t.device;if(!d.imageEl)return;if(p.isTouched)return;r.android&&e.cancelable&&e.preventDefault(),p.isTouched=!0;const n=c.length>0?c[0]:e;p.touchesStart.x=n.pageX,p.touchesStart.y=n.pageY}(r)})),n("touchEnd",((e,r)=>{t.zoom.enabled&&function(){const e=t.zoom;if(!d.imageEl)return;if(!p.isTouched||!p.isMoved)return p.isTouched=!1,void(p.isMoved=!1);p.isTouched=!1,p.isMoved=!1;let r=300,n=300;const a=f.x*r,i=p.currentX+a,s=f.y*n,l=p.currentY+s;0!==f.x&&(r=Math.abs((i-p.currentX)/f.x)),0!==f.y&&(n=Math.abs((l-p.currentY)/f.y));const o=Math.max(r,n);p.currentX=i,p.currentY=l;const u=p.width*e.scale,c=p.height*e.scale;p.minX=Math.min(d.slideWidth/2-u/2,0),p.maxX=-p.minX,p.minY=Math.min(d.slideHeight/2-c/2,0),p.maxY=-p.minY,p.currentX=Math.max(Math.min(p.currentX,p.maxX),p.minX),p.currentY=Math.max(Math.min(p.currentY,p.maxY),p.minY),d.imageWrapEl.style.transitionDuration=`${o}ms`,d.imageWrapEl.style.transform=`translate3d(${p.currentX}px, ${p.currentY}px,0)`}()})),n("doubleTap",((e,r)=>{!t.animating&&t.params.zoom.enabled&&t.zoom.enabled&&t.params.zoom.toggle&&M(r)})),n("transitionEnd",(()=>{t.zoom.enabled&&t.params.zoom.enabled&&k()})),n("slideChange",(()=>{t.zoom.enabled&&t.params.zoom.enabled&&t.params.cssMode&&k()})),Object.assign(t.zoom,{enable:L,disable:z,in:C,out:T,toggle:M})},function(e){let{swiper:t,extendParams:r,on:n}=e;function a(e,t){const r=function(){let e,t,r;return(n,a)=>{for(t=-1,e=n.length;e-t>1;)r=e+t>>1,n[r]<=a?t=r:e=r;return e}}();let n,a;return this.x=e,this.y=t,this.lastIndex=e.length-1,this.interpolate=function(e){return e?(a=r(this.x,e),n=a-1,(e-this.x[n])*(this.y[a]-this.y[n])/(this.x[a]-this.x[n])+this.y[n]):0},this}function i(){t.controller.control&&t.controller.spline&&(t.controller.spline=void 0,delete t.controller.spline)}r({controller:{control:void 0,inverse:!1,by:"slide"}}),t.controller={control:void 0},n("beforeInit",(()=>{if("undefined"!=typeof window&&("string"==typeof t.params.controller.control||t.params.controller.control instanceof HTMLElement)){const e=document.querySelector(t.params.controller.control);if(e&&e.swiper)t.controller.control=e.swiper;else if(e){const r=n=>{t.controller.control=n.detail[0],t.update(),e.removeEventListener("init",r)};e.addEventListener("init",r)}}else t.controller.control=t.params.controller.control})),n("update",(()=>{i()})),n("resize",(()=>{i()})),n("observerUpdate",(()=>{i()})),n("setTranslate",((e,r,n)=>{t.controller.control&&!t.controller.control.destroyed&&t.controller.setTranslate(r,n)})),n("setTransition",((e,r,n)=>{t.controller.control&&!t.controller.control.destroyed&&t.controller.setTransition(r,n)})),Object.assign(t.controller,{setTranslate:function(e,r){const n=t.controller.control;let i,s;const l=t.constructor;function o(e){if(e.destroyed)return;const r=t.rtlTranslate?-t.translate:t.translate;"slide"===t.params.controller.by&&(function(e){t.controller.spline=t.params.loop?new a(t.slidesGrid,e.slidesGrid):new a(t.snapGrid,e.snapGrid)}(e),s=-t.controller.spline.interpolate(-r)),s&&"container"!==t.params.controller.by||(i=(e.maxTranslate()-e.minTranslate())/(t.maxTranslate()-t.minTranslate()),!Number.isNaN(i)&&Number.isFinite(i)||(i=1),s=(r-t.minTranslate())*i+e.minTranslate()),t.params.controller.inverse&&(s=e.maxTranslate()-s),e.updateProgress(s),e.setTranslate(s,t),e.updateActiveIndex(),e.updateSlidesClasses()}if(Array.isArray(n))for(let e=0;e<n.length;e+=1)n[e]!==r&&n[e]instanceof l&&o(n[e]);else n instanceof l&&r!==n&&o(n)},setTransition:function(e,r){const n=t.constructor,a=t.controller.control;let i;function s(r){r.destroyed||(r.setTransition(e,t),0!==e&&(r.transitionStart(),r.params.autoHeight&&Cr((()=>{r.updateAutoHeight()})),qr(r.wrapperEl,(()=>{a&&r.transitionEnd()}))))}if(Array.isArray(a))for(i=0;i<a.length;i+=1)a[i]!==r&&a[i]instanceof n&&s(a[i]);else a instanceof n&&r!==a&&s(a)}})},function(e){let{swiper:t,extendParams:r,on:n}=e;r({a11y:{enabled:!0,notificationClass:"swiper-notification",prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}",slideLabelMessage:"{{index}} / {{slidesLength}}",containerMessage:null,containerRoleDescriptionMessage:null,itemRoleDescriptionMessage:null,slideRole:"group",id:null}}),t.a11y={clicked:!1};let a,i,s=null,l=(new Date).getTime();function o(e){const t=s;0!==t.length&&(t.innerHTML="",t.innerHTML=e)}function u(e){(e=Br(e)).forEach((e=>{e.setAttribute("tabIndex","0")}))}function c(e){(e=Br(e)).forEach((e=>{e.setAttribute("tabIndex","-1")}))}function d(e,t){(e=Br(e)).forEach((e=>{e.setAttribute("role",t)}))}function p(e,t){(e=Br(e)).forEach((e=>{e.setAttribute("aria-roledescription",t)}))}function f(e,t){(e=Br(e)).forEach((e=>{e.setAttribute("aria-label",t)}))}function m(e){(e=Br(e)).forEach((e=>{e.setAttribute("aria-disabled",!0)}))}function h(e){(e=Br(e)).forEach((e=>{e.setAttribute("aria-disabled",!1)}))}function v(e){if(13!==e.keyCode&&32!==e.keyCode)return;const r=t.params.a11y,n=e.target;if(!t.pagination||!t.pagination.el||n!==t.pagination.el&&!t.pagination.el.contains(e.target)||e.target.matches(Sn(t.params.pagination.bulletClass))){if(t.navigation&&t.navigation.prevEl&&t.navigation.nextEl){const e=Br(t.navigation.prevEl);Br(t.navigation.nextEl).includes(n)&&(t.isEnd&&!t.params.loop||t.slideNext(),t.isEnd?o(r.lastSlideMessage):o(r.nextSlideMessage)),e.includes(n)&&(t.isBeginning&&!t.params.loop||t.slidePrev(),t.isBeginning?o(r.firstSlideMessage):o(r.prevSlideMessage))}t.pagination&&n.matches(Sn(t.params.pagination.bulletClass))&&n.click()}}function g(){return t.pagination&&t.pagination.bullets&&t.pagination.bullets.length}function b(){return g()&&t.params.pagination.clickable}const w=(e,t,r)=>{u(e),"BUTTON"!==e.tagName&&(d(e,"button"),e.addEventListener("keydown",v)),f(e,r),function(e,t){(e=Br(e)).forEach((e=>{e.setAttribute("aria-controls",t)}))}(e,t)},y=e=>{i&&i!==e.target&&!i.contains(e.target)&&(a=!0),t.a11y.clicked=!0},x=()=>{a=!1,requestAnimationFrame((()=>{requestAnimationFrame((()=>{t.destroyed||(t.a11y.clicked=!1)}))}))},S=e=>{l=(new Date).getTime()},E=e=>{if(t.a11y.clicked)return;if((new Date).getTime()-l<100)return;const r=e.target.closest(`.${t.params.slideClass}, swiper-slide`);if(!r||!t.slides.includes(r))return;i=r;const n=t.slides.indexOf(r)===t.activeIndex,s=t.params.watchSlidesProgress&&t.visibleSlides&&t.visibleSlides.includes(r);n||s||e.sourceCapabilities&&e.sourceCapabilities.firesTouchEvents||(t.isHorizontal()?t.el.scrollLeft=0:t.el.scrollTop=0,requestAnimationFrame((()=>{a||(t.slideTo(t.slides.indexOf(r),0),a=!1)})))},k=()=>{const e=t.params.a11y;e.itemRoleDescriptionMessage&&p(t.slides,e.itemRoleDescriptionMessage),e.slideRole&&d(t.slides,e.slideRole);const r=t.slides.length;e.slideLabelMessage&&t.slides.forEach(((n,a)=>{const i=t.params.loop?parseInt(n.getAttribute("data-swiper-slide-index"),10):a;f(n,e.slideLabelMessage.replace(/\{\{index\}\}/,i+1).replace(/\{\{slidesLength\}\}/,r))}))};n("beforeInit",(()=>{s=Ar("span",t.params.a11y.notificationClass),s.setAttribute("aria-live","assertive"),s.setAttribute("aria-atomic","true")})),n("afterInit",(()=>{t.params.a11y.enabled&&(()=>{const e=t.params.a11y;t.el.append(s);const r=t.el;e.containerRoleDescriptionMessage&&p(r,e.containerRoleDescriptionMessage),e.containerMessage&&f(r,e.containerMessage);const n=t.wrapperEl,a=e.id||n.getAttribute("id")||`swiper-wrapper-${i=16,void 0===i&&(i=16),"x".repeat(i).replace(/x/g,(()=>Math.round(16*Math.random()).toString(16)))}`;var i;const l=t.params.autoplay&&t.params.autoplay.enabled?"off":"polite";var o;o=a,Br(n).forEach((e=>{e.setAttribute("id",o)})),function(e,t){(e=Br(e)).forEach((e=>{e.setAttribute("aria-live",t)}))}(n,l),k();let{nextEl:u,prevEl:c}=t.navigation?t.navigation:{};u=Br(u),c=Br(c),u&&u.forEach((t=>w(t,a,e.nextSlideMessage))),c&&c.forEach((t=>w(t,a,e.prevSlideMessage))),b()&&Br(t.pagination.el).forEach((e=>{e.addEventListener("keydown",v)})),xr().addEventListener("visibilitychange",S),t.el.addEventListener("focus",E,!0),t.el.addEventListener("focus",E,!0),t.el.addEventListener("pointerdown",y,!0),t.el.addEventListener("pointerup",x,!0)})()})),n("slidesLengthChange snapGridLengthChange slidesGridLengthChange",(()=>{t.params.a11y.enabled&&k()})),n("fromEdge toEdge afterInit lock unlock",(()=>{t.params.a11y.enabled&&function(){if(t.params.loop||t.params.rewind||!t.navigation)return;const{nextEl:e,prevEl:r}=t.navigation;r&&(t.isBeginning?(m(r),c(r)):(h(r),u(r))),e&&(t.isEnd?(m(e),c(e)):(h(e),u(e)))}()})),n("paginationUpdate",(()=>{t.params.a11y.enabled&&function(){const e=t.params.a11y;g()&&t.pagination.bullets.forEach((r=>{t.params.pagination.clickable&&(u(r),t.params.pagination.renderBullet||(d(r,"button"),f(r,e.paginationBulletMessage.replace(/\{\{index\}\}/,jr(r)+1)))),r.matches(Sn(t.params.pagination.bulletActiveClass))?r.setAttribute("aria-current","true"):r.removeAttribute("aria-current")}))}()})),n("destroy",(()=>{t.params.a11y.enabled&&function(){s&&s.remove();let{nextEl:e,prevEl:r}=t.navigation?t.navigation:{};e=Br(e),r=Br(r),e&&e.forEach((e=>e.removeEventListener("keydown",v))),r&&r.forEach((e=>e.removeEventListener("keydown",v))),b()&&Br(t.pagination.el).forEach((e=>{e.removeEventListener("keydown",v)})),xr().removeEventListener("visibilitychange",S),t.el.removeEventListener("focus",E,!0),t.el.removeEventListener("pointerdown",y,!0),t.el.removeEventListener("pointerup",x,!0)}()}))},function(e){let{swiper:t,extendParams:r,on:n}=e;r({history:{enabled:!1,root:"",replaceState:!1,key:"slides",keepQuery:!1}});let a=!1,i={};const s=e=>e.toString().replace(/\s+/g,"-").replace(/[^\w-]+/g,"").replace(/--+/g,"-").replace(/^-+/,"").replace(/-+$/,""),l=e=>{const t=Er();let r;r=e?new URL(e):t.location;const n=r.pathname.slice(1).split("/").filter((e=>""!==e)),a=n.length;return{key:n[a-2],value:n[a-1]}},o=(e,r)=>{const n=Er();if(!a||!t.params.history.enabled)return;let i;i=t.params.url?new URL(t.params.url):n.location;const l=t.virtual&&t.params.virtual.enabled?t.slidesEl.querySelector(`[data-swiper-slide-index="${r}"]`):t.slides[r];let o=s(l.getAttribute("data-history"));if(t.params.history.root.length>0){let r=t.params.history.root;"/"===r[r.length-1]&&(r=r.slice(0,r.length-1)),o=`${r}/${e?`${e}/`:""}${o}`}else i.pathname.includes(e)||(o=`${e?`${e}/`:""}${o}`);t.params.history.keepQuery&&(o+=i.search);const u=n.history.state;u&&u.value===o||(t.params.history.replaceState?n.history.replaceState({value:o},null,o):n.history.pushState({value:o},null,o))},u=(e,r,n)=>{if(r)for(let a=0,i=t.slides.length;a<i;a+=1){const i=t.slides[a];if(s(i.getAttribute("data-history"))===r){const r=t.getSlideIndex(i);t.slideTo(r,e,n)}}else t.slideTo(0,e,n)},c=()=>{i=l(t.params.url),u(t.params.speed,i.value,!1)};n("init",(()=>{t.params.history.enabled&&(()=>{const e=Er();if(t.params.history){if(!e.history||!e.history.pushState)return t.params.history.enabled=!1,void(t.params.hashNavigation.enabled=!0);a=!0,i=l(t.params.url),i.key||i.value?(u(0,i.value,t.params.runCallbacksOnInit),t.params.history.replaceState||e.addEventListener("popstate",c)):t.params.history.replaceState||e.addEventListener("popstate",c)}})()})),n("destroy",(()=>{t.params.history.enabled&&(()=>{const e=Er();t.params.history.replaceState||e.removeEventListener("popstate",c)})()})),n("transitionEnd _freeModeNoMomentumRelease",(()=>{a&&o(t.params.history.key,t.activeIndex)})),n("slideChange",(()=>{a&&t.params.cssMode&&o(t.params.history.key,t.activeIndex)}))},function(e){let{swiper:t,extendParams:r,emit:n,on:a}=e,i=!1;const s=xr(),l=Er();r({hashNavigation:{enabled:!1,replaceState:!1,watchState:!1,getSlideIndex(e,r){if(t.virtual&&t.params.virtual.enabled){const e=t.slides.filter((e=>e.getAttribute("data-hash")===r))[0];return e?parseInt(e.getAttribute("data-swiper-slide-index"),10):0}return t.getSlideIndex(Dr(t.slidesEl,`.${t.params.slideClass}[data-hash="${r}"], swiper-slide[data-hash="${r}"]`)[0])}}});const o=()=>{n("hashChange");const e=s.location.hash.replace("#",""),r=t.virtual&&t.params.virtual.enabled?t.slidesEl.querySelector(`[data-swiper-slide-index="${t.activeIndex}"]`):t.slides[t.activeIndex];if(e!==(r?r.getAttribute("data-hash"):"")){const r=t.params.hashNavigation.getSlideIndex(t,e);if(void 0===r||Number.isNaN(r))return;t.slideTo(r)}},u=()=>{if(!i||!t.params.hashNavigation.enabled)return;const e=t.virtual&&t.params.virtual.enabled?t.slidesEl.querySelector(`[data-swiper-slide-index="${t.activeIndex}"]`):t.slides[t.activeIndex],r=e?e.getAttribute("data-hash")||e.getAttribute("data-history"):"";t.params.hashNavigation.replaceState&&l.history&&l.history.replaceState?(l.history.replaceState(null,null,`#${r}`||""),n("hashSet")):(s.location.hash=r||"",n("hashSet"))};a("init",(()=>{t.params.hashNavigation.enabled&&(()=>{if(!t.params.hashNavigation.enabled||t.params.history&&t.params.history.enabled)return;i=!0;const e=s.location.hash.replace("#","");if(e){const r=0,n=t.params.hashNavigation.getSlideIndex(t,e);t.slideTo(n||0,r,t.params.runCallbacksOnInit,!0)}t.params.hashNavigation.watchState&&l.addEventListener("hashchange",o)})()})),a("destroy",(()=>{t.params.hashNavigation.enabled&&t.params.hashNavigation.watchState&&l.removeEventListener("hashchange",o)})),a("transitionEnd _freeModeNoMomentumRelease",(()=>{i&&u()})),a("slideChange",(()=>{i&&t.params.cssMode&&u()}))},function(e){let t,r,{swiper:n,extendParams:a,on:i,emit:s,params:l}=e;n.autoplay={running:!1,paused:!1,timeLeft:0},a({autoplay:{enabled:!1,delay:3e3,waitForTransition:!0,disableOnInteraction:!1,stopOnLastSlide:!1,reverseDirection:!1,pauseOnMouseEnter:!1}});let o,u,c,d,p,f,m,h,v=l&&l.autoplay?l.autoplay.delay:3e3,g=l&&l.autoplay?l.autoplay.delay:3e3,b=(new Date).getTime();function w(e){n&&!n.destroyed&&n.wrapperEl&&e.target===n.wrapperEl&&(n.wrapperEl.removeEventListener("transitionend",w),h||C())}const y=()=>{if(n.destroyed||!n.autoplay.running)return;n.autoplay.paused?u=!0:u&&(g=o,u=!1);const e=n.autoplay.paused?o:b+g-(new Date).getTime();n.autoplay.timeLeft=e,s("autoplayTimeLeft",e,e/v),r=requestAnimationFrame((()=>{y()}))},x=e=>{if(n.destroyed||!n.autoplay.running)return;cancelAnimationFrame(r),y();let a=void 0===e?n.params.autoplay.delay:e;v=n.params.autoplay.delay,g=n.params.autoplay.delay;const i=(()=>{let e;if(e=n.virtual&&n.params.virtual.enabled?n.slides.filter((e=>e.classList.contains("swiper-slide-active")))[0]:n.slides[n.activeIndex],e)return parseInt(e.getAttribute("data-swiper-autoplay"),10)})();!Number.isNaN(i)&&i>0&&void 0===e&&(a=i,v=i,g=i),o=a;const l=n.params.speed,u=()=>{n&&!n.destroyed&&(n.params.autoplay.reverseDirection?!n.isBeginning||n.params.loop||n.params.rewind?(n.slidePrev(l,!0,!0),s("autoplay")):n.params.autoplay.stopOnLastSlide||(n.slideTo(n.slides.length-1,l,!0,!0),s("autoplay")):!n.isEnd||n.params.loop||n.params.rewind?(n.slideNext(l,!0,!0),s("autoplay")):n.params.autoplay.stopOnLastSlide||(n.slideTo(0,l,!0,!0),s("autoplay")),n.params.cssMode&&(b=(new Date).getTime(),requestAnimationFrame((()=>{x()}))))};return a>0?(clearTimeout(t),t=setTimeout((()=>{u()}),a)):requestAnimationFrame((()=>{u()})),a},S=()=>{b=(new Date).getTime(),n.autoplay.running=!0,x(),s("autoplayStart")},E=()=>{n.autoplay.running=!1,clearTimeout(t),cancelAnimationFrame(r),s("autoplayStop")},k=(e,r)=>{if(n.destroyed||!n.autoplay.running)return;clearTimeout(t),e||(m=!0);const a=()=>{s("autoplayPause"),n.params.autoplay.waitForTransition?n.wrapperEl.addEventListener("transitionend",w):C()};if(n.autoplay.paused=!0,r)return f&&(o=n.params.autoplay.delay),f=!1,void a();const i=o||n.params.autoplay.delay;o=i-((new Date).getTime()-b),n.isEnd&&o<0&&!n.params.loop||(o<0&&(o=0),a())},C=()=>{n.isEnd&&o<0&&!n.params.loop||n.destroyed||!n.autoplay.running||(b=(new Date).getTime(),m?(m=!1,x(o)):x(),n.autoplay.paused=!1,s("autoplayResume"))},T=()=>{if(n.destroyed||!n.autoplay.running)return;const e=xr();"hidden"===e.visibilityState&&(m=!0,k(!0)),"visible"===e.visibilityState&&C()},M=e=>{"mouse"===e.pointerType&&(m=!0,h=!0,n.animating||n.autoplay.paused||k(!0))},P=e=>{"mouse"===e.pointerType&&(h=!1,n.autoplay.paused&&C())};i("init",(()=>{n.params.autoplay.enabled&&(n.params.autoplay.pauseOnMouseEnter&&(n.el.addEventListener("pointerenter",M),n.el.addEventListener("pointerleave",P)),xr().addEventListener("visibilitychange",T),S())})),i("destroy",(()=>{n.el.removeEventListener("pointerenter",M),n.el.removeEventListener("pointerleave",P),xr().removeEventListener("visibilitychange",T),n.autoplay.running&&E()})),i("_freeModeStaticRelease",(()=>{(d||m)&&C()})),i("_freeModeNoMomentumRelease",(()=>{n.params.autoplay.disableOnInteraction?E():k(!0,!0)})),i("beforeTransitionStart",((e,t,r)=>{!n.destroyed&&n.autoplay.running&&(r||!n.params.autoplay.disableOnInteraction?k(!0,!0):E())})),i("sliderFirstMove",(()=>{!n.destroyed&&n.autoplay.running&&(n.params.autoplay.disableOnInteraction?E():(c=!0,d=!1,m=!1,p=setTimeout((()=>{m=!0,d=!0,k(!0)}),200)))})),i("touchEnd",(()=>{if(!n.destroyed&&n.autoplay.running&&c){if(clearTimeout(p),clearTimeout(t),n.params.autoplay.disableOnInteraction)return d=!1,void(c=!1);d&&n.params.cssMode&&C(),d=!1,c=!1}})),i("slideChange",(()=>{!n.destroyed&&n.autoplay.running&&(f=!0)})),Object.assign(n.autoplay,{start:S,stop:E,pause:k,resume:C})},function(e){let{swiper:t,extendParams:r,on:n}=e;r({thumbs:{swiper:null,multipleActiveThumbs:!0,autoScrollOffset:0,slideThumbActiveClass:"swiper-slide-thumb-active",thumbsContainerClass:"swiper-thumbs"}});let a=!1,i=!1;function s(){const e=t.thumbs.swiper;if(!e||e.destroyed)return;const r=e.clickedIndex,n=e.clickedSlide;if(n&&n.classList.contains(t.params.thumbs.slideThumbActiveClass))return;if(null==r)return;let a;a=e.params.loop?parseInt(e.clickedSlide.getAttribute("data-swiper-slide-index"),10):r,t.params.loop?t.slideToLoop(a):t.slideTo(a)}function l(){const{thumbs:e}=t.params;if(a)return!1;a=!0;const r=t.constructor;if(e.swiper instanceof r)t.thumbs.swiper=e.swiper,Object.assign(t.thumbs.swiper.originalParams,{watchSlidesProgress:!0,slideToClickedSlide:!1}),Object.assign(t.thumbs.swiper.params,{watchSlidesProgress:!0,slideToClickedSlide:!1}),t.thumbs.swiper.update();else if(Pr(e.swiper)){const n=Object.assign({},e.swiper);Object.assign(n,{watchSlidesProgress:!0,slideToClickedSlide:!1}),t.thumbs.swiper=new r(n),i=!0}return t.thumbs.swiper.el.classList.add(t.params.thumbs.thumbsContainerClass),t.thumbs.swiper.on("tap",s),!0}function o(e){const r=t.thumbs.swiper;if(!r||r.destroyed)return;const n="auto"===r.params.slidesPerView?r.slidesPerViewDynamic():r.params.slidesPerView;let a=1;const i=t.params.thumbs.slideThumbActiveClass;if(t.params.slidesPerView>1&&!t.params.centeredSlides&&(a=t.params.slidesPerView),t.params.thumbs.multipleActiveThumbs||(a=1),a=Math.floor(a),r.slides.forEach((e=>e.classList.remove(i))),r.params.loop||r.params.virtual&&r.params.virtual.enabled)for(let e=0;e<a;e+=1)Dr(r.slidesEl,`[data-swiper-slide-index="${t.realIndex+e}"]`).forEach((e=>{e.classList.add(i)}));else for(let e=0;e<a;e+=1)r.slides[t.realIndex+e]&&r.slides[t.realIndex+e].classList.add(i);const s=t.params.thumbs.autoScrollOffset,l=s&&!r.params.loop;if(t.realIndex!==r.realIndex||l){const a=r.activeIndex;let i,o;if(r.params.loop){const e=r.slides.filter((e=>e.getAttribute("data-swiper-slide-index")===`${t.realIndex}`))[0];i=r.slides.indexOf(e),o=t.activeIndex>t.previousIndex?"next":"prev"}else i=t.realIndex,o=i>t.previousIndex?"next":"prev";l&&(i+="next"===o?s:-1*s),r.visibleSlidesIndexes&&r.visibleSlidesIndexes.indexOf(i)<0&&(r.params.centeredSlides?i=i>a?i-Math.floor(n/2)+1:i+Math.floor(n/2)-1:i>a&&r.params.slidesPerGroup,r.slideTo(i,e?0:void 0))}}t.thumbs={swiper:null},n("beforeInit",(()=>{const{thumbs:e}=t.params;if(e&&e.swiper)if("string"==typeof e.swiper||e.swiper instanceof HTMLElement){const r=xr(),n=()=>{const n="string"==typeof e.swiper?r.querySelector(e.swiper):e.swiper;if(n&&n.swiper)e.swiper=n.swiper,l(),o(!0);else if(n){const r=a=>{e.swiper=a.detail[0],n.removeEventListener("init",r),l(),o(!0),e.swiper.update(),t.update()};n.addEventListener("init",r)}return n},a=()=>{t.destroyed||n()||requestAnimationFrame(a)};requestAnimationFrame(a)}else l(),o(!0)})),n("slideChange update resize observerUpdate",(()=>{o()})),n("setTransition",((e,r)=>{const n=t.thumbs.swiper;n&&!n.destroyed&&n.setTransition(r)})),n("beforeDestroy",(()=>{const e=t.thumbs.swiper;e&&!e.destroyed&&i&&e.destroy()})),Object.assign(t.thumbs,{init:l,update:o})},function(e){let{swiper:t,extendParams:r,emit:n,once:a}=e;r({freeMode:{enabled:!1,momentum:!0,momentumRatio:1,momentumBounce:!0,momentumBounceRatio:1,momentumVelocityRatio:1,sticky:!1,minimumVelocity:.02}}),Object.assign(t,{freeMode:{onTouchStart:function(){if(t.params.cssMode)return;const e=t.getTranslate();t.setTranslate(e),t.setTransition(0),t.touchEventsData.velocities.length=0,t.freeMode.onTouchEnd({currentPos:t.rtl?t.translate:-t.translate})},onTouchMove:function(){if(t.params.cssMode)return;const{touchEventsData:e,touches:r}=t;0===e.velocities.length&&e.velocities.push({position:r[t.isHorizontal()?"startX":"startY"],time:e.touchStartTime}),e.velocities.push({position:r[t.isHorizontal()?"currentX":"currentY"],time:Tr()})},onTouchEnd:function(e){let{currentPos:r}=e;if(t.params.cssMode)return;const{params:i,wrapperEl:s,rtlTranslate:l,snapGrid:o,touchEventsData:u}=t,c=Tr()-u.touchStartTime;if(r<-t.minTranslate())t.slideTo(t.activeIndex);else if(r>-t.maxTranslate())t.slides.length<o.length?t.slideTo(o.length-1):t.slideTo(t.slides.length-1);else{if(i.freeMode.momentum){if(u.velocities.length>1){const e=u.velocities.pop(),r=u.velocities.pop(),n=e.position-r.position,a=e.time-r.time;t.velocity=n/a,t.velocity/=2,Math.abs(t.velocity)<i.freeMode.minimumVelocity&&(t.velocity=0),(a>150||Tr()-e.time>300)&&(t.velocity=0)}else t.velocity=0;t.velocity*=i.freeMode.momentumVelocityRatio,u.velocities.length=0;let e=1e3*i.freeMode.momentumRatio;const r=t.velocity*e;let c=t.translate+r;l&&(c=-c);let d,p=!1;const f=20*Math.abs(t.velocity)*i.freeMode.momentumBounceRatio;let m;if(c<t.maxTranslate())i.freeMode.momentumBounce?(c+t.maxTranslate()<-f&&(c=t.maxTranslate()-f),d=t.maxTranslate(),p=!0,u.allowMomentumBounce=!0):c=t.maxTranslate(),i.loop&&i.centeredSlides&&(m=!0);else if(c>t.minTranslate())i.freeMode.momentumBounce?(c-t.minTranslate()>f&&(c=t.minTranslate()+f),d=t.minTranslate(),p=!0,u.allowMomentumBounce=!0):c=t.minTranslate(),i.loop&&i.centeredSlides&&(m=!0);else if(i.freeMode.sticky){let e;for(let t=0;t<o.length;t+=1)if(o[t]>-c){e=t;break}c=Math.abs(o[e]-c)<Math.abs(o[e-1]-c)||"next"===t.swipeDirection?o[e]:o[e-1],c=-c}if(m&&a("transitionEnd",(()=>{t.loopFix()})),0!==t.velocity){if(e=l?Math.abs((-c-t.translate)/t.velocity):Math.abs((c-t.translate)/t.velocity),i.freeMode.sticky){const r=Math.abs((l?-c:c)-t.translate),n=t.slidesSizesGrid[t.activeIndex];e=r<n?i.speed:r<2*n?1.5*i.speed:2.5*i.speed}}else if(i.freeMode.sticky)return void t.slideToClosest();i.freeMode.momentumBounce&&p?(t.updateProgress(d),t.setTransition(e),t.setTranslate(c),t.transitionStart(!0,t.swipeDirection),t.animating=!0,qr(s,(()=>{t&&!t.destroyed&&u.allowMomentumBounce&&(n("momentumBounce"),t.setTransition(i.speed),setTimeout((()=>{t.setTranslate(d),qr(s,(()=>{t&&!t.destroyed&&t.transitionEnd()}))}),0))}))):t.velocity?(n("_freeModeNoMomentumRelease"),t.updateProgress(c),t.setTransition(e),t.setTranslate(c),t.transitionStart(!0,t.swipeDirection),t.animating||(t.animating=!0,qr(s,(()=>{t&&!t.destroyed&&t.transitionEnd()})))):t.updateProgress(c),t.updateActiveIndex(),t.updateSlidesClasses()}else{if(i.freeMode.sticky)return void t.slideToClosest();i.freeMode&&n("_freeModeNoMomentumRelease")}(!i.freeMode.momentum||c>=i.longSwipesMs)&&(n("_freeModeStaticRelease"),t.updateProgress(),t.updateActiveIndex(),t.updateSlidesClasses())}}}})},function(e){let t,r,n,a,{swiper:i,extendParams:s,on:l}=e;s({grid:{rows:1,fill:"column"}});const o=()=>{let e=i.params.spaceBetween;return"string"==typeof e&&e.indexOf("%")>=0?e=parseFloat(e.replace("%",""))/100*i.size:"string"==typeof e&&(e=parseFloat(e)),e};l("init",(()=>{a=i.params.grid&&i.params.grid.rows>1})),l("update",(()=>{const{params:e,el:t}=i,r=e.grid&&e.grid.rows>1;a&&!r?(t.classList.remove(`${e.containerModifierClass}grid`,`${e.containerModifierClass}grid-column`),n=1,i.emitContainerClasses()):!a&&r&&(t.classList.add(`${e.containerModifierClass}grid`),"column"===e.grid.fill&&t.classList.add(`${e.containerModifierClass}grid-column`),i.emitContainerClasses()),a=r})),i.grid={initSlides:e=>{const{slidesPerView:a}=i.params,{rows:s,fill:l}=i.params.grid,o=i.virtual&&i.params.virtual.enabled?i.virtual.slides.length:e.length;n=Math.floor(o/s),t=Math.floor(o/s)===o/s?o:Math.ceil(o/s)*s,"auto"!==a&&"row"===l&&(t=Math.max(t,a*s)),r=t/s},unsetSlides:()=>{i.slides&&i.slides.forEach((e=>{e.swiperSlideGridSet&&(e.style.height="",e.style[i.getDirectionLabel("margin-top")]="")}))},updateSlide:(e,a,s)=>{const{slidesPerGroup:l}=i.params,u=o(),{rows:c,fill:d}=i.params.grid,p=i.virtual&&i.params.virtual.enabled?i.virtual.slides.length:s.length;let f,m,h;if("row"===d&&l>1){const r=Math.floor(e/(l*c)),n=e-c*l*r,i=0===r?l:Math.min(Math.ceil((p-r*c*l)/c),l);h=Math.floor(n/i),m=n-h*i+r*l,f=m+h*t/c,a.style.order=f}else"column"===d?(m=Math.floor(e/c),h=e-m*c,(m>n||m===n&&h===c-1)&&(h+=1,h>=c&&(h=0,m+=1))):(h=Math.floor(e/r),m=e-h*r);a.row=h,a.column=m,a.style.height=`calc((100% - ${(c-1)*u}px) / ${c})`,a.style[i.getDirectionLabel("margin-top")]=0!==h?u&&`${u}px`:"",a.swiperSlideGridSet=!0},updateWrapperSize:(e,r)=>{const{centeredSlides:n,roundLengths:a}=i.params,s=o(),{rows:l}=i.params.grid;if(i.virtualSize=(e+s)*t,i.virtualSize=Math.ceil(i.virtualSize/l)-s,i.params.cssMode||(i.wrapperEl.style[i.getDirectionLabel("width")]=`${i.virtualSize+s}px`),n){const e=[];for(let t=0;t<r.length;t+=1){let n=r[t];a&&(n=Math.floor(n)),r[t]<i.virtualSize+r[0]&&e.push(n)}r.splice(0,r.length),r.push(...e)}}}},function(e){let{swiper:t}=e;Object.assign(t,{appendSlide:En.bind(t),prependSlide:kn.bind(t),addSlide:Cn.bind(t),removeSlide:Tn.bind(t),removeAllSlides:Mn.bind(t)})},function(e){let{swiper:t,extendParams:r,on:n}=e;r({fadeEffect:{crossFade:!1}}),Pn({effect:"fade",swiper:t,on:n,setTranslate:()=>{const{slides:e}=t;t.params.fadeEffect;for(let r=0;r<e.length;r+=1){const e=t.slides[r];let n=-e.swiperSlideOffset;t.params.virtualTranslate||(n-=t.translate);let a=0;t.isHorizontal()||(a=n,n=0);const i=t.params.fadeEffect.crossFade?Math.max(1-Math.abs(e.progress),0):1+Math.min(Math.max(e.progress,-1),0),s=Ln(0,e);s.style.opacity=i,s.style.transform=`translate3d(${n}px, ${a}px, 0px)`}},setTransition:e=>{const r=t.slides.map((e=>Or(e)));r.forEach((t=>{t.style.transitionDuration=`${e}ms`})),zn({swiper:t,duration:e,transformElements:r,allSlides:!0})},overwriteParams:()=>({slidesPerView:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!t.params.cssMode})})},function(e){let{swiper:t,extendParams:r,on:n}=e;r({cubeEffect:{slideShadows:!0,shadow:!0,shadowOffset:20,shadowScale:.94}});const a=(e,t,r)=>{let n=r?e.querySelector(".swiper-slide-shadow-left"):e.querySelector(".swiper-slide-shadow-top"),a=r?e.querySelector(".swiper-slide-shadow-right"):e.querySelector(".swiper-slide-shadow-bottom");n||(n=Ar("div",("swiper-slide-shadow-cube swiper-slide-shadow-"+(r?"left":"top")).split(" ")),e.append(n)),a||(a=Ar("div",("swiper-slide-shadow-cube swiper-slide-shadow-"+(r?"right":"bottom")).split(" ")),e.append(a)),n&&(n.style.opacity=Math.max(-t,0)),a&&(a.style.opacity=Math.max(t,0))};Pn({effect:"cube",swiper:t,on:n,setTranslate:()=>{const{el:e,wrapperEl:r,slides:n,width:i,height:s,rtlTranslate:l,size:o,browser:u}=t,c=t.params.cubeEffect,d=t.isHorizontal(),p=t.virtual&&t.params.virtual.enabled;let f,m=0;c.shadow&&(d?(f=t.wrapperEl.querySelector(".swiper-cube-shadow"),f||(f=Ar("div","swiper-cube-shadow"),t.wrapperEl.append(f)),f.style.height=`${i}px`):(f=e.querySelector(".swiper-cube-shadow"),f||(f=Ar("div","swiper-cube-shadow"),e.append(f))));for(let e=0;e<n.length;e+=1){const r=n[e];let i=e;p&&(i=parseInt(r.getAttribute("data-swiper-slide-index"),10));let s=90*i,u=Math.floor(s/360);l&&(s=-s,u=Math.floor(-s/360));const f=Math.max(Math.min(r.progress,1),-1);let h=0,v=0,g=0;i%4==0?(h=4*-u*o,g=0):(i-1)%4==0?(h=0,g=4*-u*o):(i-2)%4==0?(h=o+4*u*o,g=o):(i-3)%4==0&&(h=-o,g=3*o+4*o*u),l&&(h=-h),d||(v=h,h=0);const b=`rotateX(${d?0:-s}deg) rotateY(${d?s:0}deg) translate3d(${h}px, ${v}px, ${g}px)`;f<=1&&f>-1&&(m=90*i+90*f,l&&(m=90*-i-90*f),t.browser&&t.browser.need3dFix&&Math.abs(m)/90%2==1&&(m+=.001)),r.style.transform=b,c.slideShadows&&a(r,f,d)}if(r.style.transformOrigin=`50% 50% -${o/2}px`,r.style["-webkit-transform-origin"]=`50% 50% -${o/2}px`,c.shadow)if(d)f.style.transform=`translate3d(0px, ${i/2+c.shadowOffset}px, ${-i/2}px) rotateX(89.99deg) rotateZ(0deg) scale(${c.shadowScale})`;else{const e=Math.abs(m)-90*Math.floor(Math.abs(m)/90),t=1.5-(Math.sin(2*e*Math.PI/360)/2+Math.cos(2*e*Math.PI/360)/2),r=c.shadowScale,n=c.shadowScale/t,a=c.shadowOffset;f.style.transform=`scale3d(${r}, 1, ${n}) translate3d(0px, ${s/2+a}px, ${-s/2/n}px) rotateX(-89.99deg)`}const h=(u.isSafari||u.isWebView)&&u.needPerspectiveFix?-o/2:0;r.style.transform=`translate3d(0px,0,${h}px) rotateX(${t.isHorizontal()?0:m}deg) rotateY(${t.isHorizontal()?-m:0}deg)`,r.style.setProperty("--swiper-cube-translate-z",`${h}px`)},setTransition:e=>{const{el:r,slides:n}=t;if(n.forEach((t=>{t.style.transitionDuration=`${e}ms`,t.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach((t=>{t.style.transitionDuration=`${e}ms`}))})),t.params.cubeEffect.shadow&&!t.isHorizontal()){const t=r.querySelector(".swiper-cube-shadow");t&&(t.style.transitionDuration=`${e}ms`)}},recreateShadows:()=>{const e=t.isHorizontal();t.slides.forEach((t=>{const r=Math.max(Math.min(t.progress,1),-1);a(t,r,e)}))},getEffectParams:()=>t.params.cubeEffect,perspective:()=>!0,overwriteParams:()=>({slidesPerView:1,slidesPerGroup:1,watchSlidesProgress:!0,resistanceRatio:0,spaceBetween:0,centeredSlides:!1,virtualTranslate:!0})})},function(e){let{swiper:t,extendParams:r,on:n}=e;r({flipEffect:{slideShadows:!0,limitRotation:!0}});const a=(e,r)=>{let n=t.isHorizontal()?e.querySelector(".swiper-slide-shadow-left"):e.querySelector(".swiper-slide-shadow-top"),a=t.isHorizontal()?e.querySelector(".swiper-slide-shadow-right"):e.querySelector(".swiper-slide-shadow-bottom");n||(n=_n("flip",e,t.isHorizontal()?"left":"top")),a||(a=_n("flip",e,t.isHorizontal()?"right":"bottom")),n&&(n.style.opacity=Math.max(-r,0)),a&&(a.style.opacity=Math.max(r,0))};Pn({effect:"flip",swiper:t,on:n,setTranslate:()=>{const{slides:e,rtlTranslate:r}=t,n=t.params.flipEffect;for(let i=0;i<e.length;i+=1){const s=e[i];let l=s.progress;t.params.flipEffect.limitRotation&&(l=Math.max(Math.min(s.progress,1),-1));const o=s.swiperSlideOffset;let u=-180*l,c=0,d=t.params.cssMode?-o-t.translate:-o,p=0;t.isHorizontal()?r&&(u=-u):(p=d,d=0,c=-u,u=0),t.browser&&t.browser.need3dFix&&(Math.abs(u)/90%2==1&&(u+=.001),Math.abs(c)/90%2==1&&(c+=.001)),s.style.zIndex=-Math.abs(Math.round(l))+e.length,n.slideShadows&&a(s,l);const f=`translate3d(${d}px, ${p}px, 0px) rotateX(${c}deg) rotateY(${u}deg)`;Ln(0,s).style.transform=f}},setTransition:e=>{const r=t.slides.map((e=>Or(e)));r.forEach((t=>{t.style.transitionDuration=`${e}ms`,t.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach((t=>{t.style.transitionDuration=`${e}ms`}))})),zn({swiper:t,duration:e,transformElements:r})},recreateShadows:()=>{t.params.flipEffect,t.slides.forEach((e=>{let r=e.progress;t.params.flipEffect.limitRotation&&(r=Math.max(Math.min(e.progress,1),-1)),a(e,r)}))},getEffectParams:()=>t.params.flipEffect,perspective:()=>!0,overwriteParams:()=>({slidesPerView:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!t.params.cssMode})})},function(e){let{swiper:t,extendParams:r,on:n}=e;r({coverflowEffect:{rotate:50,stretch:0,depth:100,scale:1,modifier:1,slideShadows:!0}}),Pn({effect:"coverflow",swiper:t,on:n,setTranslate:()=>{const{width:e,height:r,slides:n,slidesSizesGrid:a}=t,i=t.params.coverflowEffect,s=t.isHorizontal(),l=t.translate,o=s?e/2-l:r/2-l,u=s?i.rotate:-i.rotate,c=i.depth;for(let e=0,r=n.length;e<r;e+=1){const r=n[e],l=a[e],d=(o-r.swiperSlideOffset-l/2)/l,p="function"==typeof i.modifier?i.modifier(d):d*i.modifier;let f=s?u*p:0,m=s?0:u*p,h=-c*Math.abs(p),v=i.stretch;"string"==typeof v&&-1!==v.indexOf("%")&&(v=parseFloat(i.stretch)/100*l);let g=s?0:v*p,b=s?v*p:0,w=1-(1-i.scale)*Math.abs(p);Math.abs(b)<.001&&(b=0),Math.abs(g)<.001&&(g=0),Math.abs(h)<.001&&(h=0),Math.abs(f)<.001&&(f=0),Math.abs(m)<.001&&(m=0),Math.abs(w)<.001&&(w=0),t.browser&&t.browser.need3dFix&&(Math.abs(f)/90%2==1&&(f+=.001),Math.abs(m)/90%2==1&&(m+=.001));const y=`translate3d(${b}px,${g}px,${h}px)  rotateX(${m}deg) rotateY(${f}deg) scale(${w})`;if(Ln(0,r).style.transform=y,r.style.zIndex=1-Math.abs(Math.round(p)),i.slideShadows){let e=s?r.querySelector(".swiper-slide-shadow-left"):r.querySelector(".swiper-slide-shadow-top"),t=s?r.querySelector(".swiper-slide-shadow-right"):r.querySelector(".swiper-slide-shadow-bottom");e||(e=_n("coverflow",r,s?"left":"top")),t||(t=_n("coverflow",r,s?"right":"bottom")),e&&(e.style.opacity=p>0?p:0),t&&(t.style.opacity=-p>0?-p:0)}}},setTransition:e=>{t.slides.map((e=>Or(e))).forEach((t=>{t.style.transitionDuration=`${e}ms`,t.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach((t=>{t.style.transitionDuration=`${e}ms`}))}))},perspective:()=>!0,overwriteParams:()=>({watchSlidesProgress:!0})})},function(e){let{swiper:t,extendParams:r,on:n}=e;r({creativeEffect:{limitProgress:1,shadowPerProgress:!1,progressMultiplier:1,perspective:!0,prev:{translate:[0,0,0],rotate:[0,0,0],opacity:1,scale:1},next:{translate:[0,0,0],rotate:[0,0,0],opacity:1,scale:1}}});const a=e=>"string"==typeof e?e:`${e}px`;Pn({effect:"creative",swiper:t,on:n,setTranslate:()=>{const{slides:e,wrapperEl:r,slidesSizesGrid:n}=t,i=t.params.creativeEffect,{progressMultiplier:s}=i,l=t.params.centeredSlides;if(l){const e=n[0]/2-t.params.slidesOffsetBefore||0;r.style.transform=`translateX(calc(50% - ${e}px))`}for(let r=0;r<e.length;r+=1){const n=e[r],o=n.progress,u=Math.min(Math.max(n.progress,-i.limitProgress),i.limitProgress);let c=u;l||(c=Math.min(Math.max(n.originalProgress,-i.limitProgress),i.limitProgress));const d=n.swiperSlideOffset,p=[t.params.cssMode?-d-t.translate:-d,0,0],f=[0,0,0];let m=!1;t.isHorizontal()||(p[1]=p[0],p[0]=0);let h={translate:[0,0,0],rotate:[0,0,0],scale:1,opacity:1};u<0?(h=i.next,m=!0):u>0&&(h=i.prev,m=!0),p.forEach(((e,t)=>{p[t]=`calc(${e}px + (${a(h.translate[t])} * ${Math.abs(u*s)}))`})),f.forEach(((e,r)=>{let n=h.rotate[r]*Math.abs(u*s);t.browser&&t.browser.need3dFix&&Math.abs(n)/90%2==1&&(n+=.001),f[r]=n})),n.style.zIndex=-Math.abs(Math.round(o))+e.length;const v=p.join(", "),g=`rotateX(${f[0]}deg) rotateY(${f[1]}deg) rotateZ(${f[2]}deg)`,b=c<0?`scale(${1+(1-h.scale)*c*s})`:`scale(${1-(1-h.scale)*c*s})`,w=c<0?1+(1-h.opacity)*c*s:1-(1-h.opacity)*c*s,y=`translate3d(${v}) ${g} ${b}`;if(m&&h.shadow||!m){let e=n.querySelector(".swiper-slide-shadow");if(!e&&h.shadow&&(e=_n("creative",n)),e){const t=i.shadowPerProgress?u*(1/i.limitProgress):u;e.style.opacity=Math.min(Math.max(Math.abs(t),0),1)}}const x=Ln(0,n);x.style.transform=y,x.style.opacity=w,h.origin&&(x.style.transformOrigin=h.origin)}},setTransition:e=>{const r=t.slides.map((e=>Or(e)));r.forEach((t=>{t.style.transitionDuration=`${e}ms`,t.querySelectorAll(".swiper-slide-shadow").forEach((t=>{t.style.transitionDuration=`${e}ms`}))})),zn({swiper:t,duration:e,transformElements:r,allSlides:!0})},perspective:()=>t.params.creativeEffect.perspective,overwriteParams:()=>({watchSlidesProgress:!0,virtualTranslate:!t.params.cssMode})})},function(e){let{swiper:t,extendParams:r,on:n}=e;r({cardsEffect:{slideShadows:!0,rotate:!0,perSlideRotate:2,perSlideOffset:8}}),Pn({effect:"cards",swiper:t,on:n,setTranslate:()=>{const{slides:e,activeIndex:r,rtlTranslate:n}=t,a=t.params.cardsEffect,{startTranslate:i,isTouched:s}=t.touchEventsData,l=n?-t.translate:t.translate;for(let o=0;o<e.length;o+=1){const u=e[o],c=u.progress,d=Math.min(Math.max(c,-4),4);let p=u.swiperSlideOffset;t.params.centeredSlides&&!t.params.cssMode&&(t.wrapperEl.style.transform=`translateX(${t.minTranslate()}px)`),t.params.centeredSlides&&t.params.cssMode&&(p-=e[0].swiperSlideOffset);let f=t.params.cssMode?-p-t.translate:-p,m=0;const h=-100*Math.abs(d);let v=1,g=-a.perSlideRotate*d,b=a.perSlideOffset-.75*Math.abs(d);const w=t.virtual&&t.params.virtual.enabled?t.virtual.from+o:o,y=(w===r||w===r-1)&&d>0&&d<1&&(s||t.params.cssMode)&&l<i,x=(w===r||w===r+1)&&d<0&&d>-1&&(s||t.params.cssMode)&&l>i;if(y||x){const e=(1-Math.abs((Math.abs(d)-.5)/.5))**.5;g+=-28*d*e,v+=-.5*e,b+=96*e,m=-25*e*Math.abs(d)+"%"}if(f=d<0?`calc(${f}px ${n?"-":"+"} (${b*Math.abs(d)}%))`:d>0?`calc(${f}px ${n?"-":"+"} (-${b*Math.abs(d)}%))`:`${f}px`,!t.isHorizontal()){const e=m;m=f,f=e}const S=d<0?""+(1+(1-v)*d):""+(1-(1-v)*d),E=`\n        translate3d(${f}, ${m}, ${h}px)\n        rotateZ(${a.rotate?n?-g:g:0}deg)\n        scale(${S})\n      `;if(a.slideShadows){let e=u.querySelector(".swiper-slide-shadow");e||(e=_n("cards",u)),e&&(e.style.opacity=Math.min(Math.max((Math.abs(d)-.5)/.5,0),1))}u.style.zIndex=-Math.abs(Math.round(c))+e.length,Ln(0,u).style.transform=E}},setTransition:e=>{const r=t.slides.map((e=>Or(e)));r.forEach((t=>{t.style.transitionDuration=`${e}ms`,t.querySelectorAll(".swiper-slide-shadow").forEach((t=>{t.style.transitionDuration=`${e}ms`}))})),zn({swiper:t,duration:e,transformElements:r})},perspective:()=>!0,overwriteParams:()=>({watchSlidesProgress:!0,virtualTranslate:!t.params.cssMode})})}];yn.use(On);const Dn=["eventsPrefix","injectStyles","injectStylesUrls","modules","init","_direction","oneWayMovement","swiperElementNodeName","touchEventsTarget","initialSlide","_speed","cssMode","updateOnWindowResize","resizeObserver","nested","focusableElements","_enabled","_width","_height","preventInteractionOnTransition","userAgent","url","_edgeSwipeDetection","_edgeSwipeThreshold","_freeMode","_autoHeight","setWrapperSize","virtualTranslate","_effect","breakpoints","breakpointsBase","_spaceBetween","_slidesPerView","maxBackfaceHiddenSlides","_grid","_slidesPerGroup","_slidesPerGroupSkip","_slidesPerGroupAuto","_centeredSlides","_centeredSlidesBounds","_slidesOffsetBefore","_slidesOffsetAfter","normalizeSlideIndex","_centerInsufficientSlides","_watchOverflow","roundLengths","touchRatio","touchAngle","simulateTouch","_shortSwipes","_longSwipes","longSwipesRatio","longSwipesMs","_followFinger","allowTouchMove","_threshold","touchMoveStopPropagation","touchStartPreventDefault","touchStartForcePreventDefault","touchReleaseOnEdges","uniqueNavElements","_resistance","_resistanceRatio","_watchSlidesProgress","_grabCursor","preventClicks","preventClicksPropagation","_slideToClickedSlide","_loop","loopAdditionalSlides","loopAddBlankSlides","loopPreventsSliding","_rewind","_allowSlidePrev","_allowSlideNext","_swipeHandler","_noSwiping","noSwipingClass","noSwipingSelector","passiveListeners","containerModifierClass","slideClass","slideActiveClass","slideVisibleClass","slideFullyVisibleClass","slideNextClass","slidePrevClass","slideBlankClass","wrapperClass","lazyPreloaderClass","lazyPreloadPrevNext","runCallbacksOnInit","observer","observeParents","observeSlideChildren","a11y","_autoplay","_controller","coverflowEffect","cubeEffect","fadeEffect","flipEffect","creativeEffect","cardsEffect","hashNavigation","history","keyboard","mousewheel","_navigation","_pagination","parallax","_scrollbar","_thumbs","virtual","zoom","control"];function Nn(e){return"object"==typeof e&&null!==e&&e.constructor&&"Object"===Object.prototype.toString.call(e).slice(8,-1)&&!e.__swiper__}function An(e,t){const r=["__proto__","constructor","prototype"];Object.keys(t).filter((e=>r.indexOf(e)<0)).forEach((r=>{void 0===e[r]?e[r]=t[r]:Nn(t[r])&&Nn(e[r])&&Object.keys(t[r]).length>0?t[r].__swiper__?e[r]=t[r]:An(e[r],t[r]):e[r]=t[r]}))}function In(e){return void 0===e&&(e=""),e.replace(/-[a-z]/g,(e=>e.toUpperCase().replace("-","")))}const Rn=e=>{if(parseFloat(e)===Number(e))return Number(e);if("true"===e)return!0;if(""===e)return!0;if("false"===e)return!1;if("null"===e)return null;if("undefined"!==e){if("string"==typeof e&&e.includes("{")&&e.includes("}")&&e.includes('"')){let t;try{t=JSON.parse(e)}catch(r){t=e}return t}return e}},jn=["a11y","autoplay","controller","cards-effect","coverflow-effect","creative-effect","cube-effect","fade-effect","flip-effect","free-mode","grid","hash-navigation","history","keyboard","mousewheel","navigation","pagination","parallax","scrollbar","thumbs","virtual","zoom"];function $n(e,t,r){const n={},a={};An(n,vn);const i=[...Dn,"on"],s=i.map((e=>e.replace(/_/,"")));i.forEach((t=>{t=t.replace("_",""),void 0!==e[t]&&(a[t]=e[t])}));const l=[...e.attributes];return"string"==typeof t&&void 0!==r&&l.push({name:t,value:Nn(r)?{...r}:r}),l.forEach((e=>{const t=jn.filter((t=>0===e.name.indexOf(`${t}-`)))[0];if(t){const r=In(t),n=In(e.name.split(`${t}-`)[1]);void 0===a[r]&&(a[r]={}),!0===a[r]&&(a[r]={enabled:!0}),a[r][n]=Rn(e.value)}else{const t=In(e.name);if(!s.includes(t))return;const r=Rn(e.value);a[t]&&jn.includes(e.name)&&!Nn(r)?(a[t].constructor!==Object&&(a[t]={}),a[t].enabled=!!r):a[t]=r}})),An(n,a),n.navigation?n.navigation={prevEl:".swiper-button-prev",nextEl:".swiper-button-next",...!0!==n.navigation?n.navigation:{}}:!1===n.navigation&&delete n.navigation,n.scrollbar?n.scrollbar={el:".swiper-scrollbar",...!0!==n.scrollbar?n.scrollbar:{}}:!1===n.scrollbar&&delete n.scrollbar,n.pagination?n.pagination={el:".swiper-pagination",...!0!==n.pagination?n.pagination:{}}:!1===n.pagination&&delete n.pagination,{params:n,passedParams:a}}const qn=":host{--swiper-theme-color:#007aff}:host{position:relative;display:block;margin-left:auto;margin-right:auto;z-index:1}.swiper{width:100%;height:100%;margin-left:auto;margin-right:auto;position:relative;overflow:hidden;list-style:none;padding:0;z-index:1;display:block}.swiper-vertical>.swiper-wrapper{flex-direction:column}.swiper-wrapper{position:relative;width:100%;height:100%;z-index:1;display:flex;transition-property:transform;transition-timing-function:var(--swiper-wrapper-transition-timing-function,initial);box-sizing:content-box}.swiper-android ::slotted(swiper-slide),.swiper-ios ::slotted(swiper-slide),.swiper-wrapper{transform:translate3d(0px,0,0)}.swiper-horizontal{touch-action:pan-y}.swiper-vertical{touch-action:pan-x}::slotted(swiper-slide){flex-shrink:0;width:100%;height:100%;position:relative;transition-property:transform;display:block}::slotted(.swiper-slide-invisible-blank){visibility:hidden}.swiper-autoheight,.swiper-autoheight ::slotted(swiper-slide){height:auto}.swiper-autoheight .swiper-wrapper{align-items:flex-start;transition-property:transform,height}.swiper-backface-hidden ::slotted(swiper-slide){transform:translateZ(0);-webkit-backface-visibility:hidden;backface-visibility:hidden}.swiper-3d.swiper-css-mode .swiper-wrapper{perspective:1200px}.swiper-3d .swiper-wrapper{transform-style:preserve-3d}.swiper-3d{perspective:1200px}.swiper-3d .swiper-cube-shadow,.swiper-3d ::slotted(swiper-slide){transform-style:preserve-3d}.swiper-css-mode>.swiper-wrapper{overflow:auto;scrollbar-width:none;-ms-overflow-style:none}.swiper-css-mode>.swiper-wrapper::-webkit-scrollbar{display:none}.swiper-css-mode ::slotted(swiper-slide){scroll-snap-align:start start}.swiper-css-mode.swiper-horizontal>.swiper-wrapper{scroll-snap-type:x mandatory}.swiper-css-mode.swiper-vertical>.swiper-wrapper{scroll-snap-type:y mandatory}.swiper-css-mode.swiper-free-mode>.swiper-wrapper{scroll-snap-type:none}.swiper-css-mode.swiper-free-mode ::slotted(swiper-slide){scroll-snap-align:none}.swiper-css-mode.swiper-centered>.swiper-wrapper::before{content:'';flex-shrink:0;order:9999}.swiper-css-mode.swiper-centered ::slotted(swiper-slide){scroll-snap-align:center center;scroll-snap-stop:always}.swiper-css-mode.swiper-centered.swiper-horizontal ::slotted(swiper-slide):first-child{margin-inline-start:var(--swiper-centered-offset-before)}.swiper-css-mode.swiper-centered.swiper-horizontal>.swiper-wrapper::before{height:100%;min-height:1px;width:var(--swiper-centered-offset-after)}.swiper-css-mode.swiper-centered.swiper-vertical ::slotted(swiper-slide):first-child{margin-block-start:var(--swiper-centered-offset-before)}.swiper-css-mode.swiper-centered.swiper-vertical>.swiper-wrapper::before{width:100%;min-width:1px;height:var(--swiper-centered-offset-after)}.swiper-virtual ::slotted(swiper-slide){-webkit-backface-visibility:hidden;transform:translateZ(0)}.swiper-virtual.swiper-css-mode .swiper-wrapper::after{content:'';position:absolute;left:0;top:0;pointer-events:none}.swiper-virtual.swiper-css-mode.swiper-horizontal .swiper-wrapper::after{height:1px;width:var(--swiper-virtual-size)}.swiper-virtual.swiper-css-mode.swiper-vertical .swiper-wrapper::after{width:1px;height:var(--swiper-virtual-size)}:host{--swiper-navigation-size:44px}.swiper-button-next,.swiper-button-prev{position:absolute;top:var(--swiper-navigation-top-offset,50%);width:calc(var(--swiper-navigation-size)/ 44 * 27);height:var(--swiper-navigation-size);margin-top:calc(0px - (var(--swiper-navigation-size)/ 2));z-index:10;cursor:pointer;display:flex;align-items:center;justify-content:center;color:var(--swiper-navigation-color,var(--swiper-theme-color))}.swiper-button-next.swiper-button-disabled,.swiper-button-prev.swiper-button-disabled{opacity:.35;cursor:auto;pointer-events:none}.swiper-button-next.swiper-button-hidden,.swiper-button-prev.swiper-button-hidden{opacity:0;cursor:auto;pointer-events:none}.swiper-navigation-disabled .swiper-button-next,.swiper-navigation-disabled .swiper-button-prev{display:none!important}.swiper-button-next svg,.swiper-button-prev svg{width:100%;height:100%;object-fit:contain;transform-origin:center}.swiper-rtl .swiper-button-next svg,.swiper-rtl .swiper-button-prev svg{transform:rotate(180deg)}.swiper-button-prev,.swiper-rtl .swiper-button-next{left:var(--swiper-navigation-sides-offset,10px);right:auto}.swiper-button-next,.swiper-rtl .swiper-button-prev{right:var(--swiper-navigation-sides-offset,10px);left:auto}.swiper-button-lock{display:none}.swiper-pagination{position:absolute;text-align:center;transition:.3s opacity;transform:translate3d(0,0,0);z-index:10}.swiper-pagination.swiper-pagination-hidden{opacity:0}.swiper-pagination-disabled>.swiper-pagination,.swiper-pagination.swiper-pagination-disabled{display:none!important}.swiper-horizontal>.swiper-pagination-bullets,.swiper-pagination-bullets.swiper-pagination-horizontal,.swiper-pagination-custom,.swiper-pagination-fraction{bottom:var(--swiper-pagination-bottom,8px);top:var(--swiper-pagination-top,auto);left:0;width:100%}.swiper-pagination-bullets-dynamic{overflow:hidden;font-size:0}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet{transform:scale(.33);position:relative}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active{transform:scale(1)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-main{transform:scale(1)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-prev{transform:scale(.66)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-prev-prev{transform:scale(.33)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-next{transform:scale(.66)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-next-next{transform:scale(.33)}.swiper-pagination-bullet{width:var(--swiper-pagination-bullet-width,var(--swiper-pagination-bullet-size,8px));height:var(--swiper-pagination-bullet-height,var(--swiper-pagination-bullet-size,8px));display:inline-block;border-radius:var(--swiper-pagination-bullet-border-radius,50%);background:var(--swiper-pagination-bullet-inactive-color,#000);opacity:var(--swiper-pagination-bullet-inactive-opacity, .2)}button.swiper-pagination-bullet{border:none;margin:0;padding:0;box-shadow:none;-webkit-appearance:none;appearance:none}.swiper-pagination-clickable .swiper-pagination-bullet{cursor:pointer}.swiper-pagination-bullet:only-child{display:none!important}.swiper-pagination-bullet-active{opacity:var(--swiper-pagination-bullet-opacity, 1);background:var(--swiper-pagination-color,var(--swiper-theme-color))}.swiper-pagination-vertical.swiper-pagination-bullets,.swiper-vertical>.swiper-pagination-bullets{right:var(--swiper-pagination-right,8px);left:var(--swiper-pagination-left,auto);top:50%;transform:translate3d(0px,-50%,0)}.swiper-pagination-vertical.swiper-pagination-bullets .swiper-pagination-bullet,.swiper-vertical>.swiper-pagination-bullets .swiper-pagination-bullet{margin:var(--swiper-pagination-bullet-vertical-gap,6px) 0;display:block}.swiper-pagination-vertical.swiper-pagination-bullets.swiper-pagination-bullets-dynamic,.swiper-vertical>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic{top:50%;transform:translateY(-50%);width:8px}.swiper-pagination-vertical.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet,.swiper-vertical>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet{display:inline-block;transition:.2s transform,.2s top}.swiper-horizontal>.swiper-pagination-bullets .swiper-pagination-bullet,.swiper-pagination-horizontal.swiper-pagination-bullets .swiper-pagination-bullet{margin:0 var(--swiper-pagination-bullet-horizontal-gap,4px)}.swiper-horizontal>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic,.swiper-pagination-horizontal.swiper-pagination-bullets.swiper-pagination-bullets-dynamic{left:50%;transform:translateX(-50%);white-space:nowrap}.swiper-horizontal>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet,.swiper-pagination-horizontal.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet{transition:.2s transform,.2s left}.swiper-horizontal.swiper-rtl>.swiper-pagination-bullets-dynamic .swiper-pagination-bullet{transition:.2s transform,.2s right}.swiper-pagination-fraction{color:var(--swiper-pagination-fraction-color,inherit)}.swiper-pagination-progressbar{background:var(--swiper-pagination-progressbar-bg-color,rgba(0,0,0,.25));position:absolute}.swiper-pagination-progressbar .swiper-pagination-progressbar-fill{background:var(--swiper-pagination-color,var(--swiper-theme-color));position:absolute;left:0;top:0;width:100%;height:100%;transform:scale(0);transform-origin:left top}.swiper-rtl .swiper-pagination-progressbar .swiper-pagination-progressbar-fill{transform-origin:right top}.swiper-horizontal>.swiper-pagination-progressbar,.swiper-pagination-progressbar.swiper-pagination-horizontal,.swiper-pagination-progressbar.swiper-pagination-vertical.swiper-pagination-progressbar-opposite,.swiper-vertical>.swiper-pagination-progressbar.swiper-pagination-progressbar-opposite{width:100%;height:var(--swiper-pagination-progressbar-size,4px);left:0;top:0}.swiper-horizontal>.swiper-pagination-progressbar.swiper-pagination-progressbar-opposite,.swiper-pagination-progressbar.swiper-pagination-horizontal.swiper-pagination-progressbar-opposite,.swiper-pagination-progressbar.swiper-pagination-vertical,.swiper-vertical>.swiper-pagination-progressbar{width:var(--swiper-pagination-progressbar-size,4px);height:100%;left:0;top:0}.swiper-pagination-lock{display:none}.swiper-scrollbar{border-radius:var(--swiper-scrollbar-border-radius,10px);position:relative;touch-action:none;background:var(--swiper-scrollbar-bg-color,rgba(0,0,0,.1))}.swiper-scrollbar-disabled>.swiper-scrollbar,.swiper-scrollbar.swiper-scrollbar-disabled{display:none!important}.swiper-horizontal>.swiper-scrollbar,.swiper-scrollbar.swiper-scrollbar-horizontal{position:absolute;left:var(--swiper-scrollbar-sides-offset,1%);bottom:var(--swiper-scrollbar-bottom,4px);top:var(--swiper-scrollbar-top,auto);z-index:50;height:var(--swiper-scrollbar-size,4px);width:calc(100% - 2 * var(--swiper-scrollbar-sides-offset,1%))}.swiper-scrollbar.swiper-scrollbar-vertical,.swiper-vertical>.swiper-scrollbar{position:absolute;left:var(--swiper-scrollbar-left,auto);right:var(--swiper-scrollbar-right,4px);top:var(--swiper-scrollbar-sides-offset,1%);z-index:50;width:var(--swiper-scrollbar-size,4px);height:calc(100% - 2 * var(--swiper-scrollbar-sides-offset,1%))}.swiper-scrollbar-drag{height:100%;width:100%;position:relative;background:var(--swiper-scrollbar-drag-bg-color,rgba(0,0,0,.5));border-radius:var(--swiper-scrollbar-border-radius,10px);left:0;top:0}.swiper-scrollbar-cursor-drag{cursor:move}.swiper-scrollbar-lock{display:none}::slotted(.swiper-slide-zoomed){cursor:move;touch-action:none}.swiper .swiper-notification{position:absolute;left:0;top:0;pointer-events:none;opacity:0;z-index:-1000}.swiper-free-mode>.swiper-wrapper{transition-timing-function:ease-out;margin:0 auto}.swiper-grid>.swiper-wrapper{flex-wrap:wrap}.swiper-grid-column>.swiper-wrapper{flex-wrap:wrap;flex-direction:column}.swiper-fade.swiper-free-mode ::slotted(swiper-slide){transition-timing-function:ease-out}.swiper-fade ::slotted(swiper-slide){pointer-events:none;transition-property:opacity}.swiper-fade ::slotted(swiper-slide) ::slotted(swiper-slide){pointer-events:none}.swiper-fade ::slotted(.swiper-slide-active){pointer-events:auto}.swiper-fade ::slotted(.swiper-slide-active) ::slotted(.swiper-slide-active){pointer-events:auto}.swiper-cube{overflow:visible}.swiper-cube ::slotted(swiper-slide){pointer-events:none;-webkit-backface-visibility:hidden;backface-visibility:hidden;z-index:1;visibility:hidden;transform-origin:0 0;width:100%;height:100%}.swiper-cube ::slotted(swiper-slide) ::slotted(swiper-slide){pointer-events:none}.swiper-cube.swiper-rtl ::slotted(swiper-slide){transform-origin:100% 0}.swiper-cube ::slotted(.swiper-slide-active),.swiper-cube ::slotted(.swiper-slide-active) ::slotted(.swiper-slide-active){pointer-events:auto}.swiper-cube ::slotted(.swiper-slide-active),.swiper-cube ::slotted(.swiper-slide-next),.swiper-cube ::slotted(.swiper-slide-prev){pointer-events:auto;visibility:visible}.swiper-cube .swiper-cube-shadow{position:absolute;left:0;bottom:0px;width:100%;height:100%;opacity:.6;z-index:0}.swiper-cube .swiper-cube-shadow:before{content:'';background:#000;position:absolute;left:0;top:0;bottom:0;right:0;filter:blur(50px)}.swiper-cube ::slotted(.swiper-slide-next)+::slotted(swiper-slide){pointer-events:auto;visibility:visible}.swiper-flip{overflow:visible}.swiper-flip ::slotted(swiper-slide){pointer-events:none;-webkit-backface-visibility:hidden;backface-visibility:hidden;z-index:1}.swiper-flip ::slotted(swiper-slide) ::slotted(swiper-slide){pointer-events:none}.swiper-flip ::slotted(.swiper-slide-active),.swiper-flip ::slotted(.swiper-slide-active) ::slotted(.swiper-slide-active){pointer-events:auto}.swiper-creative ::slotted(swiper-slide){-webkit-backface-visibility:hidden;backface-visibility:hidden;overflow:hidden;transition-property:transform,opacity,height}.swiper-cards{overflow:visible}.swiper-cards ::slotted(swiper-slide){transform-origin:center bottom;-webkit-backface-visibility:hidden;backface-visibility:hidden;overflow:hidden}",Fn="undefined"==typeof window||"undefined"==typeof HTMLElement?class{}:HTMLElement,Bn='<svg width="11" height="20" viewBox="0 0 11 20" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M0.38296 20.0762C0.111788 19.805 0.111788 19.3654 0.38296 19.0942L9.19758 10.2796L0.38296 1.46497C0.111788 1.19379 0.111788 0.754138 0.38296 0.482966C0.654131 0.211794 1.09379 0.211794 1.36496 0.482966L10.4341 9.55214C10.8359 9.9539 10.8359 10.6053 10.4341 11.007L1.36496 20.0762C1.09379 20.3474 0.654131 20.3474 0.38296 20.0762Z" fill="currentColor"/></svg>\n    ',Hn=(e,t)=>{if("undefined"!=typeof CSSStyleSheet&&e.adoptedStyleSheets){const r=new CSSStyleSheet;r.replaceSync(t),e.adoptedStyleSheets=[r]}else{const r=document.createElement("style");r.rel="stylesheet",r.textContent=t,e.appendChild(r)}};class Vn extends Fn{constructor(){super(),this.attachShadow({mode:"open"})}static get nextButtonSvg(){return Bn}static get prevButtonSvg(){return Bn.replace("/></svg>",' transform-origin="center" transform="rotate(180)"/></svg>')}cssStyles(){return[qn,...this.injectStyles&&Array.isArray(this.injectStyles)?this.injectStyles:[]].join("\n")}cssLinks(){return this.injectStylesUrls||[]}calcSlideSlots(){const e=this.slideSlots||0,t=[...this.querySelectorAll("[slot^=slide-]")].map((e=>parseInt(e.getAttribute("slot").split("slide-")[1],10)));if(this.slideSlots=t.length?Math.max(...t)+1:0,this.rendered)if(this.slideSlots>e)for(let t=e;t<this.slideSlots;t+=1){const e=document.createElement("swiper-slide");e.setAttribute("part",`slide slide-${t+1}`);const r=document.createElement("slot");r.setAttribute("name",`slide-${t+1}`),e.appendChild(r),this.shadowRoot.querySelector(".swiper-wrapper").appendChild(e)}else if(this.slideSlots<e){const e=this.swiper.slides;for(let t=e.length-1;t>=0;t-=1)t>this.slideSlots&&e[t].remove()}}render(){if(this.rendered)return;this.calcSlideSlots();let e=this.cssStyles();this.slideSlots>0&&(e=e.replace(/::slotted\(([a-z-0-9.]*)\)/g,"$1")),e.length&&Hn(this.shadowRoot,e),this.cssLinks().forEach((e=>{if(this.shadowRoot.querySelector(`link[href="${e}"]`))return;const t=document.createElement("link");t.rel="stylesheet",t.href=e,this.shadowRoot.appendChild(t)}));const t=document.createElement("div");var r;t.classList.add("swiper"),t.part="container",t.innerHTML=`\n      <slot name="container-start"></slot>\n      <div class="swiper-wrapper" part="wrapper">\n        <slot></slot>\n        ${Array.from({length:this.slideSlots}).map(((e,t)=>`\n        <swiper-slide part="slide slide-${t}">\n          <slot name="slide-${t}"></slot>\n        </swiper-slide>\n        `)).join("")}\n      </div>\n      <slot name="container-end"></slot>\n      ${r=this.passedParams,void 0===r&&(r={}),r.navigation&&void 0===r.navigation.nextEl&&void 0===r.navigation.prevEl?`\n        <div part="button-prev" class="swiper-button-prev">${this.constructor.prevButtonSvg}</div>\n        <div part="button-next" class="swiper-button-next">${this.constructor.nextButtonSvg}</div>\n      `:""}\n      ${function(e){return void 0===e&&(e={}),e.pagination&&void 0===e.pagination.el}(this.passedParams)?'\n        <div part="pagination" class="swiper-pagination"></div>\n      ':""}\n      ${function(e){return void 0===e&&(e={}),e.scrollbar&&void 0===e.scrollbar.el}(this.passedParams)?'\n        <div part="scrollbar" class="swiper-scrollbar"></div>\n      ':""}\n    `,this.shadowRoot.appendChild(t),this.rendered=!0}initialize(){var e=this;if(this.initialized)return;this.initialized=!0;const{params:t,passedParams:r}=$n(this);this.swiperParams=t,this.passedParams=r,delete this.swiperParams.init,this.render(),this.swiper=new yn(this.shadowRoot.querySelector(".swiper"),{...t.virtual?{}:{observer:!0,observeSlideChildren:this.slideSlots>0},...t,touchEventsTarget:"container",onAny:function(r){"observerUpdate"===r&&e.calcSlideSlots();const n=t.eventsPrefix?`${t.eventsPrefix}${r.toLowerCase()}`:r.toLowerCase();for(var a=arguments.length,i=new Array(a>1?a-1:0),s=1;s<a;s++)i[s-1]=arguments[s];const l=new CustomEvent(n,{detail:i,bubbles:"hashChange"!==r,cancelable:!0});e.dispatchEvent(l)}})}connectedCallback(){this.initialized&&this.nested&&this.closest("swiper-slide")&&this.closest("swiper-slide").swiperLoopMoveDOM||!1!==this.init&&"false"!==this.getAttribute("init")&&this.initialize()}disconnectedCallback(){this.nested&&this.closest("swiper-slide")&&this.closest("swiper-slide").swiperLoopMoveDOM||(this.swiper&&this.swiper.destroy&&this.swiper.destroy(),this.initialized=!1)}updateSwiperOnPropChange(e,t){const{params:r,passedParams:n}=$n(this,e,t);this.passedParams=n,this.swiperParams=r,this.swiper&&this.swiper.params[e]===t||function(e){let{swiper:t,slides:r,passedParams:n,changedParams:a,nextEl:i,prevEl:s,scrollbarEl:l,paginationEl:o}=e;const u=a.filter((e=>"children"!==e&&"direction"!==e&&"wrapperClass"!==e)),{params:c,pagination:d,navigation:p,scrollbar:f,virtual:m,thumbs:h}=t;let v,g,b,w,y,x,S,E;a.includes("thumbs")&&n.thumbs&&n.thumbs.swiper&&c.thumbs&&!c.thumbs.swiper&&(v=!0),a.includes("controller")&&n.controller&&n.controller.control&&c.controller&&!c.controller.control&&(g=!0),a.includes("pagination")&&n.pagination&&(n.pagination.el||o)&&(c.pagination||!1===c.pagination)&&d&&!d.el&&(b=!0),a.includes("scrollbar")&&n.scrollbar&&(n.scrollbar.el||l)&&(c.scrollbar||!1===c.scrollbar)&&f&&!f.el&&(w=!0),a.includes("navigation")&&n.navigation&&(n.navigation.prevEl||s)&&(n.navigation.nextEl||i)&&(c.navigation||!1===c.navigation)&&p&&!p.prevEl&&!p.nextEl&&(y=!0);const k=e=>{t[e]&&(t[e].destroy(),"navigation"===e?(t.isElement&&(t[e].prevEl.remove(),t[e].nextEl.remove()),c[e].prevEl=void 0,c[e].nextEl=void 0,t[e].prevEl=void 0,t[e].nextEl=void 0):(t.isElement&&t[e].el.remove(),c[e].el=void 0,t[e].el=void 0))};a.includes("loop")&&t.isElement&&(c.loop&&!n.loop?x=!0:!c.loop&&n.loop?S=!0:E=!0),u.forEach((e=>{if(Nn(c[e])&&Nn(n[e]))Object.assign(c[e],n[e]),"navigation"!==e&&"pagination"!==e&&"scrollbar"!==e||!("enabled"in n[e])||n[e].enabled||k(e);else{const t=n[e];!0!==t&&!1!==t||"navigation"!==e&&"pagination"!==e&&"scrollbar"!==e?c[e]=n[e]:!1===t&&k(e)}})),u.includes("controller")&&!g&&t.controller&&t.controller.control&&c.controller&&c.controller.control&&(t.controller.control=c.controller.control),a.includes("children")&&r&&m&&c.virtual.enabled?(m.slides=r,m.update(!0)):a.includes("virtual")&&m&&c.virtual.enabled&&(r&&(m.slides=r),m.update(!0)),a.includes("children")&&r&&c.loop&&(E=!0),v&&h.init()&&h.update(!0),g&&(t.controller.control=c.controller.control),b&&(!t.isElement||o&&"string"!=typeof o||(o=document.createElement("div"),o.classList.add("swiper-pagination"),o.part.add("pagination"),t.el.appendChild(o)),o&&(c.pagination.el=o),d.init(),d.render(),d.update()),w&&(!t.isElement||l&&"string"!=typeof l||(l=document.createElement("div"),l.classList.add("swiper-scrollbar"),l.part.add("scrollbar"),t.el.appendChild(l)),l&&(c.scrollbar.el=l),f.init(),f.updateSize(),f.setTranslate()),y&&(t.isElement&&(i&&"string"!=typeof i||(i=document.createElement("div"),i.classList.add("swiper-button-next"),i.innerHTML=t.hostEl.constructor.nextButtonSvg,i.part.add("button-next"),t.el.appendChild(i)),s&&"string"!=typeof s||(s=document.createElement("div"),s.classList.add("swiper-button-prev"),s.innerHTML=t.hostEl.constructor.prevButtonSvg,s.part.add("button-prev"),t.el.appendChild(s))),i&&(c.navigation.nextEl=i),s&&(c.navigation.prevEl=s),p.init(),p.update()),a.includes("allowSlideNext")&&(t.allowSlideNext=n.allowSlideNext),a.includes("allowSlidePrev")&&(t.allowSlidePrev=n.allowSlidePrev),a.includes("direction")&&t.changeDirection(n.direction,!1),(x||E)&&t.loopDestroy(),(S||E)&&t.loopCreate(),t.update()}({swiper:this.swiper,passedParams:this.passedParams,changedParams:[In(e)],..."navigation"===e&&n[e]?{prevEl:".swiper-button-prev",nextEl:".swiper-button-next"}:{},..."pagination"===e&&n[e]?{paginationEl:".swiper-pagination"}:{},..."scrollbar"===e&&n[e]?{scrollbarEl:".swiper-scrollbar"}:{}})}attributeChangedCallback(e,t,r){this.initialized&&("true"===t&&null===r&&(r=!1),this.updateSwiperOnPropChange(e,r))}static get observedAttributes(){return Dn.filter((e=>e.includes("_"))).map((e=>e.replace(/[A-Z]/g,(e=>`-${e}`)).replace("_","").toLowerCase()))}}Dn.forEach((e=>{"init"!==e&&(e=e.replace("_",""),Object.defineProperty(Vn.prototype,e,{configurable:!0,get(){return(this.passedParams||{})[e]},set(t){this.passedParams||(this.passedParams={}),this.passedParams[e]=t,this.initialized&&this.updateSwiperOnPropChange(e,t)}}))}));"undefined"!=typeof window&&(window.SwiperElementRegisterParams=e=>{Dn.push(...e)}),"undefined"!=typeof window&&(window.customElements.get("swiper-container")||window.customElements.define("swiper-container",Vn),window.customElements.get("swiper-slide")||window.customElements.define("swiper-slide",class extends Fn{constructor(){super(),this.attachShadow({mode:"open"})}render(){const e=this.lazy||""===this.getAttribute("lazy")||"true"===this.getAttribute("lazy");if(Hn(this.shadowRoot,"::slotted(.swiper-slide-shadow),::slotted(.swiper-slide-shadow-bottom),::slotted(.swiper-slide-shadow-left),::slotted(.swiper-slide-shadow-right),::slotted(.swiper-slide-shadow-top){position:absolute;left:0;top:0;width:100%;height:100%;pointer-events:none;z-index:10}::slotted(.swiper-slide-shadow){background:rgba(0,0,0,.15)}::slotted(.swiper-slide-shadow-left){background-image:linear-gradient(to left,rgba(0,0,0,.5),rgba(0,0,0,0))}::slotted(.swiper-slide-shadow-right){background-image:linear-gradient(to right,rgba(0,0,0,.5),rgba(0,0,0,0))}::slotted(.swiper-slide-shadow-top){background-image:linear-gradient(to top,rgba(0,0,0,.5),rgba(0,0,0,0))}::slotted(.swiper-slide-shadow-bottom){background-image:linear-gradient(to bottom,rgba(0,0,0,.5),rgba(0,0,0,0))}.swiper-lazy-preloader{animation:swiper-preloader-spin 1s infinite linear;width:42px;height:42px;position:absolute;left:50%;top:50%;margin-left:-21px;margin-top:-21px;z-index:10;transform-origin:50%;box-sizing:border-box;border:4px solid var(--swiper-preloader-color,var(--swiper-theme-color));border-radius:50%;border-top-color:transparent}@keyframes swiper-preloader-spin{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}::slotted(.swiper-slide-shadow-cube.swiper-slide-shadow-bottom),::slotted(.swiper-slide-shadow-cube.swiper-slide-shadow-left),::slotted(.swiper-slide-shadow-cube.swiper-slide-shadow-right),::slotted(.swiper-slide-shadow-cube.swiper-slide-shadow-top){z-index:0;-webkit-backface-visibility:hidden;backface-visibility:hidden}::slotted(.swiper-slide-shadow-flip.swiper-slide-shadow-bottom),::slotted(.swiper-slide-shadow-flip.swiper-slide-shadow-left),::slotted(.swiper-slide-shadow-flip.swiper-slide-shadow-right),::slotted(.swiper-slide-shadow-flip.swiper-slide-shadow-top){z-index:0;-webkit-backface-visibility:hidden;backface-visibility:hidden}::slotted(.swiper-zoom-container){width:100%;height:100%;display:flex;justify-content:center;align-items:center;text-align:center}::slotted(.swiper-zoom-container)>canvas,::slotted(.swiper-zoom-container)>img,::slotted(.swiper-zoom-container)>svg{max-width:100%;max-height:100%;object-fit:contain}"),this.shadowRoot.appendChild(document.createElement("slot")),e){const e=document.createElement("div");e.classList.add("swiper-lazy-preloader"),e.part.add("preloader"),this.shadowRoot.appendChild(e)}}initialize(){this.render()}connectedCallback(){this.initialize()}}));const Un=function(e){var r=e.className,n=(0,t.useRef)(null);return(0,qt.jsxs)("div",{className:r,children:[(0,qt.jsx)("swiper-container",{ref:n,"navigation-next-el":".custom-next-button","navigation-prev-el":".custom-prev-button","slides-per-view":"1",navigation:"true",pagination:"true",loop:"true","autoplay-delay":"6000",class:"h-full",children:gr.map((function(e){return(0,qt.jsxs)("swiper-slide",{class:"h-full px-[64px] lg:px-[96px]",children:[(0,qt.jsxs)("div",{className:"absolute top-0 left-0 z-[-1] w-full h-full",children:[(0,qt.jsx)("img",{className:"object-cover w-full h-full",src:e.imagePath,alt:e.title}),(0,qt.jsx)("div",{className:"absolute top-0 left-0 w-full h-full bg-gradient-to-t from-black opacity-75"})]}),(0,qt.jsxs)("div",{className:"flex flex-col items-start pt-[237px]",children:[(0,qt.jsx)(er,{level:"h2",className:"text-white max-xl:text-[32px] text-[40px] ",children:e.title}),(0,qt.jsx)(er,{level:"p",className:"text-grayLight max-xl:text-[22px] text-[24px] mt-2",children:e.preview}),(0,qt.jsx)(Ft,{to:"#",className:"px-12 mt-8",variant:e.variantButton,children:"Подробнее"})]})]},e.title)}))}),(0,qt.jsx)("div",{className:"custom-prev-button w-sidebar h-full absolute top-0 cursor-pointer z-20 bg-transparent bg-opacity-0 hover:bg-main hover:bg-opacity-20 transition-colors",onClick:function(){n.current.swiper.slidePrev()},children:(0,qt.jsx)("div",{className:"absolute top-1/2 -translate-y-1/2 left-7",children:(0,qt.jsx)(mr,{})})}),(0,qt.jsx)("div",{className:"custom-next-button w-sidebar h-full absolute top-0 right-0 cursor-pointer z-20 bg-transparent bg-opacity-0 hover:bg-main hover:bg-opacity-20 transition-colors",onClick:function(){n.current.swiper.slideNext()},children:(0,qt.jsx)("div",{className:"absolute top-1/2 -translate-y-1/2 right-7",children:(0,qt.jsx)(dr,{})})})]})},Wn=function(){return(0,qt.jsxs)("div",{className:"h-full flex",children:[(0,qt.jsx)("div",{className:"w-full lg:w-3/5 xl:w-1/2",children:(0,qt.jsxs)(Ut,{className:"flex flex-col",children:[(0,qt.jsx)(tr,{}),(0,qt.jsxs)("div",{className:"mt-[140px] max-md:mt-[32px]",children:[(0,qt.jsxs)(er,{level:"h1",children:["Каршеринг ",(0,qt.jsx)("br",{})," ",(0,qt.jsx)("span",{className:"text-main",children:"Need for drive"})]}),(0,qt.jsx)(er,{level:"p",className:"mt-[34px] max-md:mt-[16px] text-[26px] max-md:text-[18px]",children:"Поминутная аренда авто твоего города"}),(0,qt.jsx)(Ft,{className:"mt-[32px] md:mt-[60px] px-14",variant:"green-to-darkgreen",children:"Забронировать"})]}),(0,qt.jsxs)("div",{className:"mt-auto flex justify-between items-center py-[32px] max-md:py-[16px] max-md:flex-col-reverse max-md:items-end max-md:justify-end",children:[(0,qt.jsx)(er,{className:"text-gray",level:"p",children:"© 2016-2019 «Need for drive»"}),(0,qt.jsx)(Ft,{to:"tel:84952342244",className:"text-black px-0 transition-colors hover:text-main",children:"8 (495) 234-22-44"})]})]})}),(0,qt.jsx)(Un,{className:"w-2/5 xl:w-1/2 hidden lg:block relative"})]})},Gn=(Yn=[{path:Lt.MAIN_PAGE,element:(0,qt.jsx)(lr,{}),children:[{index:!0,element:(0,qt.jsx)(Wn,{})},{path:Lt.INSURANCE_PAGE,element:(0,qt.jsx)(ur,{})},{path:Lt.GASOLINE_PAGE,element:(0,qt.jsx)(ur,{})},{path:Lt.PARKING_PAGE,element:(0,qt.jsx)(ur,{})},{path:Lt.SERVICE_PAGE,element:(0,qt.jsx)(ur,{})}]}],te({basename:void 0,future:st({},void 0,{v7_prependBasename:!0}),history:(Xn={window:void 0},void 0===Xn&&(Xn={}),m((function(e,t){let{pathname:r,search:n,hash:a}=e.location;return d("",{pathname:r,search:n,hash:a},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){return"string"==typeof t?t:p(t)}),null,Xn)),hydrationData:ct(),routes:Yn,mapRouteProperties:it,unstable_dataStrategy:void 0,window:void 0}).initialize());var Yn,Xn;const Qn=function(){return(0,qt.jsx)(bt,{router:Gn})};a(338).createRoot(document.getElementById("rootMain")).render((0,qt.jsx)(Qn,{}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,